Directory structure:
└── dmc-docs/
    └── docs/
        ├── accordion/
        │   ├── accordion.md
        │   ├── chevron.py
        │   ├── compose.py
        │   ├── default.py
        │   ├── disabled.py
        │   ├── icons.py
        │   ├── interactive.py
        │   ├── label.py
        │   ├── multiple.py
        │   ├── state.py
        │   ├── styles.py
        │   └── transition.py
        ├── actionicon/
        │   ├── actionicon.md
        │   ├── autocontrast.py
        │   ├── colors.py
        │   ├── gradient.py
        │   ├── group.py
        │   ├── interactive.py
        │   ├── loader_props.py
        │   ├── loading.py
        │   ├── simple.py
        │   ├── size_input.py
        │   └── variant.py
        ├── affix/
        │   ├── affix.md
        │   └── simple.py
        ├── alert/
        │   ├── alert.md
        │   ├── auto.py
        │   ├── colors.py
        │   ├── dismissible.py
        │   ├── interactive.py
        │   └── simple.py
        ├── anchor/
        │   ├── anchor.md
        │   ├── simple.py
        │   ├── text.py
        │   └── underline.py
        ├── appshell/
        │   └── appshell.md
        ├── areachart/
        │   ├── area_animation.py
        │   ├── areachart.md
        │   ├── areacolor-light-dark.py
        │   ├── areacolor.py
        │   ├── axislabels.py
        │   ├── clickdata.py
        │   ├── connectnulls.py
        │   ├── customizedots.py
        │   ├── dashedarealine.py
        │   ├── data.py
        │   ├── fillopacity.py
        │   ├── grid-text-color-light-dark.py
        │   ├── grid-text-color.py
        │   ├── highlighthover.py
        │   ├── hoverdata.py
        │   ├── interactive.py
        │   ├── legend.py
        │   ├── legendposition.py
        │   ├── percent.py
        │   ├── referencelines.py
        │   ├── removetooltip.py
        │   ├── rightyaxis.py
        │   ├── rotatexaxislabels.py
        │   ├── serieslabels.py
        │   ├── split.py
        │   ├── splitcolors.py
        │   ├── stacked.py
        │   ├── strokedasharray.py
        │   ├── strokewidth.py
        │   ├── sync.py
        │   ├── tooltipanimation.py
        │   ├── units.py
        │   ├── vertical.py
        │   ├── xaxisoffset.py
        │   ├── xyaxis.py
        │   └── yaxisscale.py
        ├── aspectratio/
        │   ├── aspectratio.md
        │   ├── flex.py
        │   ├── map.py
        │   ├── simple.py
        │   └── video.py
        ├── avatar/
        │   ├── allowedinitialscolors.py
        │   ├── avatar.md
        │   ├── contributors.py
        │   ├── group.py
        │   ├── initials.py
        │   ├── interactive.py
        │   ├── placeholder.py
        │   ├── simple.py
        │   └── tooltip.py
        ├── badge/
        │   ├── badge.md
        │   ├── colors.py
        │   ├── gradient.py
        │   ├── interactive.py
        │   ├── radius.py
        │   ├── rounded.py
        │   ├── section.py
        │   ├── size.py
        │   └── variant.py
        ├── barchart/
        │   ├── area-color-light-dark.py
        │   ├── areacolor.py
        │   ├── axislabels.py
        │   ├── bar_animation.py
        │   ├── bar_value_label.py
        │   ├── barchart.md
        │   ├── barprops.py
        │   ├── clickdata.py
        │   ├── data.py
        │   ├── grid-text-color-light-dark.py
        │   ├── highlighthover.py
        │   ├── hoverdata.py
        │   ├── interactive.py
        │   ├── legend.py
        │   ├── legendposition.py
        │   ├── percent.py
        │   ├── referencelines.py
        │   ├── removetooltip.py
        │   ├── serieslabels.py
        │   ├── stacked.py
        │   ├── stacked_mixed.py
        │   ├── strokedasharray.py
        │   ├── svg.py
        │   ├── sync.py
        │   ├── tooltipanimation.py
        │   ├── units.py
        │   ├── vertical.py
        │   ├── waterfall.py
        │   ├── xaxisoffset.py
        │   ├── xyaxis.py
        │   └── yaxisscale.py
        ├── blockquote/
        │   ├── blockquote.md
        │   ├── icon.py
        │   └── simple.py
        ├── box/
        │   └── box.md
        ├── breadcrumbs/
        │   ├── breadcrumbs.md
        │   └── simple.py
        ├── bubblechart/
        │   ├── area-color-light-dark.py
        │   ├── bubblechart.md
        │   ├── clickdata.py
        │   ├── data.py
        │   ├── grid-text-color-light-dark.py
        │   ├── hoverdata.py
        │   ├── interactive.py
        │   ├── remove_tooltip.py
        │   └── simple.py
        ├── burger/
        │   ├── burger.md
        │   ├── color.py
        │   ├── interactive.py
        │   └── simple.py
        ├── button/
        │   ├── button.md
        │   ├── colors.py
        │   ├── compact.py
        │   ├── full.py
        │   ├── gradient.py
        │   ├── group.py
        │   ├── icons.py
        │   ├── interactive-justify.py
        │   ├── interactive.py
        │   ├── justify.py
        │   ├── loader-props.py
        │   ├── loading.py
        │   └── variant.py
        ├── card/
        │   ├── border.py
        │   ├── card.md
        │   └── simple.py
        ├── carousel/
        │   ├── active.py
        │   ├── autoplay.py
        │   ├── autoplay_props.py
        │   ├── autoscroll.py
        │   ├── cards.py
        │   ├── carousel.md
        │   ├── containerquery.py
        │   ├── controls_icons.py
        │   ├── drag_free.py
        │   ├── hide_inactive_controls.py
        │   ├── images.py
        │   ├── indicator_styles.py
        │   ├── initial.py
        │   ├── interactive.py
        │   ├── responsive.py
        │   ├── show_controls_on_hover.py
        │   ├── simple.py
        │   ├── size_gap.py
        │   ├── tabs.py
        │   └── vertical.py
        ├── center/
        │   ├── center.md
        │   ├── inline.py
        │   └── simple.py
        ├── chartsintro/
        │   └── chartsintro.md
        ├── checkbox/
        │   ├── checkbox.md
        │   ├── checkboxcard.py
        │   ├── checkboxcardgroup.py
        │   ├── checkboxindicator.py
        │   ├── colors.py
        │   ├── group.py
        │   ├── iconcolor.py
        │   ├── icons.py
        │   ├── indeterminate.py
        │   ├── interactive.py
        │   ├── link.py
        │   ├── simple.py
        │   ├── sizes.py
        │   └── states.py
        ├── chip/
        │   ├── chip.md
        │   ├── chipgroup_checklist.py
        │   ├── chipgroup_radio.py
        │   ├── chipgroup_radio_deselectable.py
        │   ├── icon.py
        │   ├── interactive.py
        │   ├── root.py
        │   ├── simple.py
        │   ├── states.py
        │   └── tooltip.py
        ├── code/
        │   ├── block.py
        │   ├── code.md
        │   ├── colors.py
        │   └── inline.py
        ├── code-highlight/
        │   ├── code-highlight.md
        │   ├── copy_btn.py
        │   ├── expandable.py
        │   ├── inline.py
        │   ├── simple.py
        │   └── tabs.py
        ├── collapse/
        │   ├── collapse.md
        │   ├── nested.py
        │   ├── simple.py
        │   └── transition.py
        ├── colorinput/
        │   ├── colorinput.md
        │   ├── disable-free-input.py
        │   ├── eyedropper.py
        │   ├── formats.py
        │   ├── interactive.py
        │   ├── preview.py
        │   ├── simple.py
        │   ├── swatches-only.py
        │   └── swatches.py
        ├── colorpicker/
        │   ├── colorpicker.md
        │   ├── formats.py
        │   ├── picker.py
        │   ├── simple.py
        │   └── swatches.py
        ├── colors/
        │   ├── color_c_props.py
        │   ├── color_index.py
        │   ├── color_prop.py
        │   ├── colors.md
        │   ├── colorswatch.py
        │   ├── custom_colors.py
        │   ├── light-dark-function.py
        │   ├── light-dark-var.py
        │   ├── light-dark.py
        │   ├── primaryshade.py
        │   └── theme_colors.py
        ├── compositechart/
        │   ├── axislabels.py
        │   ├── chartcolor.py
        │   ├── clickdata.py
        │   ├── compositechart.md
        │   ├── customizedots.py
        │   ├── dashedlines.py
        │   ├── data.py
        │   ├── grid-text-color-light-dark.py
        │   ├── highlighthover.py
        │   ├── hoverdata.py
        │   ├── interactive.py
        │   ├── legend.py
        │   ├── legendposition.py
        │   ├── line-color-light-dark.py
        │   ├── pointslabels.py
        │   ├── referencelines.py
        │   ├── removetooltip.py
        │   ├── serieslabels.py
        │   ├── strokedasharray.py
        │   ├── strokewidth.py
        │   ├── sync.py
        │   ├── tooltipanimation.py
        │   ├── units.py
        │   ├── xaxisoffset.py
        │   ├── xyaxis.py
        │   └── yaxisscale.py
        ├── container/
        │   ├── container.md
        │   ├── fluid.py
        │   └── simple.py
        ├── cssvariables/
        │   ├── button.py
        │   ├── cssvariable_list.py
        │   ├── cssvariable_list_dark.py
        │   ├── cssvariable_list_light.py
        │   └── cssvariables.md
        ├── dash-iconify/
        │   ├── dash-iconify.md
        │   ├── dmc.py
        │   └── props.py
        ├── dateinput/
        │   ├── clearable.py
        │   ├── dateinput.md
        │   ├── formats.py
        │   ├── interactive.py
        │   ├── minmax.py
        │   ├── simple.py
        │   └── time.py
        ├── datepicker/
        │   └── datepicker.md
        ├── datepickerinput/
        │   ├── clearable.py
        │   ├── columns.py
        │   ├── datepickerinput.md
        │   ├── errors.py
        │   ├── formats.py
        │   ├── locale.py
        │   ├── modal.py
        │   ├── multiple.py
        │   ├── range.py
        │   └── simple.py
        ├── datesprovider/
        │   ├── datesprovider.md
        │   └── simple.py
        ├── datetimepicker/
        │   ├── clearable.py
        │   ├── datetimepicker.md
        │   ├── disabled.py
        │   ├── interactive.py
        │   ├── modal.py
        │   ├── seconds.py
        │   ├── simple.py
        │   └── valueformat.py
        ├── divider/
        │   ├── color.py
        │   ├── divider.md
        │   ├── label.py
        │   ├── orientation.py
        │   ├── simple.py
        │   └── sizes.py
        ├── donutchart/
        │   ├── angle.py
        │   ├── chartlabel.py
        │   ├── clickdata.py
        │   ├── data.py
        │   ├── donut.md
        │   ├── donut_animation.py
        │   ├── hoverdata.py
        │   ├── paddingangle.py
        │   ├── segmentcolor.py
        │   ├── segmentlabels.py
        │   ├── size.py
        │   ├── stroke.py
        │   ├── strokewidth.py
        │   ├── tooltipdatasource.py
        │   ├── usage.py
        │   └── withouttooltip.py
        ├── drawer/
        │   ├── drawer.md
        │   ├── placement.py
        │   ├── simple.py
        │   ├── sizes.py
        │   └── transition.py
        ├── fieldset/
        │   ├── disabled.py
        │   ├── fieldset.md
        │   └── interactive.py
        ├── figuretemplates/
        │   ├── mantine_figure_templates.py
        │   ├── multiple_figures.py
        │   ├── plotly_figure_templates.py
        │   ├── templates.md
        │   └── theme_switch.py
        ├── flex/
        │   ├── flex.md
        │   ├── interactive.py
        │   └── responsive.py
        ├── getting-started/
        │   ├── getting-started.md
        │   └── interactive.py
        ├── grid/
        │   ├── auto.py
        │   ├── columns.py
        │   ├── container.py
        │   ├── fit.py
        │   ├── grid.md
        │   ├── gutter-grow.py
        │   ├── gutter.py
        │   ├── justify.py
        │   ├── multiple.py
        │   ├── offset.py
        │   ├── order.py
        │   ├── simple.py
        │   └── span.py
        ├── group/
        │   ├── group.md
        │   ├── interactive.py
        │   └── preventgrowoverflow.py
        ├── helpcenter/
        │   └── helpcenter.md
        ├── highlight/
        │   ├── highlight.md
        │   ├── interactive.py
        │   ├── multiple.py
        │   ├── simple.py
        │   ├── styles.py
        │   └── text.py
        ├── hovercard/
        │   ├── delay.py
        │   ├── hovercard.md
        │   ├── interactive.py
        │   └── simple.py
        ├── image/
        │   ├── background.py
        │   ├── height.py
        │   ├── image.md
        │   ├── placeholder.py
        │   └── simple.py
        ├── indicator/
        │   ├── indicator.md
        │   ├── inline.py
        │   ├── interactive.py
        │   ├── offset.py
        │   └── processing.py
        ├── inputwrapper/
        │   ├── inputwrapper.md
        │   ├── interactive.py
        │   └── simple.py
        ├── jsoninput/
        │   ├── jsoninput.md
        │   └── simple.py
        ├── kbd/
        │   ├── kbd.md
        │   └── simple.py
        ├── linechart/
        │   ├── axislabels.py
        │   ├── clickdata.py
        │   ├── connectnulls.py
        │   ├── customizedots.py
        │   ├── dashedarealine.py
        │   ├── data.py
        │   ├── gradient.py
        │   ├── grid-text-color-light-dark.py
        │   ├── highlighthover.py
        │   ├── hoverdata.py
        │   ├── interactive.py
        │   ├── legend.py
        │   ├── legendposition.py
        │   ├── line-color-light-dark.py
        │   ├── line.md
        │   ├── line_animation.py
        │   ├── linecolor.py
        │   ├── referencelines.py
        │   ├── removetooltip.py
        │   ├── rightyaxis.py
        │   ├── rotatexaxislabels.py
        │   ├── serieslabels.py
        │   ├── strokedasharray.py
        │   ├── strokewidth.py
        │   ├── sync.py
        │   ├── tooltipanimation.py
        │   ├── units.py
        │   ├── vertical.py
        │   ├── xaxisoffset.py
        │   ├── xyaxis.py
        │   └── yaxisscale.py
        ├── list/
        │   ├── icons.py
        │   ├── interactive.py
        │   ├── list.md
        │   ├── nested.py
        │   └── simple.py
        ├── loader/
        │   ├── button.py
        │   ├── interactive.py
        │   ├── loader.md
        │   └── simple.py
        ├── loadingoverlay/
        │   ├── customimageoverlay.py
        │   ├── customize.py
        │   ├── loadingoverlay.md
        │   └── simple.py
        ├── mantine-api/
        │   ├── colorswatch.py
        │   ├── mantine.md
        │   └── styles-api.py
        ├── mantineprovider/
        │   └── mantineprovider.md
        ├── mark/
        │   ├── color.py
        │   ├── mark.md
        │   └── simple.py
        ├── menu/
        │   ├── colors.py
        │   ├── custom.py
        │   ├── menu.md
        │   ├── simple.py
        │   └── transition.py
        ├── migration/
        │   ├── button.py
        │   ├── hidden.py
        │   └── migration.md
        ├── modal/
        │   ├── modal.md
        │   ├── scroll.py
        │   ├── simple.py
        │   ├── sizes.py
        │   └── vertical.py
        ├── monthpickerinput/
        │   ├── clearable.py
        │   ├── columns.py
        │   ├── disabled.py
        │   ├── icon.py
        │   ├── minmax.py
        │   ├── modal.py
        │   ├── monthpickerinput.md
        │   ├── multiple.py
        │   ├── range.py
        │   ├── simple.py
        │   └── valueformat.py
        ├── multiselect/
        │   ├── check.py
        │   ├── check_option.py
        │   ├── clearable.py
        │   ├── dropdown_animation.py
        │   ├── dropdown_offset.py
        │   ├── dropdown_padding.py
        │   ├── dropdown_position.py
        │   ├── dropdown_shadow.py
        │   ├── dropdown_width.py
        │   ├── error.py
        │   ├── grouping.py
        │   ├── hide.py
        │   ├── interactive.py
        │   ├── large_data_sets.py
        │   ├── left_right.py
        │   ├── max-selected.py
        │   ├── multiselect.md
        │   ├── nothing_found.py
        │   ├── opened.py
        │   ├── popover.py
        │   ├── scrollable.py
        │   ├── searchable.py
        │   └── simple.py
        ├── navlink/
        │   ├── active.py
        │   ├── basic.py
        │   ├── navlink.md
        │   └── nested.py
        ├── notification/
        │   ├── notification.md
        │   ├── simple.py
        │   └── update.py
        ├── numberformatter/
        │   ├── numberformatter.md
        │   ├── prefix_suffix.py
        │   └── simple.py
        ├── numberinput/
        │   ├── clamp.py
        │   ├── controls.py
        │   ├── decimal_numbers.py
        │   ├── decimal_scale.py
        │   ├── decimal_separator.py
        │   ├── disabled.py
        │   ├── fixed_decimal_scale.py
        │   ├── hold.py
        │   ├── icon.py
        │   ├── interactive.py
        │   ├── minmax.py
        │   ├── negative.py
        │   ├── numberinput.md
        │   ├── prefix_suffix.py
        │   └── thousand_separator.py
        ├── pagination/
        │   ├── boundaries.py
        │   ├── interactive.py
        │   ├── pagination.md
        │   ├── siblings.py
        │   └── withpages.py
        ├── paper/
        │   ├── interactive.py
        │   └── paper.md
        ├── passwordinput/
        │   ├── disabled.py
        │   ├── error.py
        │   ├── icon.py
        │   ├── interactive.py
        │   └── passwordinput.md
        ├── piechart/
        │   ├── angle.py
        │   ├── clickdata.py
        │   ├── data.py
        │   ├── enabletooltip.py
        │   ├── hoverdata.py
        │   ├── interactive.py
        │   ├── pie.md
        │   ├── pie_animation.py
        │   ├── segmentcolor.py
        │   ├── segmentlabels.py
        │   ├── segmentstroke.py
        │   ├── size.py
        │   ├── stroke.py
        │   ├── tooltipdatasource.py
        │   └── usage.py
        ├── pininput/
        │   ├── accessibility.py
        │   ├── disabled.py
        │   ├── error.py
        │   ├── length.py
        │   ├── masked.py
        │   ├── onetime.py
        │   ├── pininput.md
        │   ├── placeholder.py
        │   ├── simple.py
        │   └── type.py
        ├── popover/
        │   ├── focustrap.py
        │   ├── inline.py
        │   ├── interactive.py
        │   ├── overlay.py
        │   ├── popover.md
        │   ├── same-width.py
        │   └── simple.py
        ├── progress/
        │   ├── floatingtooltip.py
        │   ├── interactive.py
        │   ├── progress.md
        │   ├── sections.py
        │   ├── simple.py
        │   └── tooltip.py
        ├── radarchart/
        │   ├── changecolor.py
        │   ├── chartparts.py
        │   ├── multipleseries.py
        │   ├── radar.md
        │   ├── radar_animation.py
        │   ├── rechartprops.py
        │   └── usage.py
        ├── radiogroup/
        │   ├── callback.py
        │   ├── color.py
        │   ├── deselectable.py
        │   ├── group.py
        │   ├── interactive.py
        │   ├── radiocard.py
        │   ├── radiocardgroup.py
        │   ├── radiogroup.md
        │   ├── radioindicator.py
        │   └── size.py
        ├── rating/
        │   ├── fractions.py
        │   ├── icons.py
        │   ├── interactive.py
        │   ├── rating.md
        │   └── readonly.py
        ├── responsive-styles/
        │   ├── container-queries.py
        │   ├── hiddenfrom.py
        │   ├── mediaqueries.py
        │   ├── responsive-styles.md
        │   └── size.py
        ├── ringprogress/
        │   ├── interactive.py
        │   ├── label.py
        │   ├── ringprogress.md
        │   ├── root.py
        │   ├── simple.py
        │   └── tooltip.py
        ├── scatterchart/
        │   ├── clickdata.py
        │   ├── customizedots.py
        │   ├── customtooltip.py
        │   ├── data.py
        │   ├── grid-text-color-light-dark.py
        │   ├── hoverdata.py
        │   ├── legend.py
        │   ├── legendposition.py
        │   ├── multipleseries.py
        │   ├── point_labels.py
        │   ├── referencelines.py
        │   ├── removetooltip.py
        │   ├── scatter.md
        │   ├── scatter_animation.py
        │   ├── strokedasharray.py
        │   ├── tooltipanimation.py
        │   ├── tooltiplabels.py
        │   ├── units.py
        │   ├── usage.py
        │   └── xyaxis.py
        ├── scrollarea/
        │   ├── horizontal.py
        │   ├── interactive.py
        │   ├── scrollarea.md
        │   └── text.py
        ├── segmentedcontrol/
        │   ├── colors.py
        │   ├── disabled.py
        │   ├── full.py
        │   ├── radius.py
        │   ├── react.py
        │   ├── segmentedcontrol.md
        │   ├── simple.py
        │   ├── sizes.py
        │   └── transitions.py
        ├── select/
        │   ├── allow_deselect.py
        │   ├── check_option.py
        │   ├── clearable.py
        │   ├── dropdown_animation.py
        │   ├── dropdown_offset.py
        │   ├── dropdown_padding.py
        │   ├── dropdown_position.py
        │   ├── dropdown_shadow.py
        │   ├── dropdown_width.py
        │   ├── error.py
        │   ├── grouping.py
        │   ├── interactive.py
        │   ├── large_data_sets.py
        │   ├── left_right.py
        │   ├── nothing_found.py
        │   ├── opened.py
        │   ├── popover.py
        │   ├── scrollable.py
        │   ├── searchable.py
        │   ├── select.md
        │   └── simple.py
        ├── semicircleprogress/
        │   ├── empty_segment_color.py
        │   ├── interactive.py
        │   ├── label_position.py
        │   ├── semicircleprogress.md
        │   ├── simple.py
        │   └── transition.py
        ├── simplegrid/
        │   ├── container.py
        │   ├── responsive.py
        │   ├── simple.py
        │   └── simplegrid.md
        ├── skeleton/
        │   ├── dccloading.py
        │   ├── graphs.py
        │   ├── simple.py
        │   └── skeleton.md
        ├── slider/
        │   ├── disabled.py
        │   ├── drag.py
        │   ├── interactive.py
        │   ├── inverted.py
        │   ├── label.py
        │   ├── marks.py
        │   ├── minrange.py
        │   ├── range.py
        │   ├── restrictomarks.py
        │   ├── simple.py
        │   ├── slider.md
        │   ├── step.py
        │   ├── styles.py
        │   ├── thumbchildren.py
        │   └── thumbsize.py
        ├── space/
        │   ├── simple.py
        │   └── space.md
        ├── sparkline/
        │   ├── areacolor-light-dark.py
        │   ├── interactive.py
        │   ├── spark_animation.py
        │   ├── sparkline.md
        │   └── trendcolors.py
        ├── spoiler/
        │   ├── simple.py
        │   └── spoiler.md
        ├── stack/
        │   ├── interactive.py
        │   ├── simple.py
        │   └── stack.md
        ├── stepper/
        │   ├── basic.py
        │   ├── color.py
        │   ├── icons.py
        │   ├── loading.py
        │   ├── size.py
        │   ├── stepper.md
        │   └── vertical.py
        ├── style-props/
        │   ├── props.md
        │   ├── props.py
        │   └── responsive.py
        ├── styles-api/
        │   ├── badge.py
        │   ├── button.py
        │   ├── conditional.py
        │   ├── data-attributes.py
        │   ├── datepickerinput.py
        │   ├── input.py
        │   ├── slider.py
        │   └── styles.md
        ├── switch/
        │   ├── callback.py
        │   ├── icons.py
        │   ├── interactive.py
        │   ├── label.py
        │   ├── switch.md
        │   └── thumb.py
        ├── table/
        │   ├── data.py
        │   ├── simple.py
        │   ├── spacing.py
        │   ├── striped.py
        │   └── table.md
        ├── tabs/
        │   ├── activation.py
        │   ├── callback.py
        │   ├── color.py
        │   ├── content.py
        │   ├── deactivation.py
        │   ├── disabled.py
        │   ├── icons.py
        │   ├── interactive.py
        │   ├── inverted.py
        │   ├── position.py
        │   ├── right.py
        │   ├── section.py
        │   ├── styleprops.py
        │   ├── styles.py
        │   ├── tabs.md
        │   ├── variant.py
        │   └── vertical.py
        ├── tagsinput/
        │   ├── acceptvalueonblur.py
        │   ├── clearable.py
        │   ├── disabled.py
        │   ├── disabledoptions.py
        │   ├── dropdown_animation.py
        │   ├── dropdown_offset.py
        │   ├── dropdown_padding.py
        │   ├── dropdown_position.py
        │   ├── dropdown_shadow.py
        │   ├── dropdown_width.py
        │   ├── duplicates.py
        │   ├── grouping.py
        │   ├── interactive.py
        │   ├── large_data_sets.py
        │   ├── left_right.py
        │   ├── max-selected.py
        │   ├── opened.py
        │   ├── popover.py
        │   ├── readonly.py
        │   ├── scrollable.py
        │   ├── simple.py
        │   ├── split.py
        │   ├── suggestions.py
        │   └── tagsinput.md
        ├── text/
        │   ├── dimmed.py
        │   ├── gradient.py
        │   ├── inherit.py
        │   ├── lineclamp.py
        │   ├── simple.py
        │   ├── span.py
        │   ├── text.md
        │   └── truncate.py
        ├── textarea/
        │   ├── autosize.py
        │   ├── error.py
        │   ├── interactive.py
        │   └── textarea.md
        ├── textinput/
        │   ├── disabled.py
        │   ├── error.py
        │   ├── icon.py
        │   ├── interactive.py
        │   ├── right.py
        │   └── textinput.md
        ├── theme-object/
        │   ├── autocontrast.py
        │   ├── default-radius.py
        │   ├── luminance.py
        │   ├── theme.py
        │   └── themeobject.md
        ├── theme-switch-components/
        │   ├── themeswitch.md
        │   ├── themeswitch.py
        │   └── themeswitch2.py
        ├── themeicon/
        │   ├── colors.py
        │   ├── gradient.py
        │   ├── interactive.py
        │   └── themeicon.md
        ├── timeinput/
        │   ├── error.py
        │   ├── interactive.py
        │   ├── simple.py
        │   └── timeinput.md
        ├── timeline/
        │   ├── bullets.py
        │   ├── interactive.py
        │   ├── simple.py
        │   └── timeline.md
        ├── title/
        │   ├── simple.py
        │   └── title.md
        ├── tooltip/
        │   ├── boxwrapperprops.py
        │   ├── colors.py
        │   ├── delay.py
        │   ├── floating.py
        │   ├── inline.py
        │   ├── interactive-arrow.py
        │   ├── interactive.py
        │   ├── multiline.py
        │   ├── offset.py
        │   ├── position.py
        │   ├── tooltip.md
        │   ├── transitions.py
        │   └── usage.py
        ├── tree/
        │   ├── checkboxes.py
        │   ├── data.py
        │   ├── expand-all.py
        │   ├── expanded-collapsed.py
        │   ├── expanded-preset.py
        │   ├── expandedicon-custom.py
        │   ├── expandedicon-none.py
        │   ├── iconside.py
        │   ├── simple.py
        │   └── tree.md
        ├── typography/
        │   ├── font_size.py
        │   ├── headings.py
        │   └── typography.md
        ├── visuallyhidden/
        │   ├── simple.py
        │   └── visuallyhidden.md
        └── yearpickerinput/
            ├── clearable.py
            ├── columns.py
            ├── disabled.py
            ├── icon.py
            ├── minmax.py
            ├── modal.py
            ├── multiple.py
            ├── range.py
            ├── simple.py
            ├── valueformat.py
            └── yearpickerinput.md

================================================
File: docs/accordion/accordion.md
================================================
---
name: Accordion
description: Use the Accordion and AccordionX components to toggle between hiding and showing large amount of content.
endpoint: /components/accordion
package: dash_mantine_components
category: Data Display
---

.. toc::

### Introduction

.. exec::docs.accordion.interactive
    :code: false

### Multiple Items

Set `multiple=True` to enable opening multiple items.

```python
import dash_mantine_components as dmc

dmc.Accordion(
    children=[...],
    multiple=True
)
```

.. exec::docs.accordion.multiple
    :code: false

### Custom Accordion Label

.. exec::docs.accordion.label

### Customizing chevron

You can use [dash-iconify](/dash-iconify) to change the chevron icon.

```python
import dash_mantine_components as dmc
from dash_iconify import DashIconify

dmc.Accordion(
    chevron=DashIconify(icon="ant-design:plus-outlined"),
    disableChevronRotation=True,
    children=[...]
)
```

.. exec::docs.accordion.chevron
    :code: false

### With icons

.. exec::docs.accordion.icons

### Change transition

```python
import dash_mantine_components as dmc

dmc.Accordion(
    children=[...],
    transitionDuration=1000
)
```

.. exec::docs.accordion.transition
    :code: false

### Default opened items

Provide a default value using the `value` prop.

```python
import dash_mantine_components as dmc

dmc.Accordion(
    children=[...],
    value="flexibility"
)
```

If `multiple` is `True`, then value will be a list:

```python
import dash_mantine_components as dmc

dmc.Accordion(
    children=[...],
    value=["flexibility", ]
)
```

.. exec::docs.accordion.default

### Callbacks and State Management

.. exec::docs.accordion.state

### Compose control

You can add any additional elements that will be displayed next to `AccordionControl`, for example, you can add `ActionIcon` or `Menu`.
 This enables interaction with the element without affecting the opening or closing of the accordion item. In this
example, try clicking the heart icon.

.. exec::docs.accordion.compose



### Disabled Item

Set `disabled=True` in dmc.AccordionControl to disable it. 

```python
import dash_mantine_components as dmc

dmc.AccordionControl(children=[...], disabled=True)
```

.. exec::docs.accordion.disabled
    :code: false

### Styles API

#### Accordion selectors

| Selector   | Static selector                | Description                                    |
|------------|---------------------------------|------------------------------------------------|
| root       | .mantine-Accordion-root         | Root element                                   |
| item       | .mantine-Accordion-item         | Accordion.Item root element                    |
| control    | .mantine-Accordion-control      | Accordion.Control root element                 |
| chevron    | .mantine-Accordion-chevron      | Accordion.Control chevron container element    |
| label      | .mantine-Accordion-label        | Accordion.Control label                        |
| icon       | .mantine-Accordion-icon         | Accordion.Control icon                         |
| itemTitle  | .mantine-Accordion-itemTitle    | Accordion.Control title (h2-h6) tag            |
| panel      | .mantine-Accordion-panel        | Accordion.Panel root element                   |
| content    | .mantine-Accordion-content      | Wrapper element of Accordion.Panel children    |


#### Accordion CSS variables

| Selector | Variable                        | Description                                                    |
|----------|----------------------------------|----------------------------------------------------------------|
| root     | --accordion-chevron-size         | Controls chevron container element width and min-width          |
|          | --accordion-radius               | Controls border-radius in various elements, depending on variant |
|          | --accordion-transition-duration  | Controls all animations' transition-duration                    |


#### Accordion data attributes

| Selector      | Attribute               | Condition               | Value                                   |
|---------------|-------------------------|-------------------------|-----------------------------------------|
| item, control | data-active              | Item is active (opened)  | –                                       |
| control       | data-chevron-position    | –                       | Value of `chevronPosition` prop on Accordion |



### Keyword Arguments

#### Accordion

.. kwargs::Accordion

#### AccordionControl

.. kwargs::AccordionControl

#### AccordionItem

.. kwargs::AccordionItem

#### AccordionPanel

.. kwargs::AccordionPanel



================================================
File: docs/accordion/chevron.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Accordion(
    chevron=DashIconify(icon="ant-design:plus-outlined"),
    disableChevronRotation=True,
    children=[
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Customization"),
                dmc.AccordionPanel(
                    "Colors, fonts, shadows and many other parts are customizable to fit your design needs"
                ),
            ],
            value="customization",
        ),
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Flexibility"),
                dmc.AccordionPanel(
                    "Configure temp appearance and behavior with vast amount of settings or overwrite any part of "
                    "component styles "
                ),
            ],
            value="flexibility",
        ),
    ],
)



================================================
File: docs/accordion/compose.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback, MATCH
from dash_iconify import DashIconify


def make_control(text, action_id):
    return dmc.Flex(
        [
            dmc.AccordionControl(text),
            dmc.ActionIcon(
                children=DashIconify(icon="tabler:heart"),
                color="yellow",
                variant="default",
                n_clicks=0,
                id={"index": action_id},
            ),
        ],
        justify="space-between",
    )


component = dmc.Accordion(
    id="accordion-compose-controls",
    chevronPosition="left",
    children=[
        dmc.AccordionItem(
            [
                make_control(f"Item {i}", f"action-{i}"),
                dmc.AccordionPanel(f"Content for AccordionItem {i}"),
            ],
            value=f"item-{i}",
        )
        for i in range(5)
    ],
)


@callback(Output({"index": MATCH}, "variant"), Input({"index": MATCH}, "n_clicks"))
def update_heart(n):
    if n % 2 == 0:
        return "default"
    return "filled"



================================================
File: docs/accordion/default.py
================================================
import dash_mantine_components as dmc

component = dmc.Accordion(
    value=["flexibility"],
    multiple=True,
    children=[
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Customization"),
                dmc.AccordionPanel(
                    "Colors, fonts, shadows and many other parts are customizable to fit your design needs"
                ),
            ],
            value="customization",
        ),
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Flexibility"),
                dmc.AccordionPanel(
                    "Configure temp appearance and behavior with vast amount of settings or overwrite any part of "
                    "component styles "
                ),
            ],
            value="flexibility",
        ),
    ],
)



================================================
File: docs/accordion/disabled.py
================================================
import dash_mantine_components as dmc

component = dmc.Accordion(
    children=[
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Customization"),
                dmc.AccordionPanel(
                    "Colors, fonts, shadows and many other parts are customizable to fit your design needs"
                ),
            ],
            value="customization",
        ),
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Flexibility", disabled=True),
                dmc.AccordionPanel(
                    "Configure temp appearance and behavior with vast amount of settings or overwrite any part of "
                    "component styles "
                ),
            ],
            value="flexibility",
        ),
    ],
)



================================================
File: docs/accordion/icons.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Accordion(
    disableChevronRotation=True,
    children=[
        dmc.AccordionItem(
            [
                dmc.AccordionControl(
                    "Personal Information",
                    icon=DashIconify(
                        icon="tabler:user",
                        color=dmc.DEFAULT_THEME["colors"]["blue"][6],
                        width=20,
                    ),
                ),
                dmc.AccordionPanel("some content"),
            ],
            value="info",
        ),
        dmc.AccordionItem(
            [
                dmc.AccordionControl(
                    "Shipping Address",
                    icon=DashIconify(
                        icon="tabler:map-pin",
                        color=dmc.DEFAULT_THEME["colors"]["red"][6],
                        width=20,
                    ),
                ),
                dmc.AccordionPanel("some content"),
            ],
            value="addr",
        ),
        dmc.AccordionItem(
            [
                dmc.AccordionControl(
                    "Confirmation",
                    icon=DashIconify(
                        icon="tabler:circle-check",
                        color=dmc.DEFAULT_THEME["colors"]["green"][6],
                        width=20,
                    ),
                ),
                dmc.AccordionPanel("some content"),
            ],
            value="focus",
        ),
    ],
)



================================================
File: docs/accordion/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.Accordion(
    children=[
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Customization"),
                dmc.AccordionPanel(
                    "Colors, fonts, shadows and many other parts are customizable to fit your design needs"
                ),
            ],
            value="customization",
        ),
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Flexibility"),
                dmc.AccordionPanel(
                    "Configure temp appearance and behavior with vast amount of settings or overwrite any part of "
                    "component styles "
                ),
            ],
            value="flexibility",
        ),
        dmc.AccordionItem(
            [
                dmc.AccordionControl("No annoying focus ring"),
                dmc.AccordionPanel(
                    "With new :focus-visible pseudo-class focus ring appears only when user navigates with keyboard"
                ),
            ],
            value="focus",
        ),
    ],
)

configurator = Configurator(target)

configurator.add_segmented_control("chevronPosition", ["left", "right"], "left")
configurator.add_select(
    "variant", ["default", "contained", "filled", "separated"], "separated"
)
configurator.add_switch("disableChevronRotation", False)
configurator.add_slider("radius", "sm")

component = configurator.panel



================================================
File: docs/accordion/label.py
================================================
import dash_mantine_components as dmc
from dash import html

characters_list = [
    {
        "id": "bender",
        "image": "https://img.icons8.com/clouds/256/000000/futurama-bender.png",
        "label": "Bender Bending Rodríguez",
        "description": "Fascinated with cooking, though has no sense of taste",
        "content": "Bender Bending Rodríguez, (born September 4, 2996), designated Bending Unit 22, and commonly "
        "known as Bender, is a bending unit created by a division of MomCorp in Tijuana, Mexico, "
        "and his serial number is 2716057. His mugshot id number is 01473. He is Fry's best friend.",
    },
    {
        "id": "carol",
        "image": "https://img.icons8.com/clouds/256/000000/futurama-mom.png",
        "label": "Carol Miller",
        "description": "One of the richest people on Earth",
        "content": "Carol Miller (born January 30, 2880), better known as Mom, is the evil chief executive officer "
        "and shareholder of 99.7% of Momcorp, one of the largest industrial conglomerates in the universe "
        "and the source of most of Earth's robots. She is also one of the main antagonists of the Futurama "
        "series.",
    },
    {
        "id": "homer",
        "image": "https://img.icons8.com/clouds/256/000000/homer-simpson.png",
        "label": "Homer Simpson",
        "description": "Overweight, lazy, and often ignorant",
        "content": "Homer Jay Simpson (born May 12) is the main protagonist and one of the five main characters of "
        "The Simpsons series(or show). He is the spouse of Marge Simpson and father of Bart, "
        "Lisa and Maggie Simpson.",
    },
]


def create_accordion_label(label, image, description):
    return dmc.AccordionControl(
        dmc.Group(
            [
                dmc.Avatar(src=image, radius="xl", size="lg"),
                html.Div(
                    [
                        dmc.Text(label),
                        dmc.Text(description, size="sm", fw=400, c="dimmed"),
                    ]
                ),
            ]
        )
    )


def create_accordion_content(content):
    return dmc.AccordionPanel(dmc.Text(content, size="sm"))


component = dmc.Accordion(
    chevronPosition="right",
    variant="contained",
    children=[
        dmc.AccordionItem(
            [
                create_accordion_label(
                    character["label"], character["image"], character["description"]
                ),
                create_accordion_content(character["content"]),
            ],
            value=character["id"],
        )
        for character in characters_list
    ],
)



================================================
File: docs/accordion/multiple.py
================================================
import dash_mantine_components as dmc

component = dmc.Accordion(
    multiple=True,
    children=[
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Customization"),
                dmc.AccordionPanel(
                    "Colors, fonts, shadows and many other parts are customizable to fit your design needs"
                ),
            ],
            value="customization",
        ),
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Flexibility"),
                dmc.AccordionPanel(
                    "Configure temp appearance and behavior with vast amount of settings or overwrite any part of "
                    "component styles "
                ),
            ],
            value="flexibility",
        ),
    ],
)



================================================
File: docs/accordion/state.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback

component = html.Div(
    children=[
        dmc.Accordion(
            id="accordion-simple",
            value="customization",
            children=[
                dmc.AccordionItem(
                    [
                        dmc.AccordionControl("Customization"),
                        dmc.AccordionPanel(
                            "Colors, fonts, shadows and many other parts are customizable to fit your design needs"
                        ),
                    ],
                    value="customization",
                ),
                dmc.AccordionItem(
                    [
                        dmc.AccordionControl("Flexibility"),
                        dmc.AccordionPanel(
                            "Configure temp appearance and behavior with vast amount of settings or overwrite any "
                            "part of component styles "
                        ),
                    ],
                    value="flexibility",
                ),
            ],
        ),
        dmc.Text(id="accordion-state", mt=10),
    ]
)


@callback(Output("accordion-state", "children"), Input("accordion-simple", "value"))
def show_state(value):
    return value



================================================
File: docs/accordion/styles.py
================================================
import dash_mantine_components as dmc

component = dmc.Accordion(
    value="flexibility",
    children=[
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Customization"),
                dmc.AccordionPanel(
                    "Colors, fonts, shadows and many other parts are customizable to fit your design needs"
                ),
            ],
            value="customization",
        ),
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Flexibility"),
                dmc.AccordionPanel(
                    "Configure temp appearance and behavior with vast amount of settings or overwrite any part of "
                    "component styles "
                ),
            ],
            value="flexibility",
        ),
        dmc.AccordionItem(
            [
                dmc.AccordionControl("No Annoying Focus Ring"),
                dmc.AccordionPanel(
                    "Configure temp appearance and behavior with vast amount of settings or overwrite any part of "
                    "component styles "
                ),
            ],
            value="ring",
        ),
    ],
    styles={
        "root": {
            "backgroundColor": dmc.theme.DEFAULT_COLORS["gray"][0],
            "borderRadius": 5,
        },
        "item": {
            "backgroundColor": dmc.theme.DEFAULT_COLORS["gray"][0],
            "border": "1px solid transparent",
            "position": "relative",
            "zIndex": 0,
            "transition": "transform 150ms ease",
            "&[data-active]": {
                "transform": "scale(1.03)",
                "backgroundColor": "white",
                "boxShadow": 5,
                "borderColor": dmc.theme.DEFAULT_COLORS["gray"][2],
                "borderRadius": 5,
                "zIndex": 1,
            },
        },
        "chevron": {
            "&[data-rotate]": {
                "transform": "rotate(-90deg)",
            },
        },
    },
)



================================================
File: docs/accordion/transition.py
================================================
import dash_mantine_components as dmc

component = dmc.Accordion(
    transitionDuration=1000,
    children=[
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Customization"),
                dmc.AccordionPanel(
                    "Colors, fonts, shadows and many other parts are customizable to fit your design needs"
                ),
            ],
            value="customization",
        ),
        dmc.AccordionItem(
            [
                dmc.AccordionControl("Flexibility"),
                dmc.AccordionPanel(
                    "Configure temp appearance and behavior with vast amount of settings or overwrite any part of "
                    "component styles "
                ),
            ],
            value="flexibility",
        ),
    ],
)



================================================
File: docs/actionicon/actionicon.md
================================================
---
name: ActionIcon
description: Use this component as an alternative to buttons when you just want to use an icon.
endpoint: /components/actionicon
package: dash_mantine_components
category: Buttons
---

.. toc::

### Introduction

.. exec::docs.actionicon.interactive
    :code: false

### Usage

ActionIcon component is an alternative to [Button](/components/button) component. It can be customized with Mantine styles and used with its
`n_clicks` property.

.. exec::docs.actionicon.simple

### Children

ActionIcon accepts any React node (a dash component) as child. It does not control the icon size, you need to specify it manually on icon
component (such as DashIconify) to match ActionIcon size.

For example, if you were to use DashIconify, you can set the icon size like this:

```python
import dash_mantine_components as dmc
from dash_iconify import DashIconify

dmc.ActionIcon(
    DashIconify(icon="bi:github", width=20),
    size="lg"
)
```

### Variants

.. exec::docs.actionicon.variant


### Gradient variant

When `variant` prop is set to `gradient`, you can control gradient with gradient prop, it accepts an object with
`from`, `to` and `deg` properties. If the `gradient` prop is not set, `ActionIcon` will use `defaultGradient` which can
be configured on the `theme` dict in the `MantineProvider`. `gradient` prop is ignored when `variant` is not set to `gradient`.

Note that `variant="gradient"` supports only linear gradients with two colors. If you need a more complex gradient, then
use `Styles API` to modify `ActionIcon` styles.


.. exec::docs.actionicon.gradient


### Colors

Here is a sample using the following colors:
"gray", "red", "pink", "grape", "violet", "indigo", "blue", "lime", "yellow", "orange"

And these variants:
"subtle", "filled", "outline", "light", "transparent"


.. exec::docs.actionicon.colors
    :code: false

```python
import dash_mantine_components as dmc
from dash_iconify import DashIconify

dmc.ActionIcon(
    DashIconify(icon="icomoon-free:sun"),
    variant="outline",
    color="orange",
)
```


###  Size

You can use any valid CSS value in `size` prop, it is used to set `width`, `min-width`, `min-height` and `height`
properties. Note that `size` prop does not control child icon size, you need to set it manually on icon component.
When size is a number, the value is treated as `px` units and converted to `rem` units.

```python
dmc.ActionIcon(size=20, children=[...])
```

If you want `ActionIcon` to have the same size as Mantine inputs, use `size="input-sm"` prop:

.. exec::docs.actionicon.size_input

### Loading state
When `loading` prop is set, `ActionIcon` will be disabled and `Loader` with overlay will be rendered in the center of 
the button. Loader color depends on `ActionIcon` variant.


.. exec::docs.actionicon.loading

### Loader props
You can customize Loader with `loaderProps` prop, it accepts all props that `Loader` component has:

.. exec::docs.actionicon.loader_props

### Add custom variants

To add new `ActionIcon` variants, define a class in the `.css` file using the data-variant attribute. Add the new variants to
the `theme` prop in the `MantineProvider` so they available in all `ActionIcon` components in your app.


Example:
 - [View Code on GitHub](https://github.com/snehilvj/dmc-docs/tree/main/help_center/theme/action_icon_custom_variants.py)  
 - [Live Demo on PyCafe](https://py.cafe/dash.mantine.components/actionicon-custom-variants-demo)  


The example includes the following in a .css file in /assets
```css
.ai-custom-variants {
  &[data-variant='danger'] {
    background-color: var(--mantine-color-red-9);
    color: var(--mantine-color-red-0);
  }

  &[data-variant='primary'] {
    background: linear-gradient(45deg, #4b6cb7 10%, #253b67 90%);
    color: var(--mantine-color-white);
  }
}
```

The example adds the custom variants to the `theme` prop in `Mantine Provider`

```python
app.layout = dmc.MantineProvider(
   children=[# your app content],
   theme={
      "components": {
           "ActionIcon": {"classNames": {"root": "ai-custom-variants"}}
       }
   }
)
```
 
### autoContrast
`ActionIcon` supports `autoContrast` prop.  You can also set `autoContrast` in the `theme` prop in the `MantineProvider`.
If `autoContrast` is set either on `ActionIcon` or on `theme`, content color will be adjusted to have sufficient
contrast with the value specified in `color` prop.

Note that `autoContrast` feature works only if you use `color` prop to change background color. `autoContrast` works
only with `filled` variant.


.. exec::docs.actionicon.autocontrast

### ActionIconGroup


.. exec::docs.actionicon.group
    :code: false

```python

dmc.ActionIconGroup(
    [
        dmc.ActionIcon(
            variant="default",
            size="lg",
            children=DashIconify(icon="tabler:photo", width=20),
        ),
        dmc.ActionIcon(
            variant="default",
            size="lg",
            children=DashIconify(icon="tabler:settings", width=20),        
        ),
        dmc.ActionIcon(
            variant="default",
            size="lg",
            children=DashIconify(icon="tabler:heart", width=20),
        ),
    ],
    orientation="horizontal"
)
```

Note that you must not wrap child `ActionIcon` components with any additional elements:

```python
dmc.ActionIconGroup([
    html.Div(dmc.ActionIcon(...)),  # don't do it like this
    dmc.ActionIcon(...)
])
```


### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.


#### ActionIcon Selectors

| Selector | Static selector               | Description                                                |
|----------|--------------------------------|------------------------------------------------------------|
| root     | .mantine-ActionIcon-root       | Root element                                               |
| loader   | .mantine-ActionIcon-loader     | Loader component, rendered inside the root element when `loading` prop is set |
| icon     | .mantine-ActionIcon-icon       | Inner icon wrapper                                         |


#### ActionIcon CSS Variables

| Selector | Variable        | Description                                  |
|----------|-----------------|----------------------------------------------|
| root     | --ai-bg         | Controls background                         |
|          | --ai-hover      | Controls background when hovered            |
|          | --ai-bd         | Controls border                             |
|          | --ai-color      | Controls icon color                         |
|          | --ai-hover-color| Controls icon color when hovered            |
|          | --ai-radius     | Controls border-radius                      |
|          | --ai-size       | Controls width, height, min-width, and min-height styles |


#### ActionIcon Data Attributes

| Selector      | Attribute       | Condition                  |
|---------------|-----------------|----------------------------|
| root          | data-disabled   | `disabled` prop is set     |
| root, icon    | data-loading    | `loading` prop is set      |


#### ActionIcon.Group Selectors

| Selector | Static selector                    | Description                     |
|----------|-------------------------------------|---------------------------------|
| group    | .mantine-ActionIconGroup-group      | Root element                    |


#### ActionIcon.Group CSS Variables

| Selector | Variable            | Description                                                      |
|----------|---------------------|------------------------------------------------------------------|
| group    | --ai-border-width   | Controls border width of child `ActionIcon` components placed beside one another |


#### ActionIcon.Group Data Attributes

| Selector | Attribute        | Value                      |
|----------|------------------|----------------------------|
| group    | data-orientation | Value of `orientation` prop |



### Keyword Arguments

#### ActionIcon

.. kwargs::ActionIcon


#### ActionIcon

.. kwargs::ActionIconGroup



================================================
File: docs/actionicon/autocontrast.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify


component = dmc.Group(
    [
        dmc.ActionIcon(
            children=DashIconify(icon="tabler:heart", width=18, height=18),
            color="lime.3"
        ),
        dmc.ActionIcon(
            children=DashIconify(icon="tabler:heart", width=18, height=18),
            color="lime.3",
            autoContrast=True
        ),
    ]
)


================================================
File: docs/actionicon/colors.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

colors = [
    "gray",
    "red",
    "pink",
    "grape",
    "violet",
    "indigo",
    "blue",
    "lime",
    "yellow",
    "orange",
]

component = dmc.Stack(
    gap="xs",
    children=[
        dmc.Group(
            [
                dmc.ActionIcon(
                    DashIconify(icon="icomoon-free:sun"),
                    variant=variant,
                    color=color,
                )
                for color in colors
            ],
            justify="center",
        )
        for variant in ["subtle", "filled", "outline", "light", "transparent"]
    ],
)



================================================
File: docs/actionicon/gradient.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Group(
    [
        dmc.ActionIcon(
            DashIconify(icon="clarity:settings-line"),
            color="blue",
            variant="gradient",
            gradient=gradient
        )
        for gradient in [
            {"from": "red", "to": "blue", "deg": 90 },
            {"from": "red", "to": "blue", "deg": 180},
            {"from": "teal", "to": "yellow", "deg": 90},
            {"from": "teal", "to": "yellow", "deg": 180}
         ]
    ]
)



================================================
File: docs/actionicon/group.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

from lib.configurator import Configurator

TARGET_ID = "actionicongroup-interactive"
target = dmc.Center(
    dmc.ActionIconGroup(
        [
            dmc.ActionIcon(
                variant="default",
                size="lg",
                children=DashIconify(icon="tabler:photo", width=20),
                n_clicks=0,
            ),
            dmc.ActionIcon(
                variant="default",
                size="lg",
                children=DashIconify(icon="tabler:settings", width=20),
                n_clicks=0,
            ),
            dmc.ActionIcon(
                variant="default",
                size="lg",
                children=DashIconify(icon="tabler:heart", width=20),
                n_clicks=0,
            ),
        ],
        orientation="horizontal",
        id=TARGET_ID
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_segmented_control("orientation", ["horizontal", "vertical"], "horizontal")

component = configurator.panel




================================================
File: docs/actionicon/interactive.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

from lib.configurator import Configurator

TARGET_ID = "actionicon-interactive"
target = dmc.Center(
    dmc.ActionIcon(DashIconify(icon="clarity:settings-line", width=20), id=TARGET_ID)
)

configurator = Configurator(target, TARGET_ID)

configurator.add_select(
    "variant",
    ["filled", "outline", "light", "subtle", "default", "transparent"],
    "filled",
)
configurator.add_colorpicker("color", "orange")
configurator.add_slider("size", "lg")
configurator.add_slider("radius", "sm")
configurator.add_switch("loading", False)
configurator.add_switch("disabled", False)

component = configurator.panel



================================================
File: docs/actionicon/loader_props.py
================================================
import dash_mantine_components as dmc

component = dmc.ActionIcon(size="xl", loading=True, loaderProps={"type": "dots"})


================================================
File: docs/actionicon/loading.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify
from dash import callback, Input, Output

component = dmc.Box([
    dmc.Group(
        [
            dmc.ActionIcon(
                id="icon-loading-default",
                children=DashIconify(icon="tabler:heart", width=18, height=18)
            ),
            dmc.ActionIcon(
                id="icon-loading-light",
                children=DashIconify(icon="tabler:heart", width=18, height=18),
                variant="light",
            ),
            dmc.ActionIcon(
                id="icon-loading-outline",
                children=DashIconify(icon="tabler:heart", width=18, height=18),
                variant="outline",
            ),
        ]
    ),
    dmc.Switch(
        id="loading-switch",
        label="Loading state",
        checked=False,
        mt="md",
    ),
])


@callback(
    Output("icon-loading-default", "loading"),
    Output("icon-loading-light", "loading"),
    Output("icon-loading-outline", "loading"),
    Input("loading-switch", "checked"),
)
def toggle_loading(loading_state):
    return loading_state, loading_state, loading_state




================================================
File: docs/actionicon/simple.py
================================================
import dash_mantine_components as dmc
from dash import callback, html, Output, Input
from dash_iconify import DashIconify

component = html.Div(
    [
        dmc.ActionIcon(
            DashIconify(icon="clarity:settings-line", width=20),
            size="lg",
            variant="filled",
            id="action-icon",
            n_clicks=0,
            mb=10,
        ),
        dmc.Text(id="action-output"),
    ]
)


@callback(
    Output("action-output", "children"),
    Input("action-icon", "n_clicks"),
)
def update_clicks(n_clicks):
    return f"Clicked {n_clicks} times."



================================================
File: docs/actionicon/size_input.py
================================================
import dash_mantine_components as dmc

component = dmc.Group([
    dmc.TextInput(placeholder="sm sixe input", size="sm"),
    dmc.ActionIcon(
        size="input-sm",
        variant="default",
        children="SM"
    )
])


================================================
File: docs/actionicon/variant.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Group(
    [
        dmc.ActionIcon(
            DashIconify(icon="clarity:settings-line"), color="blue", variant=variant
        )
        for variant in [
            "subtle",
            "filled",
            "outline",
            "light",
            "default",
            "transparent",
            "gradient",
        ]
    ]
)



================================================
File: docs/affix/affix.md
================================================
---
name: Affix
description: Use the Affix component to show content at any fixed positon inside your app.
endpoint: /components/affix
package: dash_mantine_components
category: Overlay
---

.. toc::

### Simple Example

Look at the bottom right!

.. exec::docs.affix.simple

### Position prop
The `position` prop controls the affix position on the screen. By default, the component is positioned at `{ bottom: 0, right: 0 }`.  

Accepted Keys:
- `top` (MantineSize | str | number) – Distance from the top.  
- `left`(MantineSize | str | number) – Distance from the left.  
- `bottom`(MantineSize | str | number) – Distance from the bottom.  
- `right` (MantineSize | str | number) – Distance from the right.  

Accepted Value Types:
1. MantineSize (`'xs' | 'sm' | 'md' | 'lg' | 'xl'`) – Uses predefined spacing values.  
2. String (CSS units) (e.g., `"10px"`, `"5rem"`, `"50%"`) – Allows precise control using CSS units.  
3. Number (e.g., `10`, `50`) – Treated as pixel values (`px`).  


Example:
```python
import dash_mantine_components as dmc

dmc.Affix(
    dmc.Button("Floating Button"),
    position={"bottom": "20px", "right": "lg"} 
)
```


### Styles API

#### Affix selectors

| Selector | Static selector | Description |
|----------|----------------|-------------|
| root     | .mantine-Affix-root | Root element |

#### Affix CSS variables

| Selector | Variable | Description |
|----------|----------|-------------|
| root     | --affix-z-index  | Controls `z-index` property |
| root     | --affix-top      | Controls `top` property |
| root     | --affix-bottom   | Controls `bottom` property |
| root     | --affix-left     | Controls `left` property |
| root     | --affix-right    | Controls `right` property |


### Keyword Arguments

#### Affix

.. kwargs::Affix



================================================
File: docs/affix/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Affix(
    dmc.Button("I'm in an Affix Component"), position={"bottom": 20, "right": 20}
)



================================================
File: docs/alert/alert.md
================================================
---
name: Alert
description: Use Alerts to attract user attention with static messages.
endpoint: /components/alert
package: dash_mantine_components
category: Feedback
---

.. toc::

### Introduction

.. exec::docs.alert.interactive
    :code: false

### Simple Example

Create an alert with the main message (`children`), the `title`, and the `color`.

.. exec::docs.alert.simple

### Colors

.. exec::docs.alert.colors

### Dismissible Alerts

The alerts can be closed either programmatically by toggling the `hide` property or by clicking on the close button on the alert if enabled with `withCloseButton=True`.

.. exec::docs.alert.dismissible

### Automatic Dismissal

The alerts can also be timed out using the `duration` prop which accepts time in milliseconds.

.. exec::docs.alert.auto

### Styles API

| Name        | Static selector            | Description                                   |
|:------------|:---------------------------|:----------------------------------------------|
| root        | .mantine-Alert-root        | Root element                                  |
| wrapper     | .mantine-Alert-wrapper     | Wraps body and icon                           |
| body        | .mantine-Alert-body        | Body element, wraps title and message         |
| title       | .mantine-Alert-title       | Title element, contains label and icon        |
| label       | .mantine-Alert-label       | Title label                                   |
| message     | .mantine-Alert-message     | Alert message, defined by children            |
| icon        | .mantine-Alert-icon        | Icon wrapper                                  |
| closeButton | .mantine-Alert-closeButton | Close button, defined by withCloseButton prop |

### Keyword Arguments

#### Alert

.. kwargs::Alert



================================================
File: docs/alert/auto.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, callback

component = html.Div(
    [
        dmc.Alert(
            "This alert will dismiss itself after 3 seconds! ",
            title="Auto Dismissing Alert!",
            id="alert-auto",
            color="violet",
            duration=3000,
        ),
        dmc.Button("Show alert", id="alert-auto-button", mt=20),
    ]
)


@callback(
    Output("alert-auto", "hide"),
    Input("alert-auto-button", "n_clicks"),
    prevent_initial_call=True,
)
def alert_auto(n_clicks):
    return False



================================================
File: docs/alert/colors.py
================================================
import dash_mantine_components as dmc

message = "Something happened! You made a mistake and there is no going back!"

component = dmc.Stack(
    children=[
        dmc.Alert(message, title="Primary", color="blue"),
        dmc.Alert(message, title="Secondary", color="gray"),
        dmc.Alert(message, title="Success!", color="green"),
        dmc.Alert(message, title="Warning!", color="yellow"),
        dmc.Alert(message, title="Danger!", color="red"),
        dmc.Alert(message, title="Info", color="violet"),
    ],
)



================================================
File: docs/alert/dismissible.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, State, callback

component = html.Div(
    [
        dmc.Alert(
            "Something terrible happened! You made a mistake and there is no going back, your data was lost forever! ",
            title="Bummer!",
            id="alert-dismiss",
            color="red",
            withCloseButton=True,
        ),
        dmc.Button("Toggle alert", id="alert-button", mt=20),
    ]
)


@callback(
    Output("alert-dismiss", "hide"),
    Input("alert-button", "n_clicks"),
    State("alert-dismiss", "hide"),
    prevent_initial_call=True,
)
def alert(n_clicks, hide):
    return not hide



================================================
File: docs/alert/interactive.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

from lib.configurator import Configurator

target = dmc.Alert(
    icon=DashIconify(icon="radix-icons:cross-circled"),
    title="Bummer",
    children="Something terrible happened! You made a mistake and there is no going back, your data was lost forever!",
)

configurator = Configurator(target)

configurator.add_colorpicker("color", "red")
configurator.add_switch("withCloseButton", False)
configurator.add_select(
    "variant",
    ["light", "filled", "outline", "transparent", "white", "default"],
    "light",
)
configurator.add_slider("radius", "sm")

component = configurator.panel



================================================
File: docs/alert/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Alert(
    "Something happened! You made a mistake and there is no going back, your data was lost forever!",
    title="Simple Alert!",
)



================================================
File: docs/anchor/anchor.md
================================================
---
name: Anchor
description: Use the Anchor component to add links with Mantine's theme styles.
endpoint: /components/anchor
package: dash_mantine_components
category: Navigation
---

.. toc::

### Simple Example

dmc.Anchor is a wrapper around dmc.Text component and works similar to dcc.Link, so you can use it with multipage apps.
It takes the same props as dmc.Text.

.. exec::docs.anchor.simple

### Underline


.. exec::docs.anchor.underline

You can also configure underline prop for all Anchor components with default props:

```python
dmc.MantineProvider(    
    theme={
        "components": {
            "Anchor": {
                "defaultProps": {
                    "underline": "always",
                },
            },
        },
    }
)

```

### Text props

Text props
`Anchor` components supports all `Text` component props. For example, you can use gradient variant:


.. exec::docs.anchor.text


### Styles API

#### Anchor selectors

| Selector | Static selector | Description |
|----------|----------------|-------------|
| root     | .mantine-Anchor-root | Root element |

#### Anchor CSS variables

| Selector | Variable | Description |
|----------|----------|-------------|
| root     | --text-fz | Controls font-size property |
| root     | --text-lh | Controls line-height property |
| root     | --text-gradient | Text fill gradient |
| root     | --text-line-clamp | Number of lines that should be visible |

#### Anchor data attributes

| Selector | Attribute | Condition | Value |
|----------|-----------|-----------|-------|
| root     | data-truncate | `truncate` prop is set | Value of `truncate` prop |
| root     | data-line-clamp | `lineClamp` prop is a number | – |
| root     | data-inline | `inline` prop is set | – |
| root     | data-inherit | `inherit` prop is set | – |
| root     | data-underline | – | Value of `underline` prop |

### Keyword Arguments

#### Anchor

.. kwargs::Anchor



================================================
File: docs/anchor/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Anchor(
    "Dash Mantine Components Announcement",
    href="https://community.plotly.com/t/dash-mantine-components/58414",
)



================================================
File: docs/anchor/text.py
================================================
import dash_mantine_components as dmc

component = dmc.Anchor(
    "A link with pink to yellow gradient",
    href="#text-props",
    variant="gradient",
    gradient={"from": "pink", "to": "yellow"},
    fw=500,
    fz="lg",
)



================================================
File: docs/anchor/underline.py
================================================
import dash_mantine_components as dmc

component = dmc.Group([
    dmc.Anchor(
        "Underline always",
        href="https://www.dash-mantine-components.com/",
        target="_blank",
        underline = "always",
    ),
    dmc.Anchor(
        "Underline on hover",
        href="https://www.dash-mantine-components.com/",
        target="_blank",
        underline = "hover",
    ),
    dmc.Anchor(
        "Underline never",
        href="https://www.dash-mantine-components.com/",
        target="_blank",
        underline = "never",
    ),
    dmc.Anchor(
        "Underline not hover",
        href="https://www.dash-mantine-components.com/",
        target="_blank",
        underline = "not-hover",
    ),

])



================================================
File: docs/appshell/appshell.md
================================================
---
name: AppShell
description: Responsive shell for your application with header, navbar, aside and footer.
endpoint: /components/appshell
package: dash_mantine_components
category: Layout
---

.. toc::

This page includes only documentation. Since all associated `AppShell` components have fixed position, it is not possible to include demos on this page.

Please see the code in the dmc-docs GitHub.  Or run the app and edit the code on PyCafe.

Here’s a cleaner and more visually appealing version of the links:

---

### Examples  

This page includes only documentation. Since all associated `AppShell` components have fixed positions, it is not possible to include demos on this page.  

Please refer to the code on the **[dmc-docs GitHub](https://github.com/snehilvj/dmc-docs)** or run and edit the examples on **[PyCafe](https://py.cafe)**.  

1. Basic AppShell with Header and Navbar
   - [View Code on GitHub](https://github.com/snehilvj/dmc-docs/tree/main/help_center/appshell/basic_appshell.py)  
   - [Live Demo on PyCafe](https://py.cafe/dash.mantine.components/basic-appshell-collapsible-navbar)  

2. Responsive Width and Height
   - [View Code on GitHub](https://github.com/snehilvj/dmc-docs/tree/main/help_center/appshell/responsive_sizes.py)  
   - [Live Demo on PyCafe](https://py.cafe/dash.mantine.components/appshell-responsive-width-height)  

3. Mobile-Only Navbar
   - Buttons in the header are displayed in the navbar on mobile.  
   - [View Code on GitHub](https://github.com/snehilvj/dmc-docs/tree/main/help_center/appshell/mobile_navbar.py)  
   - [Live Demo on PyCafe](https://py.cafe/dash.mantine.components/responsive-mobile-navbar-demo)  

4. Collapsible Navbar on Desktop and Mobile
   - [View Code on GitHub](https://github.com/snehilvj/dmc-docs/tree/main/help_center/appshell/responsive_sizes.py)  
   - [Live Demo on PyCafe](https://py.cafe/dash.mantine.components/Collapsible-navbar-on-both-desktop-and-moble)  

5. Full AppShell Layout
   - Includes all elements: navbar, header, aside, and footer.  
   - [View Code on GitHub](https://github.com/snehilvj/dmc-docs/tree/main/help_center/appshell/full_layout.py)  
   - [Live Demo on PyCafe](https://py.cafe/dash.mantine.components/AppShell-with-all-elements)  

6. Scrollable Navbar with 60 Links
   - [View Code on GitHub](https://github.com/snehilvj/dmc-docs/tree/main/help_center/appshell/navbar_scroll.py)  
   - [Live Demo on PyCafe](https://py.cafe/dash.mantine.components/Appshell-with-scrollable-navbar)  

7. Alternate AppShell Layout
   - Navbar and aside are rendered on top of the header and footer.  
   - [View Code on GitHub](https://github.com/snehilvj/dmc-docs/tree/main/help_center/appshell/alt_layout.py)  
   - [Live Demo on PyCafe](https://py.cafe/dash.mantine.components/dash-alt-layout-appshell)  

8. AppShell with Theme Switch Component
   - [View Code on GitHub](https://github.com/snehilvj/dmc-docs/tree/main/help_center/appshell/appshell_with_theme_switch.py)  
   - [Live Demo on PyCafe](https://py.cafe/dash.mantine.components/dash-mantine-theme-toggle-app)  

### Basic usage

AppShell is a layout component. It can be used to implement a common Header - Navbar - Footer - Aside layout pattern.
All AppShell components have `position: fixed` style - they are not scrolled with the page.

The documentation app that you are viewing uses AppShell with Header, Aside, and Navbar.

This is the code for the first example above for the basic app shell with header and navbar.  The navbar collapses on mobile.

```python

import dash_mantine_components as dmc
from dash import Dash, _dash_renderer, Input, Output, State, callback
_dash_renderer._set_react_version("18.2.0")

app = Dash(external_stylesheets=dmc.styles.ALL)

logo = "https://github.com/user-attachments/assets/c1ff143b-4365-4fd1-880f-3e97aab5c302"

layout = dmc.AppShell(
    [
        dmc.AppShellHeader(
            dmc.Group(
                [
                    dmc.Burger(id="burger", size="sm", hiddenFrom="sm", opened=False),
                    dmc.Image(src=logo, h=40),
                    dmc.Title("Demo App", c="blue"),
                ],
                h="100%",
                px="md",
            )
        ),
        dmc.AppShellNavbar(
            id="navbar",
            children=[
                "Navbar",
                *[dmc.Skeleton(height=28, mt="sm", animate=False) for _ in range(15)],
            ],
            p="md",
        ),
        dmc.AppShellMain("Main"),
    ],
    header={"height": 60},
    padding="md",
    navbar={
        "width": 300,
        "breakpoint": "sm",
        "collapsed": {"mobile": True},
    },
    id="appshell",
)


app.layout = dmc.MantineProvider(layout)


@callback(
    Output("appshell", "navbar"),
    Input("burger", "opened"),
    State("appshell", "navbar"),
)
def navbar_is_open(opened, navbar):
    navbar["collapsed"] = {"mobile": not opened}
    return navbar


if __name__ == "__main__":
    app.run(debug=True)

```

### AppShell components

* `AppShell` - root component, it is required to wrap all other components, used to configure layout properties
* `AppShellHeader` - section rendered at the top of the page
* `AppShellNavbar` - section rendered on the left side of the page
* `AppShellAside` - section rendered on the right side of the page
* `AppShellFooter` - section rendered at the bottom of the page
* `AppShellMain` - main section rendered at the center of the page, has static position, all other sections are offset by its padding
* `AppShellSection` - utility component that can be used to render group of content inside `AppShellNavbar` and `AppShellAside`

### AppShell Configuration
`AppShell` component accepts, `header`, `footer`, `navbar` and `aside` props to configure corresponding sections. It is 
required to set these props if you want to use corresponding components. For example, if you want to use `AppShellHeader`
component, you need to set `header` prop on the `AppShell` component.

### header and footer properties

`header` and `footer` configuration dictionaries are the same and have the following properties:

- `height`: Height of the section: number, string or dict  with breakpoints as keys and height as value
- `collapsed`: boolean; If section is collapsed it is hidden from the viewport and is not offset in `AppShellMain`
- `offset`: boolean; Determines whether the section should be offset by the `AppShellMain`. For example, it is useful if you want to hide header based on the scroll position.

### navbar and aside properties

`navbar` and `aside` configuration dictionaries are the same as well and have the following properties:

- `width`: Width of the section: number, string or dict with breakpoints as keys and width as value 
- `breakpoint`: Breakpoint at which section should switch to mobile mode. In mobile mode the section always has 
100% width and its collapsed state is controlled by the `collapsed.mobile` instead of `collapsed.desktop` 
- `collapsed`: Determines whether the section should be collapsed.  Example:  {"desktop": False; "mobile": True };

### layout prop
`layout` prop controls how `AppShellHeader` / `AppShellFooter` and `AppShellNavbar` / `AppShellAside` are positioned 
relative to each other. It accepts `alt` and `default` values:

- `alt` – `AppShellNavbar`/`AppShellAside` height is equal to viewport height, `AppShellHeader`/`AppShellFooter` width 
is equal to viewport width less the `AppShellNavbar` and `AppShellAside` width.  See example #7 above.

- `default` – `AppShellNavbar`/`AppShellAside` height is equal to viewport height - `AppShellHeader`/ `AppShellFooter` 
height, `AppShellHeader`/`AppShellFooter` width is equal to viewport width 

### height prop
`height` property in `header` and `footer` configuration dicts works the following way:

- If you pass a number, the value will be converted to rem and used as height at all viewport sizes.
- To change height based on viewport width, use dict with breakpoints as keys and height as values. It works the same way as `style` props.

Examples:
```python
# Height is a number, it will be converted to rem  and used as height at all viewport sizes
dmc.AppShell(
    children=[
        dmc.AppShellHeader("Header")
        # ...
     ],
    header={"height": 48}    
)
```

```python

# Height is an dict with breakpoints:
# - height is 48 when viewport width is < theme.breakpoints.sm
# - height is 60 when viewport width is >= theme.breakpoints.sm and < theme.breakpoints.lg
# - height is 76 when viewport width is >= theme.breakpoints.lg
dmc.AppShell(
    children=[
       dmc.AppShellHeader("Header")
    ],
    header={"height": {"base": 48, "sm": 60, "lg": 76}}    
)
```

### Width configuration
`width` property in `navbar` and `aside`  configuration dictionaries works the following way:

- If you pass a number, the value will be converted to rem and used as width when the viewport is larger than breakpoint.
- To change `width` based on viewport width, use dict with breakpoints as keys and width as values. It works the same way as `style` props. Note that width is always 100% when the viewport is smaller than breakpoint.

Examples

```python
# Width is a number, it will be converted to rem and used as width when viewport is larger than theme.breakpoints.sm
dmc.AppShell(
    children=[
        dmc.AppShellNavbar("Navbar")
        # ...
     ],
    navbar={"width": 48, "breakpoint": "sm"}    
)
```

```python

# Width is an object with breakpoints:
# - width is 100% when viewport width is < theme.breakpoints.sm
# - width is 200 when viewport width is >= theme.breakpoints.sm and < theme.breakpoints.lg
# - width is 300 when viewport width is >= theme.breakpoints.lg
dmc.AppShell(
    children=[
        dmc.AppShellNavbar("Navbar")
        # ...
     ],
    navbar={"width": {"sm": 200, "lg": 300 }, "breakpoint": 'sm' } 
)
```

### padding prop
`padding` prop controls the padding of the `AppShellMain` component. It is important to use it instead of setting padding
on the `AppShellMain` directly because padding of the `AppShellMain` is also used to offset `AppShellHeader`, `AppShellNavbar`, `AppShellAside` and `AppShellFooter` components.

`padding` prop works the same way as `style` props and accepts numbers, strings and dicts with breakpoints as keys and padding as values. You can reference theme.spacing values or use any valid CSS values.

```python
# Padding is always theme.spacing.md
dmc.AppShell(
   # content
   padding="md"
)
```


```python

# Padding is:
# - 10 when viewport width is < theme.breakpoints.sm
# - 15 when viewport width is >= theme.breakpoints.sm and < theme.breakpoints.lg
# - theme.spacing.xl when viewport width is >= theme.breakpoints.lg
dmc.AppShell(
   # content
   padding={"base": 10, "sm": 15, "lg": "xl" }
)
```
### Collapsed navbar/aside configuration
`navbar` and `aside` props have `collapsed` property. The property accepts an dict { mobile: boolean; desktop: boolean } which
allows to configure collapsed state depending on the viewport width.

See example #4 above: Collapsible Navbar on Desktop and Mobile

### withBorder prop
`withBorder` prop is available on `AppShell` and associated sections: `AppShellHeader`, `AppShellNavbar`, `AppShellAside`
and `AppShellFooter`. By default, `withBorder` prop is True – all components have a border on the side that is adjacent 
to the `AppShellMain` component. For example, `AppShellHeader` is located at the top of the page – it has a border on the
bottom side, `AppShellNavbar` is located on the left side of the page – it has a border on the right side.

To remove the border from all components, set `withBorder=False` on the `AppShell`:

```python
dmc.AppShell(withBorder=False)
```

To remove the border from a specific component, set `withBorder=False` on that component:

```python
dmc.AppShell(
   children=[
      dmc.AppShellHeader(withBorder=False)
   ]
)
```



### zIndex prop

`zIndex` prop is available on AppShell and associated sections: `AppShellHeader`, `AppShellNavbar`, `AppShellAside` and `AppShellFooter`.

By default, all sections z-index is 200.

To change z-index of all sections, set `zIndex` prop on the AppShell:

```python
import dash_mantine_components as dmc

dmc.AppShell(
    zIndex=100,
    children=[
        # content
    ]
)
```

To change z-index of individual sections, set `zIndex` prop on each of them:

```python
import dash_mantine_components as dmc

dmc.AppShell(
    children=[
        dmc.AppShellHeader("Header", zIndex=2000),
        dmc.AppShellNavbar("Navbar", zIndex=2000),
    ]
)
```

### Control transitions
Set `transitionDuration` and `transitionTimingFunction` props on the `AppShell` to control transitions:

```python
dmc.AppShell(
   transitionDuration=500,
   transitionTimingFunction="ease"   ,
)
```

### disabled prop
Set `disabled` prop on the `AppShell` to prevent all sections except `AppShellMain` from rendering. It is useful when 
you want to hide the shell on some pages of your application.

```python
dmc.AppShell(disabled=True)
```


### Usage in docs

```python
import dash_mantine_components as dmc

dmc.AppShell(
    [
        dmc.AppShellHeader("Header", px=25),
        dmc.AppShellNavbar("Navbar"),
        dmc.AppShellAside("Aside", withBorder=False),
        dmc.AppShellMain(children=[...]),
    ],
    header={"height": 70},
    padding="xl",    
    navbar={
        "width": 300,
        "breakpoint": "sm",
        "collapsed": {"mobile": True},
    },
    aside={
        "width": 300,
        "breakpoint": "xl",
        "collapsed": {"desktop": False, "mobile": True},
    },
)
```


### Styles API


#### AppShell Selectors

| Selector | Static selector            | Description                       |
|----------|-----------------------------|-----------------------------------|
| root     | .mantine-AppShell-root      | Root element (AppShell component) |
| navbar   | .mantine-AppShell-navbar    | AppShell.Navbar root element      |
| header   | .mantine-AppShell-header    | AppShell.Header root element      |
| main     | .mantine-AppShell-main      | AppShell.Main root element        |
| aside    | .mantine-AppShell-aside     | AppShell.Aside root element       |
| footer   | .mantine-AppShell-footer    | AppShell.Footer root element      |
| section  | .mantine-AppShell-section   | AppShell.Section root element     |

#### AppShell CSS Variables

| Selector | Variable                                 | Description                                   |
|----------|------------------------------------------|-----------------------------------------------|
| root     | --app-shell-transition-duration          | Controls transition duration of all children  |
|          | --app-shell-transition-timing-function   | Controls transition timing function of all children |

#### AppShell Data Attributes

| Selector         | Attribute         | Condition                    | Value                                |
|------------------|-------------------|------------------------------|--------------------------------------|
| root             | data-resizing     | User is resizing the window  | –                                    |
| root             | data-layout       | –                            | Value of the `layout` prop           |
| root             | data-disabled     | `disabled` prop is set       | –                                    |
| navbar, header, aside, footer | data-with-border | `withBorder` prop is set either on the AppShell or on the associated component | – |
| section          | data-grow         | `grow` prop is set on the AppShell.Section | – |

### Keyword Arguments

### AppShell
.. kwargs::AppShell

#### Navbar

.. kwargs::AppShellNavbar

#### Header

.. kwargs::AppShellHeader

#### Aside

.. kwargs::AppShellAside

#### Footer

.. kwargs::AppShellFooter

#### Section

.. kwargs::AppShellSection



================================================
File: docs/areachart/area_animation.py
================================================
from random import randint
import dash_mantine_components as dmc
from dash import callback, Input, Output

component = dmc.Box(
    [
        dmc.Button("Update Chart", id="btn-areachart-animation"),
        dmc.AreaChart(
            id="areachart-animation",
            h=300,
            dataKey="date",
            data=[{}],
            tooltipAnimationDuration=500,
            areaProps={
                "isAnimationActive": True,
                "animationDuration": 500,
                "animationEasing": "ease-in-out",
                "animationBegin": 500,
            },
            series=[
                {"name": "Apples", "color": "indigo.6"},
                {"name": "Oranges", "color": "blue.6"},
                {"name": "Tomatoes", "color": "teal.6"},
            ],
        ),
    ]
)


@callback(
    Output("areachart-animation", "data"), Input("btn-areachart-animation", "n_clicks")
)
def update(n):
    return [
        {
            "date": "Mar 22",
            "Apples": 2890,
            "Oranges": 2338,
            "Tomatoes": randint(1000, 4000),
        },
        {
            "date": "Mar 23",
            "Apples": 2756,
            "Oranges": 2103,
            "Tomatoes": randint(1000, 4000),
        },
        {
            "date": "Mar 24",
            "Apples": 3322,
            "Oranges": 986,
            "Tomatoes": randint(1000, 4000),
        },
        {
            "date": "Mar 25",
            "Apples": 3470,
            "Oranges": 2108,
            "Tomatoes": randint(1000, 4000),
        },
        {
            "date": "Mar 26",
            "Apples": 3129,
            "Oranges": 1726,
            "Tomatoes": randint(1000, 4000),
        },
    ]



================================================
File: docs/areachart/areachart.md
================================================
---
name: AreaChart
description: Area chart component with stacked, percent and split variants.
endpoint: /components/areachart
package: dash_mantine_components
category: Charts
---

.. toc::

### Introduction

Use `AreaChart` component without `type` prop to render a regular area chart. In a regular area chart, each data series
is plotted on its own and does not interact with other series.

.. exec::docs.areachart.interactive
    :code: false

```python
import dash_mantine_components as dmc
from .data import data

dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    series = [
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"}
    ],
    curveType="linear",
    tickLine="xy",
    withGradient=False,
    withXAxis=False,
    withDots=False,
)
```

### Data
Here is the data imported for the examples on this page:

```python

data = [
  {"date": "Mar 22", "Apples": 2890, "Oranges": 2338, "Tomatoes": 2452},
  {"date": "Mar 23", "Apples": 2756, "Oranges": 2103, "Tomatoes": 2402},
  {"date": "Mar 24", "Apples": 3322, "Oranges": 986, "Tomatoes": 1821},
  {"date": "Mar 25", "Apples": 3470, "Oranges": 2108, "Tomatoes": 2809},
  {"date": "Mar 26", "Apples": 3129, "Oranges": 1726, "Tomatoes": 2290}
]
```

### Stacked area chart
Set type="stacked" to render a stacked area chart. In this type of area chart stacking is applied along the vertical
axis, allowing you to see the overall trend as well as the contribution of each individual series to the total.


.. exec::docs.areachart.stacked


### Percent area chart
Set type="percent" to render a percent area chart. In this type of area chart the y-axis scale is always normalized to
100%, making it easier to compare the contribution of each series in terms of percentages.

.. exec::docs.areachart.percent

### Split area chart 
Set type="split" to render a split area chart. In this type of area chart fill color is split into two colors, one for
positive values and one for negative values. Split area chart supports only one data series.


.. exec::docs.areachart.split

### Split colors
Set `splitColors` prop to an array of two colors to customize the fill color of split area chart. The first color is
used for positive values and the second color for negative values. `splitColors` prop is ignored in other types of area charts.

.. exec::docs.areachart.splitcolors

### Legend
To display chart legend, set `withLegend` prop. When one of the items in the legend is hovered, the corresponding data
series is highlighted in the chart.

.. exec::docs.areachart.legend

### Legend position
You can pass props down to recharts Legend component with `legendProps` prop. For example, setting the following will
render the legend at the bottom of the chart and set its height to 50px:
```python
legendProps={'verticalAlign': 'bottom', 'height': 50} 
```

.. exec::docs.areachart.legendposition

### Series labels
By default, series `name` is used as a label. To change it, set `label` property in `series` object:


.. exec::docs.areachart.serieslabels

### Connect nulls
Use `connectNulls` prop to specify whether to connect a data point across null points. By default, `connectNulls` is true.


.. exec::docs.areachart.connectnulls
    :code: false

```python
import dash_mantine_components as dmc

data = [
  {"date": "Mar 22", "Apples": 110},
  {"date": "Mar 23", "Apples": 60},
  {"date": "Mar 24", "Apples": -80},
  {"date": "Mar 25", "Apples": 40},
  {"date": "Mar 26", "Apples": None},
  {"date": "Mar 27", "Apples": 80}
]

dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    connectNulls=True,
    series=[{"name": "Apples", "color": "indigo.6"}],
    curveType="linear",
)

```
### X and Y axis props
Use `xAxisProps` and `yAxisProps` to pass props down to recharts `XAxis` and `YAxis` components. For example, these props can
be used to change orientation of axis:

.. exec::docs.areachart.xyaxis

### Axis labels
Use `xAxisLabel` and `yAxisLabel` props to display axis labels:

.. exec::docs.areachart.axislabels

### X axis offset
Use xAxisProps to set padding between the charts ends and the x-axis:

.. exec::docs.areachart.xaxisoffset

### Y axis scale
Use `yAxisProps` to change domain of the Y axis. For example, if you know that your data will always be in the range
of 0 to 100, you can set domain to [0, 100]:

.. exec::docs.areachart.yaxisscale


### Right Y axis

To display additional Y axis on the right side of the chart, set `withRightYAxis` prop. You can pass props down to
recharts `YAxis` component with `rightYAxisProps` prop and assign a label to the right Y axis with `rightYAxisLabel` prop.
Note that you need to bind data series to the right Y axis by setting `yAxisId` in the series object.

.. exec::docs.areachart.rightyaxis



### Rotate x-axis labels
To rotate x-axis labels, set `xAxisProps.angle` to a number of degrees to rotate:

.. exec::docs.areachart.rotatexaxislabels

### Area color
You can reference colors from theme the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. 
Any valid CSS color value is also accepted.


.. exec::docs.areachart.areacolor
    :code: false

```python
import dash_mantine_components as dmc

data = [
  {"date": "Mar 22", "Apples": 110},
  {"date": "Mar 23", "Apples": 60},
  {"date": "Mar 24", "Apples": -80},
  {"date": "Mar 25", "Apples": 40},
  {"date": "Mar 26", "Apples": 60},
  {"date": "Mar 27", "Apples": 80}
]

dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    withGradient=True,
    series=[{"name": "Apples", "color": "orange.7"}],
)

```

### Change area color depending on color scheme
You can use CSS variables in color property. Learn more in the Theming section under [Colors.](/colors#colors-in-light-and-dark-mode)

Example of area that is dark orange in light mode and lime in dark mode:


.. exec::docs.areachart.areacolor-light-dark
    :code: false


.. sourcetabs::docs/areachart/areacolor-light-dark.py, assets/examples/chart-color.css
    :defaultExpanded: true
    :withExpandedButton: true


### Stroke dash array
Set `strokeDasharray` prop to control the stroke dash array of the grid and cursor lines. The value represent the
lengths of alternating dashes and gaps. For example, strokeDasharray="10 5" will render a dashed line with 10px dashes
and 5px gaps.


.. exec::docs.areachart.strokedasharray

### Grid and text colors
Use `--chart-grid-color` and `--chart-text-color` to change colors of grid lines and text within the chart. 
With CSS , you can change colors depending on color scheme.  Learn more in the Theming section under [Colors.](/colors#colors-in-light-and-dark-mode)



.. exec::docs.areachart.grid-text-color-light-dark
    :code: false


.. sourcetabs::docs/areachart/grid-text-color-light-dark.py, assets/examples/chart-grid-text-colors.css
    :defaultExpanded: true
    :withExpandedButton: true

If your application has only one color scheme, you can use `gridColor` and `textColor` props instead of CSS variables:

```python
dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    gridColor="gray.5",
    textColor = "gray.9",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)
```

### Tooltip animation
By default, tooltip animation is disabled. To enable it, set `tooltipAnimationDuration` prop to a number of
milliseconds to animate the tooltip position change.

.. exec::docs.areachart.tooltipanimation


### Area animation
By default, the Recharts data animation is disabled. To enable and customize the animation, use `areaProps` to pass properties to the Recharts `Area` component.

.. exec::docs.areachart.area_animation

### Units
Set `unit` prop to render a unit label next to the y-axis ticks and tooltip values:

.. exec::docs.areachart.units

### Remove tooltip
To remove tooltip, set `withTooltip=False`. It also removes the cursor line and disables interactions with the chart.


.. exec::docs.areachart.removetooltip

### Customize dots
Use `dotProps` to pass props down to recharts dot in regular state and `activeDotProps` to pass props down to recharts dot in active state (when cursor is over the current series).

.. exec::docs.areachart.customizedots

### Stroke width
Use `strokeWidth` prop to control the stroke width of all areas:

.. exec::docs.areachart.strokewidth
    :code: false

```python
import dash_mantine_components as dmc
from .data import data

dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"}
    ],
    strokeWidth=2,
)

```

### Fill opacity
Use `fillOpacity` prop to control the fill opacity of all areas:

.. exec::docs.areachart.fillopacity
    :code: false

```python

import dash_mantine_components as dmc
from .data import data

dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"}
    ],
    fillOpacity="0.2",
    withGradient=False,
)
```

### Sync multiple AreaCharts
You can pass props down to recharts AreaChart component with `areaChartProps` prop. For example, setting the following 
will sync tooltip of multiple `AreaChart` components with the same `syncId` prop.

```python
areaChartProps={"syncId": "any-id"}
```
.. exec::docs.areachart.sync

### Vertical orientation
Set orientation="vertical" to render a vertical area chart:


.. exec::docs.areachart.vertical

### Dashed area line
Set `strokeDasharray` property in series to change line style to dashed:

.. exec::docs.areachart.dashedarealine

### Reference lines
Use `referenceLines` prop to render reference lines. Reference lines are always rendered behind the chart.

.. exec::docs.areachart.referencelines

### clickData
Use the `clickData` property in a callback to retrieve data from the most recent click event.
To get the name of the clicked series, use the `clickSeriesName` property.

.. exec::docs.areachart.clickdata


### hoverData
Use the `hoverData` property in a callback to retrieve data from the most recent hover event.
To get the name of the hovered series, use the `hoverSeriesName` property.

.. exec::docs.areachart.hoverdata

### highlightHover

Set `highlightHover=True` to highlight the series when hovered, mirroring the behavior of hovering over chart legend items.

.. exec::docs.areachart.highlighthover

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### AreaChart selectors

| Name            | Static selector                    | Description                                   |
|:----------------|:----------------------------------|:----------------------------------------------|
| root            | .mantine-AreaChart-root            | Root element                                  |
| area            | .mantine-AreaChart-area            | Area of the chart                             |
| axis            | .mantine-AreaChart-axis            | X and Y axis of the chart                     |
| container       | .mantine-AreaChart-container       | Recharts ResponsiveContainer component        |
| grid            | .mantine-AreaChart-grid            | Recharts CartesianGrid component              |
| legend          | .mantine-AreaChart-legend          | Legend root element                           |
| legendItem      | .mantine-AreaChart-legendItem      | Legend item representing data series          |
| legendItemColor | .mantine-AreaChart-legendItemColor | Legend item color                             |
| legendItemName  | .mantine-AreaChart-legendItemName  | Legend item name                              |
| tooltip         | .mantine-AreaChart-tooltip         | Tooltip root element                          |
| tooltipBody     | .mantine-AreaChart-tooltipBody     | Tooltip wrapper around all items              |
| tooltipItem     | .mantine-AreaChart-tooltipItem     | Tooltip item representing data series         |
| tooltipItemBody | .mantine-AreaChart-tooltipItemBody | Tooltip item wrapper around item color and name|
| tooltipItemColor| .mantine-AreaChart-tooltipItemColor| Tooltip item color                            |
| tooltipItemName | .mantine-AreaChart-tooltipItemName | Tooltip item name                             |
| tooltipItemData | .mantine-AreaChart-tooltipItemData | Tooltip item data                             |
| tooltipLabel    | .mantine-AreaChart-tooltipLabel    | Label of the tooltip                          |
| referenceLine   | .mantine-AreaChart-referenceLine   | Reference line                                |
| axisLabel       | .mantine-AreaChart-axisLabel       | X and Y axis labels                           |

#### AreaChart CSS variables

| Selector           | Variable             | Description                                      |
|:-------------------|:---------------------|:-------------------------------------------------|
| root               | --chart-grid-color   | Controls color of the grid and cursor lines      |
|                    | --chart-text-color   | Controls color of the axis labels                |


### Keyword Arguments

#### AreaChart

.. kwargs::AreaChart



================================================
File: docs/areachart/areacolor-light-dark.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    withGradient=True,
    series=[{"name": "Apples", "color": "var(--chart-color)"}],
)




================================================
File: docs/areachart/areacolor.py
================================================
import dash_mantine_components as dmc
from .data import data
from lib.configurator import Configurator


target = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    withGradient=True,
    series=[{"name": "Apples", "color": "orange.7"}],
)

configurator = Configurator(target)

configurator.add_switch("withGradient", True)

component = configurator.panel



================================================
File: docs/areachart/axislabels.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    xAxisLabel="Date",
    yAxisLabel="Amount",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/clickdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data


component = dmc.Group(
    [
        dmc.AreaChart(
            id="figure-areachart",
            h=300,
            dataKey="date",
            data=data,
            type="stacked",
            series=[
                {"name": "Apples", "color": "indigo.6"},
                {"name": "Oranges", "color": "blue.6"},
                {"name": "Tomatoes", "color": "teal.6"},
            ],
        ),
        dmc.Text(id="clickdata-areachart1"),
        dmc.Text(id="clickdata-areachart2"),
    ]
)


@callback(
    Output("clickdata-areachart1", "children"),
    Output("clickdata-areachart2", "children"),
    Input("figure-areachart", "clickData"),
    Input("figure-areachart", "clickSeriesName"),
)
def update(data, name):
    return f"clickData:  {data}", f"clickSeriesName: {name}"



================================================
File: docs/areachart/connectnulls.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator


data = [
    {"date": "Mar 22", "Apples": 110},
    {"date": "Mar 23", "Apples": 60},
    {"date": "Mar 24", "Apples": -80},
    {"date": "Mar 25", "Apples": 40},
    {"date": "Mar 26", "Apples": None},
    {"date": "Mar 27", "Apples": 80},
]

target = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    connectNulls=True,
    series=[{"name": "Apples", "color": "indigo.6"}],
    curveType="linear",
)

configurator = Configurator(target)

configurator.add_select(
    "curveType",
    ["Bump", "Linear", "Natural", "Monotone", "Step", "StepBefore", "StepAfter"],
    "Linear",
)
configurator.add_switch("connectNulls", True)

component = configurator.panel



================================================
File: docs/areachart/customizedots.py
================================================
import dash_mantine_components as dmc
from .data import data


component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    dotProps={"r": 6, "strokeWidth": 2, "stroke": "#fff"},
    activeDotProps={"r": 8, "strokeWidth": 1, "fill": "#fff"},
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/dashedarealine.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    strokeWidth=1,
    dotProps={"r": 2},
    activeDotProps={"r": 3, "strokeWidth": 1},
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6", "strokeDasharray": "5 5"},
    ],
)



================================================
File: docs/areachart/data.py
================================================
data = [
    {"date": "Mar 22", "Apples": 2890, "Oranges": 2338, "Tomatoes": 2452},
    {"date": "Mar 23", "Apples": 2756, "Oranges": 2103, "Tomatoes": 2402},
    {"date": "Mar 24", "Apples": 3322, "Oranges": 986, "Tomatoes": 1821},
    {"date": "Mar 25", "Apples": 3470, "Oranges": 2108, "Tomatoes": 2809},
    {"date": "Mar 26", "Apples": 3129, "Oranges": 1726, "Tomatoes": 2290},
]



================================================
File: docs/areachart/fillopacity.py
================================================
import dash_mantine_components as dmc
from .data import data
from lib.configurator import Configurator

target = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
    fillOpacity="0.2",
)

configurator = Configurator(target)


configurator.add_segmented_control("type", ["default", "stacked"], "default")
configurator.add_number_slider("fillOpacity", 0.2, min=0, max=1, step=0.1)
configurator.add_switch("withGradient", True)


component = configurator.panel



================================================
File: docs/areachart/grid-text-color-light-dark.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    className="chart-grid-text-colors",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/grid-text-color.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    gridColor="gray.5",
    textColor = "gray.9",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/highlighthover.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
    highlightHover=True
)



================================================
File: docs/areachart/hoverdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data


component = dmc.Group(
    [
        dmc.AreaChart(
            id="figure-areachart-hover",
            h=300,
            dataKey="date",
            data=data,
            type="stacked",
            series=[
                {"name": "Apples", "color": "indigo.6"},
                {"name": "Oranges", "color": "blue.6"},
                {"name": "Tomatoes", "color": "teal.6"},
            ],
        ),
        dmc.Text(id="hoverdata-areachart1"),
        dmc.Text(id="hoverdata-areachart2"),
    ]
)


@callback(
    Output("hoverdata-areachart1", "children"),
    Output("hoverdata-areachart2", "children"),
    Input("figure-areachart-hover", "hoverData"),
    Input("figure-areachart-hover", "hoverSeriesName"),
)
def update(data, name):
    return f"hoverData:  {data}", f"hoverSeriesName: {name}"




================================================
File: docs/areachart/interactive.py
================================================
import dash_mantine_components as dmc
from .data import data
from lib.configurator import Configurator

target = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
    curveType="linear",
    tickLine="xy",
    withGradient=False,
    withXAxis=False,
    withDots=False,
)

configurator = Configurator(target)

configurator.add_select(
    "curveType",
    ["Bump", "Linear", "Natural", "Monotone", "Step", "StepBefore", "StepAfter"],
    "Monotone",
)

configurator.add_segmented_control("tickLine", ["x", "y", "xy", "none"], "xy")
configurator.add_segmented_control("gridAxis", ["x", "y", "xy", "none"], "x")
configurator.add_switch("withGradient", False)
configurator.add_switch("withXAxis", False)
configurator.add_switch("withYAxis", False)
configurator.add_switch("withDots", False)


component = configurator.panel



================================================
File: docs/areachart/legend.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    withLegend=True,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/legendposition.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    withLegend=True,
    legendProps={"verticalAlign": "bottom", "height": 50},
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/percent.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="percent",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/referencelines.py
================================================
import dash_mantine_components as dmc

data = [
    {"date": "Mar 22", "Apples": 50},
    {"date": "Mar 23", "Apples": 60},
    {"date": "Mar 24", "Apples": 40},
    {"date": "Mar 25", "Apples": 30},
    {"date": "Mar 26", "Apples": 0},
    {"date": "Mar 27", "Apples": 20},
    {"date": "Mar 28", "Apples": 20},
    {"date": "Mar 29", "Apples": 10},
]


component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    yAxisProps={"domain": [0, 100]},
    referenceLines=[
        {"y": 40, "label": "Average sales", "color": "red.6"},
        {"x": "Mar 25", "label": "Report out"},
    ],
    series=[{"name": "Apples", "color": "indigo.6"}],
)



================================================
File: docs/areachart/removetooltip.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    withTooltip=False,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/rightyaxis.py
================================================
import dash_mantine_components as dmc

data = biaxial_data = [
    {"name": "Page A", "uv": 4000, "pv": 2400},
    {"name": "Page B", "uv": 3000, "pv": 1398},
    {"name": "Page C", "uv": 2000, "pv": 9800},
    {"name": "Page D", "uv": 2780, "pv": 3908},
    {"name": "Page E", "uv": 1890, "pv": 4800},
    {"name": "Page F", "uv": 2390, "pv": 3800},
    {"name": "Page G", "uv": 3490, "pv": 4300},
]

component = dmc.AreaChart(
    h=300,
    data=data,
    dataKey="name",
    withRightYAxis=True,
    yAxisLabel="uv",
    rightYAxisLabel="pv",
    series=[
        {"name": "uv", "color": "pink.6"},
        {"name": "pv", "color": "cyan.6", "yAxisId": "right"},
    ],
)



================================================
File: docs/areachart/rotatexaxislabels.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    tickLine="xy",
    xAxisProps={"angle": -20},
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/serieslabels.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    withLegend=True,
    legendProps={"verticalAlign": "bottom"},
    series=[
        {"name": "Apples", "label": "Apples sales", "color": "indigo.6"},
        {"name": "Oranges", "label": "Oranges sales", "color": "blue.6"},
        {"name": "Tomatoes", "label": "Tomatoes sales", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/split.py
================================================
import dash_mantine_components as dmc

data = [
    {"date": "Mar 22", "Apples": 110},
    {"date": "Mar 23", "Apples": 60},
    {"date": "Mar 24", "Apples": -80},
    {"date": "Mar 25", "Apples": 40},
    {"date": "Mar 26", "Apples": -40},
    {"date": "Mar 27", "Apples": 80},
]

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="split",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/splitcolors.py
================================================
import dash_mantine_components as dmc

data = [
    {"date": "Mar 22", "Apples": 110},
    {"date": "Mar 23", "Apples": 60},
    {"date": "Mar 24", "Apples": -80},
    {"date": "Mar 25", "Apples": 40},
    {"date": "Mar 26", "Apples": -40},
    {"date": "Mar 27", "Apples": 80},
]

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="split",
    strokeWidth=1,
    activeDotProps={"r": 2, "strokeWidth": 1},
    series=[{"name": "Apples", "color": "bright"}],
    splitColors=["violet", "orange"],
)



================================================
File: docs/areachart/stacked.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/strokedasharray.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    strokeDasharray="15 15",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/strokewidth.py
================================================
import dash_mantine_components as dmc
from .data import data
from lib.configurator import Configurator

target = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
    strokeWidth=2,
)

configurator = Configurator(target)

configurator.add_number_slider("strokeWidth", 2, min=0.5, max=5)

component = configurator.panel



================================================
File: docs/areachart/sync.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.Stack(
    [
        dmc.Text("Apples sales:"),
        dmc.AreaChart(
            h=180,
            dataKey="date",
            data=data,
            series=[{"name": "Apples", "color": "indigo.6"}],
            areaChartProps={"syncId": "groceries"},
        ),
        dmc.Text("Tomatoes sales"),
        dmc.AreaChart(
            h=180,
            dataKey="date",
            data=data,
            series=[{"name": "Tomatoes", "color": "teal.6"}],
            areaChartProps={"syncId": "groceries"},
        ),
    ]
)



================================================
File: docs/areachart/tooltipanimation.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    tooltipAnimationDuration=200,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/units.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    unit="$",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/vertical.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    orientation="vertical",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/xaxisoffset.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    xAxisProps={"padding": {"left": 30, "right": 30}},
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/xyaxis.py
================================================
import dash_mantine_components as dmc
from .data import data


component = dmc.AreaChart(
    h=300,
    dataKey="date",
    data=data,
    type="stacked",
    tickLine="xy",
    yAxisProps={"tickMargin": 15, "orientation": "right"},
    xAxisProps={"tickMargin": 15, "orientation": "top"},
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/areachart/yaxisscale.py
================================================
import dash_mantine_components as dmc

data = [
    {"date": "Mar 22", "Apples": 50},
    {"date": "Mar 23", "Apples": 60},
    {"date": "Mar 24", "Apples": 40},
    {"date": "Mar 25", "Apples": 30},
    {"date": "Mar 26", "Apples": 0},
    {"date": "Mar 27", "Apples": 20},
    {"date": "Mar 28", "Apples": 20},
    {"date": "Mar 29", "Apples": 10},
]

component = dmc.AreaChart(
    h=300,
    dataKey="date",
    yAxisProps={"domain": [0, 100]},
    data=data,
    connectNulls=True,
    series=[{"name": "Apples", "color": "indigo.6"}],
)



================================================
File: docs/aspectratio/aspectratio.md
================================================
---
name: AspectRatio
description: Use the Aspect component to maintain responsive consistent width/height ratio.
endpoint: /components/aspectratio
package: dash_mantine_components
category: Layout
---

.. toc::

### Image 

.. exec::docs.aspectratio.simple

### Map embed

.. exec::docs.aspectratio.map

### Video embed

.. exec::docs.aspectratio.video

### Inside flex container
By default, `AspectRatio` does not have fixed width and height, it will take as much space as possible in a regular
container. To make it work inside flex container, you need to set `width` or `flex` property.

.. exec::docs.aspectratio.flex

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### AspectRatio Selectors

| Selector | Static selector                 | Description   |
|----------|----------------------------------|---------------|
| root     | .mantine-AspectRatio-root        | Root element  |

---

#### AspectRatio CSS Variables

| Selector | Variable      | Description     |
|----------|---------------|-----------------|
| root     | --ar-ratio    | Aspect ratio    |



### Keyword Arguments

#### AspectRatio

.. kwargs::AspectRatio



================================================
File: docs/aspectratio/flex.py
================================================
import dash_mantine_components as dmc
from dash import html

component = html.Div(
    dmc.AspectRatio(
        ratio=1,
        style={"flex": "0 0 100px"},
        children=[
            dmc.Image(
                src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-6.png",
                alt="Avatar",
            )
        ],
    ),
    style={"display": "flex"},
)


================================================
File: docs/aspectratio/map.py
================================================
import dash_mantine_components as dmc
from dash import html

component = dmc.AspectRatio(
    html.Iframe(
        src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3025.3063874233135!2d-74.04668908358428!3d40.68924937933441!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x89c25090129c363d%3A0x40c6a5770d25022b!2sStatue%20of%20Liberty%20National%20Monument!5e0!3m2!1sen!2sru!4v1644262070010!5m2!1sen!2sru",
        title="Google map",
    ),
    ratio=16 / 9,
)



================================================
File: docs/aspectratio/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.AspectRatio(
    dmc.Image(
        src="https://www.nasa.gov/wp-content/uploads/2022/07/web_first_images_release.png",
        alt="Carina Nebula",
    ),
    ratio=720 / 1080,
    maw=400,
    mx="auto",
)



================================================
File: docs/aspectratio/video.py
================================================
import dash_mantine_components as dmc
from dash import html

component = dmc.AspectRatio(
    html.Iframe(
        src="https://www.youtube.com/embed/KsTKREWoVC4",
        title="YouTube video player",
        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; fullscreen",
    ),
    ratio=16 / 9,
)



================================================
File: docs/avatar/allowedinitialscolors.py
================================================
import dash_mantine_components as dmc

names = [
    "John Doe",
    "Jane Mol",
    "Alex Lump",
    "Sarah Condor",
    "Mike Johnson",
    "Kate Kok",
    "Tom Smith",
]

component = dmc.Group(
    [
        dmc.Avatar(name=n, color="initials", allowedInitialsColors=["blue", "red"])
        for n in names
    ]
)



================================================
File: docs/avatar/avatar.md
================================================
---
name: Avatar
description: Use Avatar to display user profile pictures. It supports images, icons, or letters. Use AvatarGroup to display stack Avatar components.
endpoint: /components/avatar
package: dash_mantine_components
category: Data Display
---

.. toc::

### Simple Usage

.. exec::docs.avatar.simple

### Initials
To display initials instead of the default placeholder, set name prop to the name of the person, for example,
`name='John Doe'`. If the name is set, you can use `color='initials'` to generate color based on the name:

.. exec::docs.avatar.initials

### Allowed initials colors
By default, all colors from the default theme are allowed for initials, you can restrict them by providing 
`allowedInitialsColors` prop with an array of colors. Note that the default colors array does not include custom
colors defined in the theme, you need to provide them manually if needed.

.. exec::docs.avatar.allowedinitialscolors

### Size, Radius and Variant

Control Avatar's height and width with `size` prop and border-radius with `radius` prop. Both props have
predefined values: xs, sm, md, lg, xl. Alternatively, a number can be used to set radius or size in px.

You can also use `variant` to style the Avatar.

```python
import dash_mantine_components as dmc

dmc.Avatar(src="/assets/avatar.jpeg", size="sm"),
dmc.Avatar(src="/assets/avatar.jpeg"),
dmc.Avatar(src="/assets/avatar.jpeg", size=50, radius="xl"),
dmc.Avatar(src="/assets/avatar.jpeg", size="xl", radius=20),
dmc.Avatar(src="/assets/avatar.jpeg", size="xl", variant="outline"),
```

.. exec::docs.avatar.interactive
    :code: false

### Avatar Group

Use AvatarGroup to stack Avatar components.

.. exec::docs.avatar.group

### Avatar link with tooltip

.. exec::docs.avatar.tooltip

### Dynamically created AvatarGroup

Here's an example of a dynamically created AvatarGroup from GitHub contributors to DMC library.

.. exec::docs.avatar.contributors

### Styles API

| Name            | Static selector                 | Description                                               |
|:----------------|:--------------------------------|:----------------------------------------------------------|
| root            | .mantine-Avatar-root            | Root element                                              |
| image           | .mantine-Avatar-image           | `img` element                                             |
| placeholder     | .mantine-Avatar-placeholder     | Placeholder element, rendered when image cannot be loaded |

### Keyword Arguments

#### Avatar

.. kwargs::Avatar

#### AvatarGroup

.. kwargs::AvatarGroup



================================================
File: docs/avatar/contributors.py
================================================
from os import environ

import dash_mantine_components as dmc
import requests


def create_contributors_list():
    resp = requests.get(
        "https://api.github.com/repos/snehilvj/dash-mantine-components/contributors",
        headers={"authorization": f"token {environ['CONTRIB_TOKEN']}"},
    )
    contributors = resp.json()

    children = []
    for user in contributors:
        avatar = dmc.Avatar(src=user["avatar_url"], radius="xl")
        children.append(avatar)

    return dmc.AvatarGroup(children, id="avatar-group")


component = create_contributors_list() if "CONTRIB_TOKEN" in environ else None



================================================
File: docs/avatar/group.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.AvatarGroup(
    children=[
        dmc.Avatar(
            src="https://avatars.githubusercontent.com/u/91216500?v=4", radius="xl"
        ),
        dmc.Avatar(
            src="https://avatars.githubusercontent.com/u/24227892?v=4", radius="xl"
        ),
        dmc.Avatar(radius="xl"),
        dmc.Avatar("MK", color="cyan", radius="xl"),
        dmc.Avatar(DashIconify(icon="radix-icons:star"), color="blue", radius="xl"),
    ],
)



================================================
File: docs/avatar/initials.py
================================================
import dash_mantine_components as dmc



names = [
    "John Doe",
    "Jane Mol",
    "Alex Lump",
    "Sarah Condor",
    "Mike Johnson",
    "Kate Kok",
    "Tom Smith",
]

avatars = [dmc.Avatar(name=name, color="initials") for name in names]

component = dmc.Group(avatars)


================================================
File: docs/avatar/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-avatar"

target = dmc.Center(
    dmc.Avatar( id=TARGET_ID)
)

configurator = Configurator(target, TARGET_ID)

configurator.add_select("variant", ["filled", "light", "outline", "transparent", "white", "default"], "filled")
configurator.add_slider("radius", "sm")
configurator.add_slider("size", "md")

component = configurator.panel



================================================
File: docs/avatar/placeholder.py
================================================



================================================
File: docs/avatar/simple.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Group(
    children=[
        dmc.Avatar(
            src="https://avatars.githubusercontent.com/u/91216500?v=4", radius="xl"
        ),
        # default placeholder
        dmc.Avatar(radius="xl"),
        # initials
        dmc.Avatar("MK", color="cyan", radius="xl"),
        # icon
        dmc.Avatar(DashIconify(icon="radix-icons:star"), color="blue", radius="xl"),
    ],
)



================================================
File: docs/avatar/tooltip.py
================================================
import dash_mantine_components as dmc
from dash import html

component = html.A(
    dmc.Tooltip(
        dmc.Avatar(
            src="https://e7.pngegg.com/pngimages/799/987/png-clipart-computer-icons-avatar-icon-design-avatar-heroes"
            "-computer-wallpaper-thumbnail.png",
            size="lg",
            radius="xl",
        ),
        label="Snehil Vijay",
        position="bottom",
    ),
    href="https://www.linkedin.com/in/snehilvj/",
    target="_blank",
)



================================================
File: docs/badge/badge.md
================================================
---
name: Badge
description: Use Badges to show indicators, numerical or otherwise.
endpoint: /components/badge
package: dash_mantine_components
category: Data Display
---

.. toc::

### Introduction

.. exec::docs.badge.interactive
    :code: false

### Variants

.. exec::docs.badge.variant

### Colors

```python
import dash_mantine_components as dmc

dmc.Badge("Orange", color="orange")
```

.. exec::docs.badge.colors
    :code: false

### Gradient variant

.. exec::docs.badge.gradient

### Size

.. exec::docs.badge.size

### Radius

.. exec::docs.badge.radius

### Rounded

.. exec::docs.badge.rounded

### Styles API

| Name         | Static selector             | Description             |
|:-------------|:----------------------------|:------------------------|
| root         | .mantine-Badge-root         | Root element            |
| label        | .mantine-Badge-label        | Badge children          |
| section      | .mantine-Badge-section      | Left and right sections |

### Keyword Arguments

#### Badge

.. kwargs::Badge



================================================
File: docs/badge/colors.py
================================================
import dash_mantine_components as dmc

colors = [
    "gray",
    "red",
    "pink",
    "grape",
    "violet",
    "indigo",
    "blue",
    "lime",
    "yellow",
    "orange",
]

component = dmc.Stack(
    gap="xs",
    children=[
        dmc.Group(
            [dmc.Badge(color, variant=variant, color=color) for color in colors],
            justify="center",
        )
        for variant in ["light", "outline", "filled", "dot"]
    ],
)



================================================
File: docs/badge/gradient.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    children=[
        dmc.Badge(
            "Indigo cyan",
            variant="gradient",
            gradient={"from": "indigo", "to": "cyan"},
        ),
        dmc.Badge(
            "Lime green",
            variant="gradient",
            gradient={"from": "teal", "to": "lime", "deg": 105},
        ),
        dmc.Badge(
            "Teal blue",
            variant="gradient",
            gradient={"from": "teal", "to": "blue", "deg": 60},
        ),
        dmc.Badge(
            "Orange red",
            variant="gradient",
            gradient={"from": "orange", "to": "red"},
        ),
        dmc.Badge(
            "Grape pink",
            variant="gradient",
            gradient={"from": "grape", "to": "pink", "deg": 35},
        ),
    ]
)



================================================
File: docs/badge/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-badge"

target = dmc.Center(dmc.Badge("Badge", id=TARGET_ID))

configurator = Configurator(target, TARGET_ID)

configurator.add_select(
    "variant", ["light", "filled", "outline", "dot", "gradient"], "light"
)
configurator.add_colorpicker("color", "blue")
configurator.add_slider("size", "md")
configurator.add_slider("radius", "xl")

component = configurator.panel



================================================
File: docs/badge/radius.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    [
        dmc.Badge("Sale", radius="xs"),
        dmc.Badge("Sale", radius="sm"),
        dmc.Badge("Sale", radius="md"),
        dmc.Badge("Sale", radius="lg"),
        dmc.Badge("Sale", radius="xl"),
    ]
)



================================================
File: docs/badge/rounded.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    [
        dmc.Badge(1, size="xs", circle=True),
        dmc.Badge(7, size="sm", circle=True),
        dmc.Badge(9, size="md", circle=True),
        dmc.Badge(3, size="lg", circle=True),
        dmc.Badge(8, size="xl", circle=True),
    ]
)



================================================
File: docs/badge/section.py
================================================
import dash_mantine_components as dmc

component = dmc.Badge(
    "Badge with Avatar",
    leftSection=dmc.Avatar(
        src="https://avatars.githubusercontent.com/u/91216500?v=4",
        size=24,
        radius="xl",
        mr=5,
    ),
    sx={"paddingLeft": 0},
    size="lg",
    radius="xl",
    color="teal",
)



================================================
File: docs/badge/size.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    [
        dmc.Badge("Sale", size="xs"),
        dmc.Badge("Sale", size="sm"),
        dmc.Badge("Sale", size="md"),
        dmc.Badge("Sale", size="lg"),
        dmc.Badge("Sale", size="xl"),
    ]
)



================================================
File: docs/badge/variant.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    [
        dmc.Badge("Default light badge"),
        dmc.Badge("Dot badge", variant="dot"),
        dmc.Badge("Outline badge", variant="outline"),
        dmc.Badge("Filled badge", variant="filled"),
    ]
)



================================================
File: docs/barchart/area-color-light-dark.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="date",
    data=data,
    series=[{"name": "Smartphones", "color": "var(--chart-color)"}],
)


================================================
File: docs/barchart/areacolor.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator
from .data import data

target = dmc.BarChart(
    h=300,
    dataKey="date",
    data=data,
    fillOpacity=0.5,
    series=[{"name": "Smartphones", "color": "orange.7"}],
)

configurator = Configurator(target)

configurator.add_number_slider("fillOpacity", 0.5, min=0, max=1, step=0.1)

component = configurator.panel



================================================
File: docs/barchart/axislabels.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    type="stacked",
    xAxisLabel="Date",
    yAxisLabel="Amount",
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/bar_animation.py
================================================
from random import randint
import dash_mantine_components as dmc
from dash import callback, Input, Output

component = dmc.Box(
    [
        dmc.Button("Update Chart", id="btn-barchart-animation"),
        dmc.BarChart(
            id="barchart-animation",
            h=300,
            dataKey="month",
            data=[{}],
            type="stacked",
            barProps={"isAnimationActive": True},
            series=[
                {"name": "Smartphones", "color": "violet.6"},
                {"name": "Laptops", "color": "blue.6"},
                {"name": "Tablets", "color": "teal.6"},
            ],
        ),
    ]
)


@callback(
    Output("barchart-animation", "data"), Input("btn-barchart-animation", "n_clicks")
)
def update(n):
    return [
        {
            "month": month,
            "Smartphones": randint(50, 300),
            "Laptops": randint(30, 200),
            "Tablets": randint(20, 150),
        }
        for month in ["January", "February", "March", "April", "May", "June"]
    ]



================================================
File: docs/barchart/bar_value_label.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    withBarValueLabel=True,
    withLegend=True,
    withTooltip=False,
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/barchart.md
================================================
---
name: BarChart
description: Use BarChart component without type prop to render a regular bar chart. In a regular bar chart, each data series is plotted on its own and does not interact with other series.
endpoint: /components/barchart
package: dash_mantine_components
category: Charts
---

.. toc::

### Introduction

.. exec::docs.barchart.interactive
    :code: false

```python

import dash_mantine_components as dmc
from .data import data

dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"}
    ],
    tickLine="y",
    gridAxis="y",
    withXAxis=True,
    withYAxis=True
)

```

### Data

Here is the data used in all the examples on this page:

```python
data = [
    {"month": "January", "Smartphones": 1200, "Laptops": 900, "Tablets": 200},
    {"month": "February", "Smartphones": 1900, "Laptops": 1200, "Tablets": 400},
    {"month": "March", "Smartphones": 400, "Laptops": 1000, "Tablets": 200},
    {"month": "April", "Smartphones": 1000, "Laptops": 200, "Tablets": 800},
    {"month": "May", "Smartphones": 800, "Laptops": 1400, "Tablets": 1200},
    {"month": "June", "Smartphones": 750, "Laptops": 600, "Tablets": 1000}
]
```

### Stacked bar chart
Set type="stacked" to render a stacked bar chart. In this type of bar chart stacking is applied along the vertical axis,
allowing you to see the overall trend as well as the contribution of each individual series to the total.

.. exec::docs.barchart.stacked

### Mixed stacked bar chart

You can control how series are stacked by setting `stackId` property in `series` dictionary:

.. exec::docs.barchart.stacked_mixed

### Percent bar chart
Set type="percent" to render a percent bar chart. In this type of bar chart the y-axis scale is always normalized 
to 100%, making it easier to compare the contribution of each series in terms of percentages.


.. exec::docs.barchart.percent


### Waterfall

Set `type="waterfall"` to render a waterfall bar chart. This chart type illustrates how an initial value is influenced
by subsequent positive or negative values, with each bar starting where the previous one ended. Use the `color` prop
inside data to color each bar individually. Note that the series color gets overwritten for this specific bar. Use the
`standalone` prop inside data to decouple the bar from the flow.

.. exec::docs.barchart.waterfall

### SVG Pattern as bar fill

You can use SVG patterns as bar fill. To do so, set `fill` property in series object to a url of the SVG pattern.

Example of using diagonal stripes and crosshatch patterns as bar fill:


.. exec::docs.barchart.svg

### Legend
To display chart legend, set `withLegend` prop. When one of the items in the legend is hovered, the corresponding data
series is highlighted in the chart.


.. exec::docs.barchart.legend

### Legend position
You can pass props down to recharts `Legend` component with `legendProps` prop. For example, setting the following will
render the legend at the bottom of the chart and set its height to 50px.

```python
legendProps={"verticalAlign": "bottom", "height": 50} 
```

.. exec::docs.barchart.legendposition

### Series labels
By default, series `name` is used as a label. To change it, set `label` property in `series` object:

.. exec::docs.barchart.serieslabels

### X and Y axis props
Use `xAxisProps` and `yAxisProps` to pass props down to recharts `XAxis` and `YAxis` components. For example, these
props can be used to change orientation of axis:

.. exec::docs.barchart.xyaxis

### Axis labels
Use `xAxisLabel` and `yAxisLabel` props to display axis labels:


.. exec::docs.barchart.axislabels

### X axis offset
Use `xAxisProps` to set padding between the charts ends and the x-axis:

.. exec::docs.barchart.xaxisoffset

### Y axis scale
Use `yAxisProps` to change domain of the Y axis. For example, if you know that your data will always be in the range
of 0 to 150, you can set domain to `[0, 150]`:

.. exec::docs.barchart.yaxisscale

### Area color
You can reference colors from theme the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc.
Any valid CSS color value is also accepted.


.. exec::docs.barchart.areacolor
    :code: false

```python
import dash_mantine_components as dmc
from .data import data

dmc.BarChart(
    h=300,
    dataKey="date",
    data=data,
    fillOpacity=0.5,
    series=[{"name": "Smartphones", "color": "orange.7"}],
)

```


### Change area color depending on color scheme
You can use CSS variables in color property. Learn more in the Theming section under [Colors.](/colors#colors-in-light-and-dark-mode)

Example of bar area color that is dark orange in light mode and lime in dark mode:


.. exec::docs.barchart.area-color-light-dark
    :code: false


.. sourcetabs::docs/barchart/area-color-light-dark.py, assets/examples/chart-color.css
    :defaultExpanded: true
    :withExpandedButton: true


### Bar props
You can pass props down to recharts [Bar](https://recharts.org/en-US/api/Bar) component with `barProps` prop. `barProps` accepts an object with rechart props.

.. exec::docs.barchart.barprops


### Bar animation
By default, the Recharts data animation is disabled. To enable and customize the animation, use `barProps` to pass properties to the Recharts `Bar` component.


.. exec::docs.barchart.bar_animation

### Stroke dash array
Set `strokeDasharray` prop to control the stroke dash array of the grid and cursor lines. The value represent the lengths of alternating dashes and gaps. For example, strokeDasharray="10 5" will render a dashed line with 10px dashes and 5px gaps.

.. exec::docs.barchart.strokedasharray


### Grid and text colors
Use `--chart-grid-color` and `--chart-text-color` to change colors of grid lines and text within the chart. 
With CSS , you can change colors depending on color scheme.  Learn more in the Theming section under [Colors.](/colors#colors-in-light-and-dark-mode)



.. exec::docs.barchart.grid-text-color-light-dark
    :code: false


.. sourcetabs::docs/barchart/grid-text-color-light-dark.py, assets/examples/chart-grid-text-colors.css
    :defaultExpanded: true
    :withExpandedButton: true

If your application has only one color scheme, you can use `gridColor` and `textColor` props instead of CSS variables:

```python
dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    type="stacked",
    gridColor="gray.5",
    textColor = "gray.9",
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)
```

### Tooltip animation
By default, tooltip animation is disabled. To enable it, set `tooltipAnimationDuration` prop to a number of milliseconds to animate the tooltip position change.

.. exec::docs.barchart.tooltipanimation




### Units
Set `unit` prop to render a unit label next to the y-axis ticks and tooltip values:

.. exec::docs.barchart.units

### Remove tooltip
To remove tooltip, set `withTooltip=false`. It also removes the cursor line and disables interactions with the chart.

.. exec::docs.barchart.removetooltip

### Sync multiple BarCharts
You can pass props down to recharts [BarChart](https://recharts.org/en-US/api/BarChart) component with `barChartProps` 
prop. For example, setting  will sync tooltip of multiple BarChart components with the same `syncId` prop.

```python
barChartProps={"syncId": "any-id"}
```
.. exec::docs.barchart.sync

### Vertical orientation
Set orientation="vertical" to render a vertical bar chart:

.. exec::docs.barchart.vertical

### Reference lines

Use `referenceLines` prop to render reference lines. Reference lines are always rendered behind the chart.

.. exec::docs.barchart.referencelines

### Bar value label
To display value above each bar, set `withBarValueLabel=True`:

.. exec::docs.barchart.bar_value_label

### clickData
Use the `clickData` property in a callback to retrieve data from the most recent click event.
To get the name of the clicked series, use the `clickSeriesName` property.

.. exec::docs.barchart.clickdata


### hoverData
Use the `hoverData` property in a callback to retrieve data from the most recent hover event.
To get the name of the hovered series, use the `hoverSeriesName` property.

.. exec::docs.barchart.hoverdata

### highlightHover

Set `highlightHover=True` to highlight the series when hovered, mirroring the behavior of hovering over chart legend items.

.. exec::docs.barchart.highlighthover

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### BarChart selectors

| Selector           | Static selector                   | Description                                      |
|:-------------------|:---------------------------------|:-------------------------------------------------|
| root               | .mantine-BarChart-root           | Root element                                    |
| bar                | .mantine-BarChart-bar            | Bar of the chart                                |
| axis               | .mantine-BarChart-axis           | X and Y axis of the chart                       |
| container          | .mantine-BarChart-container      | Recharts ResponsiveContainer component          |
| grid               | .mantine-BarChart-grid           | Recharts CartesianGrid component                |
| legend             | .mantine-BarChart-legend         | Legend root element                             |
| legendItem         | .mantine-BarChart-legendItem     | Legend item representing data series            |
| legendItemColor    | .mantine-BarChart-legendItemColor| Legend item color                               |
| legendItemName     | .mantine-BarChart-legendItemName | Legend item name                                |
| tooltip            | .mantine-BarChart-tooltip        | Tooltip root element                            |
| tooltipBody        | .mantine-BarChart-tooltipBody    | Tooltip wrapper around all items                |
| tooltipItem        | .mantine-BarChart-tooltipItem    | Tooltip item representing data series           |
| tooltipItemBody    | .mantine-BarChart-tooltipItemBody| Tooltip item wrapper around item color and name|
| tooltipItemColor   | .mantine-BarChart-tooltipItemColor| Tooltip item color                             |
| tooltipItemName    | .mantine-BarChart-tooltipItemName | Tooltip item name                              |
| tooltipItemData    | .mantine-BarChart-tooltipItemData | Tooltip item data                              |
| tooltipLabel       | .mantine-BarChart-tooltipLabel   | Label of the tooltip                            |
| referenceLine      | .mantine-BarChart-referenceLine  | Reference line                                  |
| axisLabel          | .mantine-BarChart-axisLabel      | X and Y axis labels                             |


### BarChart CSS variables

| Selector         | Variable             | Description                                      |
|:-----------------|:---------------------|:-------------------------------------------------|
| root             | --chart-grid-color   | Controls color of the grid and cursor lines      |
|                  | --chart-text-color   | Controls color of the axis labels                |
|                  | --chart-cursor-fill  | Controls fill color of the cursor line           |


### Keyword Arguments

#### BarChart

.. kwargs::BarChart



================================================
File: docs/barchart/barprops.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    orientation="vertical",
    yAxisProps={"width": 80},
    barProps={"radius": 50},
    series=[{"name": "Smartphones", "color": "violet.6"}],
)



================================================
File: docs/barchart/clickdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data

component = dmc.Group(
    [
        dmc.BarChart(
            id="figure-barchart",
            h=300,
            dataKey="month",
            data=data,
            type="stacked",
            series=[
                {"name": "Smartphones", "color": "violet.6"},
                {"name": "Laptops", "color": "blue.6"},
                {"name": "Tablets", "color": "teal.6"},
            ],
            withLegend=True,
            withTooltip=False,
        ),
        dmc.Text(id="clickdata-barchart1"),
        dmc.Text(id="clickdata-barchart2"),
    ]
)

@callback(
    Output("clickdata-barchart1", "children"),
    Output("clickdata-barchart2", "children"),
    Input("figure-barchart", "clickData"),
    Input("figure-barchart", "clickSeriesName"),
)
def update(data, name):
    return f"clickData:  {data}", f"clickSeriesName: {name}"




================================================
File: docs/barchart/data.py
================================================
data = [
    {"month": "January", "Smartphones": 1200, "Laptops": 900, "Tablets": 200},
    {"month": "February", "Smartphones": 1900, "Laptops": 1200, "Tablets": 400},
    {"month": "March", "Smartphones": 400, "Laptops": 1000, "Tablets": 200},
    {"month": "April", "Smartphones": 1000, "Laptops": 200, "Tablets": 800},
    {"month": "May", "Smartphones": 800, "Laptops": 1400, "Tablets": 1200},
    {"month": "June", "Smartphones": 750, "Laptops": 600, "Tablets": 1000},
]



================================================
File: docs/barchart/grid-text-color-light-dark.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    type="stacked",
    className="chart-grid-text-colors",
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/highlighthover.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    type="stacked",
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
    withLegend=True,
    withTooltip=False,
    highlightHover=True
)



================================================
File: docs/barchart/hoverdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data

component = dmc.Group(
    [
        dmc.BarChart(
            id="figure-barchart-hover",
            h=300,
            dataKey="month",
            data=data,
            type="stacked",
            series=[
                {"name": "Smartphones", "color": "violet.6"},
                {"name": "Laptops", "color": "blue.6"},
                {"name": "Tablets", "color": "teal.6"},
            ],
            withLegend=True,
            withTooltip=False,
        ),
        dmc.Text(id="hoverdata-barchart1"),
        dmc.Text(id="hoverdata-barchart2"),
    ]
)

@callback(
    Output("hoverdata-barchart1", "children"),
    Output("hoverdata-barchart2", "children"),
    Input("figure-barchart-hover", "hoverData"),
    Input("figure-barchart-hover", "hoverSeriesName"),
)
def update(data, name):
    return f"hoverData:  {data}", f"hoverSeriesName: {name}"




================================================
File: docs/barchart/interactive.py
================================================
import dash_mantine_components as dmc
from .data import data

from lib.configurator import Configurator

target = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
    tickLine="y",
)

configurator = Configurator(target)

configurator.add_segmented_control("tickLine", ["x", "y", "xy", "none"], "xy")
configurator.add_segmented_control("gridAxis", ["x", "y", "xy", "none"], "x")
configurator.add_switch("withXAxis", True)
configurator.add_switch("withYAxis", True)


component = configurator.panel



================================================
File: docs/barchart/legend.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    withLegend=True,
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/legendposition.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    withLegend=True,
    legendProps={"verticalAlign": "bottom", "height": 50},
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/percent.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    type="percent",
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/referencelines.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    withTooltip=False,
    referenceLines=[
        {
            "y": 130,
            "color": "red.5",
            "label": "Profit reached",
            "labelPosition": "insideTopRight",
        }
    ],
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/removetooltip.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    withTooltip=False,
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/serieslabels.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    type="stacked",
    withLegend=True,
    legendProps={"verticalAlign": "bottom"},
    series=[
        {"name": "Smartphones", "label": "Smartphones sales", "color": "violet.6"},
        {"name": "Laptops", "label": "Laptops sales", "color": "blue.6"},
        {"name": "Tablets", "label": "Tablets sales", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/stacked.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    type="stacked",
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/stacked_mixed.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    series=[
        {"name": "Smartphones", "color": "violet.6", "stackId": "a"},
        {"name": "Laptops", "color": "blue.6", "stackId": "b"},
        {"name": "Tablets", "color": "teal.6", "stackId": "b"},
    ],
)



================================================
File: docs/barchart/strokedasharray.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    type="stacked",
    strokeDasharray="15 15",
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/svg.py
================================================
import dash_mantine_components as dmc
from dash import html, dcc
from .data import data

# Define patterns for custom colors
pattern_definitions = dcc.Markdown('''
<svg>
  <defs>
    <pattern id="diagonalStripes" patternUnits="userSpaceOnUse" width="6" height="8" patternTransform="rotate(45)">
      <rect width="2" height="8" fill="rgba(0, 128, 128, 0.7)"></rect>
    </pattern>
    <pattern id="crosshatch" patternUnits="userSpaceOnUse" width="8" height="8">
      <path d="M 0 0 L 8 0 L 8 8 L 0 8 Z" fill="none" stroke="rgba(75, 0, 130, 0.7)" strokeWidth="1"></path>
      <path d="M 0 0 L 8 8" stroke="rgba(75, 0, 130, 0.7)" strokeWidth="1"></path>
      <path d="M 8 0 L 0 8" stroke="rgba(75, 0, 130, 0.7)" strokeWidth="1"></path>
    </pattern>
  </defs>
</svg>
''', dangerously_allow_html=True)

component = html.Div([
    pattern_definitions,
    dmc.BarChart(
        h=300,
        dataKey="month",
        data=data,
        type="stacked",
        series=[
            {"name": "Smartphones", "color": "url(#crosshatch)"},
            {"name": "Laptops", "color": "blue.6"},
            {"name": "Tablets", "color": "url(#diagonalStripes)"},
        ],
    )
])



================================================
File: docs/barchart/sync.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.Stack(
    [
        dmc.Text("Smartphone sales:"),
        dmc.BarChart(
            h=180,
            dataKey="month",
            data=data,
            series=[{"name": "Smartphones", "color": "violet.6"}],
            barChartProps={"syncId": "tech"},
        ),
        dmc.Text("Laptop sales"),
        dmc.BarChart(
            h=180,
            dataKey="month",
            data=data,
            series=[{"name": "Laptops", "color": "teal.6"}],
            barChartProps={"syncId": "tech"},
        ),
    ]
)



================================================
File: docs/barchart/tooltipanimation.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    tooltipAnimationDuration=200,
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/units.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    unit="$",
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/vertical.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    type="stacked",
    orientation="vertical",
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/waterfall.py
================================================
import dash_mantine_components as dmc

data = [
    {"item": "TaxRate", "Effective tax rate in %": 21, "color": "blue"},
    {"item": "Foreign inc.", "Effective tax rate in %": -15.5, "color": "teal"},
    {"item": "Perm. diff.", "Effective tax rate in %": -3, "color": "teal"},
    {"item": "Credits", "Effective tax rate in %": -3, "color": "teal"},
    {"item": "Loss carryf.", "Effective tax rate in %": -2, "color": "teal"},
    {"item": "Law changes", "Effective tax rate in %": 2, "color": "red"},
    {"item": "Reven. adj.", "Effective tax rate in %": 4, "color": "red"},
    {
        "item": "ETR",
        "Effective tax rate in %": 3.5,
        "color": "blue",
        "standalone": True,
    },
]

component = dmc.BarChart(
    h=300,
    data=data,
    dataKey="item",
    type="waterfall",
    series=[{"name": "Effective tax rate in %", "color": "blue"}],
    withLegend=True,
)



================================================
File: docs/barchart/xaxisoffset.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    type="stacked",
    xAxisProps={"padding": {"left": 30, "right": 30}},
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/xyaxis.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    type="stacked",
    tickLine="xy",
    yAxisProps={"tickMargin": 15, "orientation": "right"},
    xAxisProps={"tickMargin": 15, "orientation": "top"},
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/barchart/yaxisscale.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    yAxisProps={"domain": [0, 250]},
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)



================================================
File: docs/blockquote/blockquote.md
================================================
---
name: Blockquote
description: Use the Blockquote to display quotes with optional cite and icon.
endpoint: /components/blockquote
package: dash_mantine_components
category: Typography
---

.. toc::

### Simple Example

A simple blockquote can be created by just passing the main message and `cite` prop.

.. exec::docs.blockquote.simple

### With Icon

Icons can be provided via `icon` prop and its color can be customized using the `color` prop.
Here's an example using [DashIconify](/dash-iconify).

.. exec::docs.blockquote.icon

### Styles API

| Name   | Static selector           | Description        |
|:-------|:--------------------------|:-------------------|
| root   | .mantine-Blockquote-root  | Root element       |
| icon   | .mantine-Blockquote-icon  | Icon wrapper       |
| cite   | .mantine-Blockquote-cite  | Cite element       |

### Keyword Arguments

#### Blockquote

.. kwargs::Blockquote



================================================
File: docs/blockquote/icon.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Blockquote(
    "Doth mother know you weareth her drapes?",
    cite="- Ironman",
    icon=DashIconify(icon="codicon:flame", width=30),
    color="red",
)



================================================
File: docs/blockquote/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Blockquote(
    "Everything we hear is an opinion, not a fact. Everything we see is a perspective, not the truth.",
    cite="- Marcus Aurelius , Meditations",
)



================================================
File: docs/box/box.md
================================================
---
name: Box
description: Base component for all Mantine components
endpoint: /components/box
package: dash_mantine_components
category: Miscellaneous
---

.. toc::

### Usage

The `Box` component serves as a  base for all other components and can be used as a replacement for `html.Div` as a basic container.

The key advantage of using `Box` is its support for [Style Props](/style-props), allowing for cleaner, more readable styling directly within the component.

### Example
Both examples below produce the same result:

```python
# Using html.Div
html.Div(
    [
        # your content here
    ],
    style={"marginTop": 8, "padding": 24}
)

# Using dmc.Box with Style Props
dmc.Box(
    [
        # your content here
    ],
    mt=8, p=24
)

```

> Please see the [Style Props](/style-props) section for more information.


### Keyword Arguments

#### Box

.. kwargs::Box



================================================
File: docs/breadcrumbs/breadcrumbs.md
================================================
---
name: Breadcrumbs
description: Breadcrumbs is a navigation component that is used to indicate current page's location within a navigational hierarchy.
endpoint: /components/breadcrumbs
package: dash_mantine_components
category: Navigation
---

.. toc::

### Simple Example

Breadcrumbs accept any react nodes as children and places given separator (defaults to `/`) between them.

.. exec::docs.breadcrumbs.simple

### Styles API

| Name       | Static selector                 | Description                |
|:-----------|:--------------------------------|:---------------------------|
| root       | .mantine-Breadcrumbs-root       | Root element               |
| breadcrumb | .mantine-Breadcrumbs-breadcrumb | Breadcrumb item wrapper    |
| separator  | .mantine-Breadcrumbs-separator  | Separator between children |

### Keyword Arguments

#### Breadcrumbs

.. kwargs::Breadcrumbs



================================================
File: docs/breadcrumbs/simple.py
================================================
import dash_mantine_components as dmc
from dash import dcc, html

component = html.Div(
    [
        # default separator
        dmc.Breadcrumbs(
            children=[
                dcc.Link("Home", href="/"),
                dcc.Link("Dash Mantine Components", href="/"),
                dcc.Link("Breadcrumbs", href="/components/breadcrumbs"),
            ],
        ),
        dmc.Space(h=20),
        # separator provided
        dmc.Breadcrumbs(
            separator="→",
            children=[
                dmc.Anchor("Home", href="/", underline=False),
                dmc.Anchor("Dash Mantine Components", href="/", underline=False),
                dmc.Anchor(
                    "Breadcrumbs", href="/components/breadcrumbs", underline=False
                ),
            ],
        ),
    ]
)



================================================
File: docs/bubblechart/area-color-light-dark.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BubbleChart(
    h=60,
    data=data,
    range=[16, 225],
    label="Sales/hour",
    color="var(--chart-color)",
    dataKey={"x": "hour", "y": "index", "z": "value"}
)


================================================
File: docs/bubblechart/bubblechart.md
================================================
---
name: BubbleChart
description: Bubble Chart component
endpoint: /components/bubblechart
package: dash_mantine_components
category: Charts
---

.. toc::

### Usage


.. exec::docs.bubblechart.simple


### Data

Here is the data used in all the examples on this page:

```python
data = [
    {"hour": "08:00", "index": 1, "value": 150},
    {"hour": "10:00", "index": 1, "value": 166},
    {"hour": "12:00", "index": 1, "value": 170},
    {"hour": "14:00", "index": 1, "value": 150},
    {"hour": "16:00", "index": 1, "value": 200},
    {"hour": "18:00", "index": 1, "value": 400},
    {"hour": "20:00", "index": 1, "value": 100},
    {"hour": "22:00", "index": 1, "value": 160},
]
```

### Change color

You can reference colors from theme the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

.. exec::docs.bubblechart.interactive
    :code: false


### Change line color depending on color scheme
You can use CSS variables in color property. Learn more in the Theming section under [Colors.](/colors#colors-in-light-and-dark-mode)

Example of line color that is dark orange in light mode and lime in dark mode:


.. exec::docs.bubblechart.area-color-light-dark
    :code: false


.. sourcetabs::docs/bubblechart/area-color-light-dark.py, assets/examples/chart-color.css
    :defaultExpanded: true
    :withExpandedButton: true



### Grid and text colors
Use `--chart-grid-color` and `--chart-text-color` to change colors of grid lines and text within the chart. 
With CSS , you can change colors depending on color scheme.  Learn more in the Theming section under [Colors.](/colors#colors-in-light-and-dark-mode)

.. exec::docs.bubblechart.grid-text-color-light-dark
    :code: false


.. sourcetabs::docs/bubblechart/grid-text-color-light-dark.py, assets/examples/chart-grid-text-colors.css
    :defaultExpanded: true
    :withExpandedButton: true

If your application has only one color scheme, you can use `gridColor` and `textColor` props instead of CSS variables:

```python
dmc.BubbleChart(
    gridColor="gray.5",
    textColor="gray.9",
    h=60,
    data=data,
    range=[16, 225],
    label="Sales/hour",
    color="lime.6",
    dataKey={"x": "hour", "y": "index", "z": "value"}
)

```

### Remove tooltip
To remove tooltip, set `withTooltip=False`. It also removes the cursor line and disables interactions with the chart.

.. exec::docs.bubblechart.remove_tooltip

### clickData 

Use the `clickData` property in a callback to retrieve data from the most recent click event. 

.. exec::docs.bubblechart.clickdata

### hoverData 

Use the `hoverData` property in a callback to retrieve data from the most recent hover event. 

.. exec::docs.bubblechart.hoverdata

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### BubbleChart selectors 

| Selector | Static selector              | Description                |
|----------|------------------------------|----------------------------|
| root     | .mantine-BubbleChart-root    | Root element               |
| axis     | .mantine-BubbleChart-axis    | X and Y axis of the chart  |
| tooltip  | .mantine-BubbleChart-tooltip | Tooltip root element       |


#### BubbleChart CSS variables

| Selector | Variable             | Description                                 |
|----------|-----------------------|---------------------------------------------|
| root     | --chart-grid-color    | Controls color of the grid and cursor lines |
|          | --chart-text-color    | Controls color of the axis labels           |


### Keyword Arguments

#### BubbleChart

.. kwargs::BubbleChart



================================================
File: docs/bubblechart/clickdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data

component = dmc.Group(
    [
        dmc.BubbleChart(
            id="figure-bubblechart",
            gridColor="gray.5",
            textColor="gray.9",
            h=60,
            data=data,
            range=[16, 225],
            label="Sales/hour",
            color="lime.6",
            dataKey={"x": "hour", "y": "index", "z": "value"}
        ),
        dmc.Text(id="clickdata-bubblechart"),

    ]
)

@callback(
    Output("clickdata-bubblechart", "children"),
    Input("figure-bubblechart", "clickData"),
)
def update(data):
    return f"clickData:  {data}"




================================================
File: docs/bubblechart/data.py
================================================
data = [
    {"hour": "08:00", "index": 1, "value": 150},
    {"hour": "10:00", "index": 1, "value": 166},
    {"hour": "12:00", "index": 1, "value": 170},
    {"hour": "14:00", "index": 1, "value": 150},
    {"hour": "16:00", "index": 1, "value": 200},
    {"hour": "18:00", "index": 1, "value": 400},
    {"hour": "20:00", "index": 1, "value": 100},
    {"hour": "22:00", "index": 1, "value": 160},
]



================================================
File: docs/bubblechart/grid-text-color-light-dark.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BubbleChart(
    h=60,
    data=data,
    range=[16, 225],
    label="Sales/hour",
    className="chart-grid-text-colors",
    dataKey={"x": "hour", "y": "index", "z": "value"}
)



================================================
File: docs/bubblechart/hoverdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data

component = dmc.Group(
    [
        dmc.BubbleChart(
            id="figure-bubblechart-hover",
            gridColor="gray.5",
            textColor="gray.9",
            h=60,
            data=data,
            range=[16, 225],
            label="Sales/hour",
            color="lime.6",
            dataKey={"x": "hour", "y": "index", "z": "value"}
        ),
        dmc.Text(id="hoverdata-bubblechart"),

    ]
)

@callback(
    Output("hoverdata-bubblechart", "children"),
    Input("figure-bubblechart-hover", "hoverData"),
)
def update(data):
    return f"hoverData:  {data}"




================================================
File: docs/bubblechart/interactive.py
================================================
import dash_mantine_components as dmc
from .data import data

from lib.configurator import Configurator

target = dmc.BubbleChart(
    gridColor="gray.5",
    textColor="gray.9",
    h=60,
    data=data,
    range=[16, 225],
    label="Sales/hour",
    color="lime.6",
    dataKey={"x": "hour", "y": "index", "z": "value"}
)

configurator = Configurator(target)


configurator.add_colorpicker("color", "blue")

component = configurator.panel



================================================
File: docs/bubblechart/remove_tooltip.py
================================================
import dash_mantine_components as dmc
from .data import data


component = dmc.BubbleChart(
    gridColor="gray.5",
    textColor="gray.9",
    h=60,
    data=data,
    range=[16, 225],
    label="Sales/hour",
    color="lime.6",
    dataKey={"x": "hour", "y": "index", "z": "value"},
    withTooltip=False
)


================================================
File: docs/bubblechart/simple.py
================================================
import dash_mantine_components as dmc
from .data import data


component = dmc.BubbleChart(
    gridColor="gray.5",
    textColor="gray.9",
    h=60,
    data=data,
    range=[16, 225],
    label="Sales/hour",
    color="lime.6",
    dataKey={"x": "hour", "y": "index", "z": "value"}
)


================================================
File: docs/burger/burger.md
================================================
---
name: Burger
description: Open/close navigation button. Use the dmc.Burger component to toggle navigation menus.
endpoint: /components/burger
package: dash_mantine_components
category: Navigation
---

.. toc::

### Simple Example

Burger component renders open/close menu button. If it's burger state is clicked, the `opened` property is set to `True`,
and if it's cross state is clicked, the `opened` property is set to `False`.

.. exec::docs.burger.simple

### Size and Line Size

Use `size` prop to control the `Burger` width and height, numbers are converted to rem, 'md' by default.
Use the `lineSize` prop to control height of lines, by default calculated based on `size` prop.  

.. exec::docs.burger.interactive
    :code: false

```python
dmc.Burger(id="burger-button", opened=False, lineSize=2, size="md")
```

### Colors

.. exec::docs.burger.color

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### Burger Selectors

| Selector | Static selector         | Description                           |
|----------|--------------------------|---------------------------------------|
| root     | .mantine-Burger-root     | Root element (button)                 |
| burger   | .mantine-Burger-burger   | Inner element that contains burger lines |

#### Burger CSS Variables

| Selector | Variable                            | Description                                |
|----------|-------------------------------------|--------------------------------------------|
| root     | --burger-line-size                  | Controls height of lines                   |
|          | --burger-color                      | Controls background-color of lines         |
|          | --burger-size                       | Controls width and height of the button    |
|          | --burger-transition-duration        | Controls transition-duration of lines      |
|          | --burger-transition-timing-function | Controls transition-timing-function of lines |

#### Burger Data Attributes

| Selector | Attribute    | Condition          |
|----------|--------------|--------------------|
| burger   | data-opened  | `opened` prop is set |

### Keyword Arguments

#### Burger

.. kwargs::Burger



================================================
File: docs/burger/color.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    [
        dmc.Burger(),
        dmc.Burger(color="red"),
        dmc.Burger(color="green"),
    ]
)



================================================
File: docs/burger/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-burger"

target = dmc.Center(dmc.Burger(size="md", lineSize=2, id=TARGET_ID))

configurator = Configurator(target, TARGET_ID)

configurator.add_slider("size", "md")
configurator.add_number_slider("lineSize",2, min=1, max=10)

component = configurator.panel



================================================
File: docs/burger/simple.py
================================================
import dash_mantine_components as dmc
from dash import Input, Output, callback, html

component = html.Div(
    [dmc.Burger(id="burger-button", opened=False), dmc.Text(id="burger-state", mt="md")]
)


@callback(Output("burger-state", "children"), Input("burger-button", "opened"))
def is_open(opened):
    return str(opened)



================================================
File: docs/button/button.md
================================================
---
name: Button
description: DMC alternative to html.Button.
endpoint: /components/button
package: dash_mantine_components
category: Buttons
---

.. toc::

### Introduction

.. exec::docs.button.interactive
    :code: false

### Variant

.. exec::docs.button.variant

#### Gradient Variant

To use gradient as Button background:

* set `variant` prop to "gradient"
* set `gradient` prop to `{ 'from': 'color-from', 'to': 'color-to', 'deg': 135}`, where

  * `color-from` and `color-to` are colors from Mantine's theme colors.
  * `deg` is linear gradient deg.

.. exec::docs.button.gradient

### Left and right sections  

`leftSection` and `rightSection` allow adding icons or any other element to the left and right side of the button.
When a section is added, padding on the corresponding side is reduced.

Note that `leftSection` and `rightSection` are flipped in RTL mode (`leftSection` is displayed on the right and `rightSection` is displayed on the left).

.. exec::docs.button.icons

### Sections position
`justify` prop sets `justify-content` of inner element. You can use it to change the alignment of left and right sections.
For example, to spread them across the button set `justify='space-between'`.

If you need to align just one section to the side of the button, set `justify` to `space-between` and add empty `html.Span()` to the opposite section.


.. exec::docs.button.interactive-justify
    :code: false

```python
import dash_mantine_components as dmc
from dash_iconify import DashIconify
from dash import html

icon = DashIconify(icon="tabler:photo", width=14)

component = dmc.Stack(
    [
        dmc.Button(
            "Button label",
            justify="center",
            fullWidth=True,
            leftSection=icon,
            rightSection=icon,
            variant="default",
        ),
        dmc.Button(
            "Button label",
            justify="center",
            fullWidth=True,
            leftSection=icon,
            variant="default",
            mt="md",
        ),
        dmc.Button(
            "Button label",
            justify="center",
            fullWidth=True,
            rightSection=icon,
            variant="default",
            mt="md",
        ),
        dmc.Button(
            "Button label",
            justify="center",
            fullWidth=True,
            leftSection=html.Span(),  # Empty spacer
            rightSection=icon,
            variant="default",
            mt="md",
        ),
    ]
)
```

### Loading State

Starting with dash version 2.9.2, you can use duplicate callback outputs. Here's an example that lets you easily show
loading state while the callback is running.   Note that the button is disabled automatically when `loading=True`

.. exec::docs.button.loading

### Loader Props

You can customize [Loader](/components/loader) with `loaderProps` prop, it accepts all props that Loader component has:

.. exec::docs.button.loader-props

### Colors

```python
import dash_mantine_components as dmc

dmc.Button("Settings", color="red")
```

.. exec::docs.button.colors
    :code: false

### Radius and Size

Button's radius and size can be customized by setting `radius` and `size` props. Both props have predefined values:
xs, sm, md, lg, xl. Alternatively, you can use a number to set radius, size in px.

```python
import dash_mantine_components as dmc

dmc.Group(
    [
        dmc.Button("Connect to Database", size="sm"),
        dmc.Button("Notify", radius="xl"),
        dmc.Button("Settings", size=20),
    ]
)
```

### Compact Size

.. exec::docs.button.compact

### Full Width Button

Pass `fullWidth=True` for a full width button.

.. exec::docs.button.full


### Add custom variants

To add new `Button` variants, define a class in the `.css` file using the `data-variant` attribute. Add the new variants to
the `theme` prop in the `MantineProvider` so they available in all `Button` components in your app.


Example:
 - [View Code on GitHub](https://github.com/snehilvj/dmc-docs/tree/main/help_center/theme/button_custom_variants.py)  
 - [Live Demo on PyCafe](https://py.cafe/dash.mantine.components/button-custom-variants-demo-0)  
 

The example includes the following in a .css file in /assets
```css
.button-custom-variants {
  &[data-variant='danger'] {
    background-color: var(--mantine-color-red-9);
    color: var(--mantine-color-red-0);
  }

  &[data-variant='primary'] {
    background: linear-gradient(45deg, #4b6cb7 10%, #253b67 90%);
    color: var(--mantine-color-white);
    border-width: 0;
  }
}
```

The example adds the custom variants to the `theme` prop in `Mantine Provider`

```python
app.layout = dmc.MantineProvider(
   children=[# your app content],
   theme={
      "components": {
           "Button": {"classNames": {"root": "button-custom-variants"}}
       }
   }
)
```


### Button Group

.. exec::docs.button.group

Note that you must not wrap child `Button` components with any additional elements:

```python
dmc.ButtonGroup([
    html.Div(dmc.Button("This will not work")),
    dmc.Button("Buttons will have incorrect borders")
])
```

### Styles API

#### Button Selectors

| Selector | Static selector          | Description                                        |
|----------|---------------------------|----------------------------------------------------|
| root     | .mantine-Button-root      | Root element                                       |
| loader   | .mantine-Button-loader    | Loader component, displayed only when `loading` prop is set |
| inner    | .mantine-Button-inner     | Contains all other elements, child of the root element |
| section  | .mantine-Button-section   | Left and right sections of the button             |
| label    | .mantine-Button-label     | Button children                                   |

#### Button CSS Variables

| Selector | Variable                  | Description                                       |
|----------|---------------------------|---------------------------------------------------|
| root     | --button-bg               | Controls background                               |
|          | --button-bd               | Controls border                                   |
|          | --button-hover            | Controls background when hovered                 |
|          | --button-color            | Controls text color                               |
|          | --button-hover-color      | Controls text color when hovered                 |
|          | --button-radius           | Controls border-radius                            |
|          | --button-height           | Controls height of the button                     |
|          | --button-padding-x        | Controls horizontal padding of the button         |
|          | --button-fz               | Controls font-size of the button                  |
|          | --button-justify          | Controls `justify-content` of the inner element   |

#### Button Data Attributes

| Selector       | Attribute             | Condition               | Value                           |
|----------------|------------------------|--------------------------|---------------------------------|
| root           | data-disabled          | `disabled` prop is set   | –                               |
| root, label    | data-loading           | `loading` prop is set    | –                               |
| root           | data-block             | `fullWidth` prop is set  | –                               |
| root           | data-with-left-section | `leftSection` is set     | –                               |
| root           | data-with-right-section| `rightSection` is set    | –                               |
| section        | data-position          | –                        | Section position: left or right |

#### Button.Group Selectors

| Selector | Static selector            | Description               |
|----------|-----------------------------|---------------------------|
| group    | .mantine-ButtonGroup-group  | Root element              |

#### Button.Group CSS Variables

| Selector | Variable                  | Description                               |
|----------|---------------------------|-------------------------------------------|
| group    | --button-border-width     | Border-width of child Button components   |

#### Button.Group Data Attributes

| Selector | Attribute        | Value                   |
|----------|-------------------|-------------------------|
| group    | data-orientation  | Value of `orientation` prop |



### Keyword Arguments

#### Button

.. kwargs::Button

#### ButtonGroup

.. kwargs::ButtonGroup



================================================
File: docs/button/colors.py
================================================
import dash_mantine_components as dmc

colors = [
    "gray",
    "red",
    "pink",
    "grape",
    "violet",
    "indigo",
    "blue",
    "lime",
    "yellow",
    "orange",
]

component = dmc.Group(
    [dmc.Button(color.title(), color=color) for color in colors],
)



================================================
File: docs/button/compact.py
================================================
import dash_mantine_components as dmc

sizes = ["xs", "sm", "md", "lg", "xl"]

component = dmc.Stack(
    [
        dmc.Group(
            [dmc.Button(f"Normal {size}", size=size) for size in sizes],
        ),
        dmc.Group(
            [dmc.Button(f"Compact {size}", size=f"compact-{size}") for size in sizes],
        ),
    ]
)



================================================
File: docs/button/full.py
================================================
import dash_mantine_components as dmc

component = dmc.Button("Click to open the app", fullWidth=True, variant="outline")



================================================
File: docs/button/gradient.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    children=[
        dmc.Button(
            "Indigo cyan",
            variant="gradient",
            gradient={"from": "indigo", "to": "cyan"},
        ),
        dmc.Button(
            "Lime green",
            variant="gradient",
            gradient={"from": "teal", "to": "lime", "deg": 105},
        ),
        dmc.Button(
            "Teal blue",
            variant="gradient",
            gradient={"from": "teal", "to": "blue", "deg": 60},
        ),
        dmc.Button(
            "Orange red",
            variant="gradient",
            gradient={"from": "orange", "to": "red"},
        ),
        dmc.Button(
            "Grape pink",
            variant="gradient",
            gradient={"from": "grape", "to": "pink", "deg": 35},
        ),
    ]
)



================================================
File: docs/button/group.py
================================================
import dash_mantine_components as dmc

component = dmc.ButtonGroup(
    [
        dmc.Button("First", variant="outline"),
        dmc.Button("Second", variant="outline"),
        dmc.Button("Third", variant="outline"),
    ]
)



================================================
File: docs/button/icons.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Group(
    [
        dmc.Button(
            "Connect to Database",
            leftSection=DashIconify(icon="fluent:database-plug-connected-20-filled"),
        ),
        dmc.Button(
            "Load Data",
            variant="subtle",
            rightSection=DashIconify(icon="logos:twitter"),
            color="blue",
        ),
        dmc.Button(
            "Settings",
            variant="outline",
            leftSection=DashIconify(icon="fluent:settings-32-regular"),
        ),
    ]
)



================================================
File: docs/button/interactive-justify.py
================================================

import dash_mantine_components as dmc
from dash_iconify import DashIconify
from dash import html, Input, Output, callback, ALL

icon = DashIconify(icon="tabler:photo", width=14)

component = dmc.Box(
    [
        dmc.Text("Update justify prop:"),
        dmc.SegmentedControl(
            data=["center", "space-between"],
            value="center",
            id="button-justify",
            mb="lg"
        ),

        dmc.Button(
            "Button label",
            justify="center",
            fullWidth=True,
            leftSection=icon,
            rightSection=icon,
            variant="default",
            id={"type":"button-justify", "index": 1}
        ),
        dmc.Button(
            "Button label",
            justify="center",
            fullWidth=True,
            leftSection=icon,
            variant="default",
            mt="md",
            id={"type": "button-justify", "index": 2}
        ),
        dmc.Button(
            "Button label",
            justify="center",
            fullWidth=True,
            rightSection=icon,
            variant="default",
            mt="md",
            id={"type": "button-justify", "index": 3}
        ),
        dmc.Button(
            "Button label",
            justify="center",
            fullWidth=True,
            leftSection=html.Span(),  # Empty spacer
            rightSection=icon,
            variant="default",
            mt="md",
            id={"type": "button-justify", "index": 4}
        ),
    ]
)


@callback(
    Output({"type": "button-justify", "index": ALL}, "justify"),
    Input("button-justify", "value"),
)
def update_figure(value):
    return [value] * 4




================================================
File: docs/button/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "button-interactive"

target = dmc.Center(dmc.Button("Settings", id=TARGET_ID))

configurator = Configurator(target, TARGET_ID)

configurator.add_select(
    "variant",
    ["link", "filled", "outline", "light", "gradient", "subtle", "default"],
    "filled",
)
configurator.add_colorpicker("color", "indigo")
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "sm")
configurator.add_switch("loading", False)
configurator.add_switch("disabled", False)

component = configurator.panel



================================================
File: docs/button/justify.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify
from dash import html

icon = DashIconify(icon="tabler:photo", width=14)

component = dmc.Stack(
    [
        dmc.Button(
            "Button label",
            justify="center",
            fullWidth=True,
            leftSection=icon,
            rightSection=icon,
            variant="default",
        ),
        dmc.Button(
            "Button label",
            justify="center",
            fullWidth=True,
            leftSection=icon,
            variant="default",
            mt="md",
        ),
        dmc.Button(
            "Button label",
            justify="center",
            fullWidth=True,
            rightSection=icon,
            variant="default",
            mt="md",
        ),
        dmc.Button(
            "Button label",
            justify="center",
            fullWidth=True,
            leftSection=html.Span(),  # Empty spacer
            rightSection=icon,
            variant="default",
            mt="md",
        ),
    ]
)


================================================
File: docs/button/loader-props.py
================================================
import dash_mantine_components as dmc

component = dmc.Button("Loading Props", loaderProps={"type": "dots"}, loading=True)



================================================
File: docs/button/loading.py
================================================
import uuid
from time import sleep

import dash_mantine_components as dmc
from dash import html, callback, Output, Input, clientside_callback
from dash_iconify import DashIconify

component = html.Div(
    [
        dmc.Button(
            "Load from database",
            id="loading-button",
            leftSection=DashIconify(icon="fluent:database-plug-connected-20-filled"),
        ),
        dmc.Text(id="clicked-output", mt=10),
    ]
)

clientside_callback(
    """
    function updateLoadingState(n_clicks) {
        return true
    }
    """,
    Output("loading-button", "loading", allow_duplicate=True),
    Input("loading-button", "n_clicks"),
    prevent_initial_call=True,
)


@callback(
    Output("clicked-output", "children"),
    Output("loading-button", "loading"),
    Input("loading-button", "n_clicks"),
    prevent_initial_call=True,
)
def load_from_db(n_clicks):
    sleep(3)
    return str(uuid.uuid4()), False



================================================
File: docs/button/variant.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    [
        dmc.Button("Default button"),
        dmc.Button("Subtle button", variant="subtle"),
        dmc.Button("Gradient button", variant="gradient"),
        dmc.Button("Filled button", variant="filled"),
        dmc.Button("Light button", variant="light"),
        dmc.Button("Outline button", variant="outline"),
    ]
)



================================================
File: docs/card/border.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

urls = [
    "https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-1.png",
    "https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-2.png",
    "https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-3.png",
]

images = [dmc.Image(radius="sm", src=url) for url in urls]

component = dmc.Card(
    children=[
        dmc.CardSection(
            dmc.Group(
                children=[
                    dmc.Text("Review Pictures", fw=500),
                    dmc.ActionIcon(
                        DashIconify(icon="carbon:overflow-menu-horizontal"),
                        color="gray",
                        variant="transparent",
                    ),
                ],
                justify="space-between",
            ),
            withBorder=True,
            inheritPadding=True,
            py="xs",
        ),
        dmc.Text(
            children=[
                dmc.Text(
                    "200+ images uploaded",
                    c="blue",
                    style={"display": "inline"},
                ),
                " since last visit, review them to select which one should be added to your gallery",
            ],
            mt="sm",
            c="dimmed",
            size="sm",
        ),
        dmc.CardSection(
            dmc.Image(
                src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-4.png",
                mt="sm",
            ),
        ),
        dmc.CardSection(
            children=[
                dmc.SimpleGrid(cols=3, children=[i for i in images]),
            ],
            inheritPadding=True,
            mt="sm",
            pb="md",
        ),
    ],
    withBorder=True,
    shadow="sm",
    radius="md",
    w=350,
)



================================================
File: docs/card/card.md
================================================
---
name: Card
description: Use Card component to hold anything from images to headlines, supporting text, buttons, lists, etc. in a contained unit.
endpoint: /components/card
package: dash_mantine_components
category: Data Display
---

.. toc::

### Simple Example 

Card component is a wrapper around Paper component with styles for CardSection component.

.. exec::docs.card.simple

### Card Section

CardSection is a special component that is used to remove Card padding from its children while other elements still have horizontal spacing. CardSection works the following way:

1. If component is a first child in Card then it has negative top, left and right margins.
2. If it is a last child in Card then it has negative bottom, left and right margins.
3. If it is in the middle then only left and right margins will be negative.

##### Border and Padding in CardSection

`withBorder` property will add top and bottom border to CardSection depending on its position relative to other content and sections.
`inheritPadding` property will add the same left and right padding to CardSection as set in Card component.

.. exec::docs.card.border

### Styles API

| Name    | Static selector       | Description                 |
|:--------|:----------------------|:----------------------------|
| root    | .mantine-Card-root    | Root element                |
| section | .mantine-Card-section | `Card.Section` root element |

### Keyword Arguments

#### Card

.. kwargs::Card

#### CardSection

.. kwargs::CardSection



================================================
File: docs/card/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Card(
    children=[
        dmc.CardSection(
            dmc.Image(
                src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-8.png",
                h=160,
                alt="Norway",
            )
        ),
        dmc.Group(
            [
                dmc.Text("Norway Fjord Adventures", fw=500),
                dmc.Badge("On Sale", color="pink"),
            ],
            justify="space-between",
            mt="md",
            mb="xs",
        ),
        dmc.Text(
            "With Fjord Tours you can explore more of the magical fjord landscapes with tours and activities on and "
            "around the fjords of Norway",
            size="sm",
            c="dimmed",
        ),
        dmc.Button(
            "Book classic tour now",
            color="blue",
            fullWidth=True,
            mt="md",
            radius="md",
        ),
    ],
    withBorder=True,
    shadow="sm",
    radius="md",
    w=350,
)



================================================
File: docs/carousel/active.py
================================================
import dash_mantine_components as dmc
from dash import Input, Output, callback

component = dmc.Box(
    [
        dmc.Carousel(
            [
                dmc.CarouselSlide(
                    dmc.Center(f"Slide-{n+1}", bg="blue", c="white", p=60)
                )
                for n in range(6)
            ],
            id="carousel-active",
            loop=True,
            autoplay={
                "delay": 2000,
                "stopOnMouseEnter": True,
                "stopOnInteraction": False,
            },
        ),
        dmc.Pagination(id="pagination", total=6, value=1, withControls=False),
    ]
)


@callback(Output("pagination", "value"), Input("carousel-active", "active"))
def update(n):
    return n + 1



================================================
File: docs/carousel/autoplay.py
================================================
import dash
import dash_mantine_components as dmc
from dash import html, callback, Input, Output

component = html.Div([
    dmc.Carousel(
        [
            dmc.CarouselSlide(dmc.Center("Slide-1", bg="blue", c="white", p=60)),
            dmc.CarouselSlide(dmc.Center("Slide-2", bg="blue", c="white", p=60)),
            dmc.CarouselSlide(dmc.Center("Slide-3", bg="blue", c="white", p=60)),
        ],
        id="carousel-autoplay",
        mt="sm",
        loop=True,
        autoplay=True,  # Default delay is 4000ms
    )
])



================================================
File: docs/carousel/autoplay_props.py
================================================
import dash_mantine_components as dmc

component = dmc.Carousel(
    [
        dmc.CarouselSlide(dmc.Center("Slide-1", bg="blue", c="white", p=60)),
        dmc.CarouselSlide(dmc.Center("Slide-2", bg="blue", c="white", p=60)),
        dmc.CarouselSlide(dmc.Center("Slide-3", bg="blue", c="white", p=60)),
    ],
    id="carousel-autoplay-props",
    loop=True,
    autoplay={"delay": 2000, "stopOnMouseEnter": True, "stopOnInteraction": False},
)



================================================
File: docs/carousel/autoscroll.py
================================================
import dash_mantine_components as dmc

component = dmc.Carousel(
    [
        dmc.CarouselSlide(dmc.Center("Slide-1", bg="blue", c="white", p=60)),
        dmc.CarouselSlide(dmc.Center("Slide-2", bg="blue", c="white", p=60)),
        dmc.CarouselSlide(dmc.Center("Slide-3", bg="blue", c="white", p=60)),
    ],
    id="carousel-autoscroll",
    loop=True,
    autoScroll=True,
)



================================================
File: docs/carousel/cards.py
================================================
import dash_mantine_components as dmc
from dash import html

data = [
    {
        "image": "https://images.unsplash.com/photo-1508193638397-1c4234db14d8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80",
        "title": "Best forests to visit in North America",
        "category": "NATURE",
    },
    {
        "image": "https://images.unsplash.com/photo-1559494007-9f5847c49d94?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80",
        "title": "Hawaii beaches review: better than you think",
        "category": "BEACH",
    },
    {
        "image": "https://images.unsplash.com/photo-1608481337062-4093bf3ed404?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80",
        "title": "Mountains at night: 12 best locations to enjoy the view",
        "category": "NATURE",
    },
    {
        "image": "https://images.unsplash.com/photo-1510798831971-661eb04b3739?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80",
        "title": "Best places to visit this winter",
        "category": "TOURISM",
    },
    {
        "image": "https://images.unsplash.com/photo-1582721478779-0ae163c05a60?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=400&q=80",
        "title": "Active volcanos reviews: travel at your own risk",
        "category": "NATURE",
    },
]


def make_card(image, title, category):
    return dmc.Paper(
        [
            html.Div(
                [
                    dmc.Text(category, c="white", opacity=0.7, fw=700),
                    dmc.Title(title, lh=1.2, order=3, mt="xs", fw=900, c="white"),
                ]
            ),
            dmc.Button("Read Article", variant="white", color="dark"),
        ],
        shadow="md",
        p="xl",
        radius="md",
        style={
            "backgroundImage": f"url({image})",
            "height": 440,
            "display": "flex",
            "flexDirection": "column",
            "justifyContent": "space-between",
            "alignItems": "flex-start",
            "backgroundSize": "cover",
            "backgroundPosition": "center",
        },
    )


component = dmc.Carousel(
    [dmc.CarouselSlide(make_card(d["image"], d["title"], d["category"])) for d in data],
    id="carousel-cards",
    align="start",
    w=400,
    loop=True,
)



================================================
File: docs/carousel/carousel.md
================================================
---
name: Carousel
description: Use the Carousel component to cycle through elements like a slideshow.
endpoint: /components/carousel
package: dash_mantine_components
category: Data Display
---

.. toc::



### CSS Extensions

.. admonition::CSS Extensions
   :icon: radix-icons:info-circled
   :color: red

   Carousel require additional CSS styles.

The Carousel component require an additional CSS stylesheet.  See the [Getting Started](/getting-started) section for more information.

Be sure to include:
```python
app = Dash(external_stylesheets=[dmc.styles.CAROUSEL])
```
Or, if you want to include all optional stylesheets:
```python
app = Dash(external_stylesheets=dmc.styles.ALL)
```


### Simple Example

.. exec::docs.carousel.simple


### Options


.. exec::docs.carousel.interactive
    :code: false

### Size and Gap

Set `slideSize` and `slideGap` on `Carousel` component to control size and gap of every slide:

.. exec::docs.carousel.size_gap

### Responsive styles

`slideSize` and `slideGap` props work the same way as `style` props, you can pass an object with values for different breakpoints:


.. exec::docs.carousel.responsive

### Drag free

`dragFree` will disable slides snap points – user will be able to stop dragging at any position:

.. exec::docs.carousel.drag_free

### Vertical orientation

Carousel with `orientation="vertical"` requires `height` prop to be set:

.. exec::docs.carousel.vertical


### Controls icons
You can replace default next/previous controls icons with any component:


.. exec::docs.carousel.controls_icons


### Autoscroll
Enable autoscroll by setting `autoScroll=True` or by passing in a `dict` with options. Refer to [Embla Carousel Auto Scroll Options](https://www.embla-carousel.com/plugins/auto-scroll/#options) to learn more.

.. exec::docs.carousel.autoscroll

### Autoplay
Enable autoplay by setting `autoplay=True` or by passing in a `dict` with options. Refer to [Embla Carousel Autoplay Options](https://www.embla-carousel.com/plugins/autoplay/#options) to learn more.

.. exec::docs.carousel.autoplay

Here’s an example of passing props to the Embla component. In this example, the `delay` is set to 2000ms, and autoplay pauses when hovering over a slide:

```python
autoplay={"delay": 2000, "stopOnMouseEnter": True, "stopOnInteraction":False}

```

### Carousel Styles API

Carousel supports Styles API, you can add styles to any inner element of the component with `classNames` prop. Refer to the  [Styles API documentation](/styles-api) to learn more.

### Carousel Indicator styles
This example styles the indicators to emphasize the active slide.

.. exec::docs.carousel.indicator_styles

Put the following in a .css file in the `assets` folder:

```css
.dmc-indicator {
  width: 12px;
  height: 4px;
  transition: width 250ms ease;

  &[data-active] {
    width: 40px;
  }
}
```

### Hide inactive controls

.. exec::docs.carousel.hide_inactive_controls

Put the following in a .css file in the `assets` folder:

```css
.dmc-control {
  &[data-inactive] {
    opacity: 0;
    cursor: default;
  }
}
```

### Show controls on hover

.. exec::docs.carousel.show_controls_on_hover

Put the following in a .css file in the `assets` folder:
```css

.dmc-controls {
  transition: opacity 150ms ease;
  opacity: 0;
}

.dmc-root {
  &:hover {
    .dmc-controls {
      opacity: 1;
    }
  }
}
```

### Set initial slide

To set the initial slide to display, use the index number of the slide.

.. exec::docs.carousel.initial

### Container queries
To use container queries instead of media queries, set `type="container"`. With container queries, slides size and gap 
will be adjusted based on the container width, not the viewport width.

Note that, when using container queries, `slideSize` and `slideGap` props cannot reference `theme.breakpoints` values 
in keys. It is required to use exact `px` or `em` values.

To see how the slides size and gap changes, resize the root element of the demo with the resize handle located at the
bottom right corner of the demo:


.. exec::docs.carousel.containerquery

### Active prop for callbacks

The `active` prop represents the index of the currently displayed slide and can be used to trigger Dash callbacks. Note
that this prop is read-only. To set the initially displayed slide, use the `initialSlide` prop instead.


### Example Image Carousel

.. exec::docs.carousel.images


### Example Card Carousel

.. exec::docs.carousel.cards

### Limitation: Carousel in Tabs

When a Carousel is placed inside a tab, it may not render correctly. For more details, refer to [GitHub Issue #299]((https://github.com/snehilvj/dash-mantine-components/issues/299). 
As a workaround, you can update the carousel within the tabs using a callback.

Be sure to give a unique id to each carousel in the app.


.. exec::docs.carousel.tabs


### Limitation: draggable and speed Props
As of DMC v0.14.7, the `draggable` and `speed` props no longer work because Embla Carousel v8 has removed them. These props
will be removed in DMC v1.0.0


### Styles API

#### Carousel selectors

| Selector   | Static selector              | Description                                              |
|------------|------------------------------|----------------------------------------------------------|
| root       | .mantine-Carousel-root       | Root element                                             |
| slide      | .mantine-Carousel-slide      | Carousel.Slide root element                              |
| container  | .mantine-Carousel-container  | Slides container                                         |
| viewport   | .mantine-Carousel-viewport   | Main element, contains slides container and all controls |
| controls   | .mantine-Carousel-controls   | Next/previous controls container                         |
| control    | .mantine-Carousel-control    | Next/previous control                                    |
| indicators | .mantine-Carousel-indicators | Indicators container                                     |
| indicator  | .mantine-Carousel-indicator  | Indicator button                                         |

#### Carousel CSS variables

| Selector | Variable                   | Description                                                |
|----------|----------------------------|------------------------------------------------------------|
| root     | --carousel-control-size    | Controls `width` and `height` of the next/previous buttons |
| root     | --carousel-controls-offset | Controls offsets of the next/previous buttons              |
| root     | --carousel-height          | Controls height of the carousel                            |

#### Carousel data attributes

| Selector   | Attribute                    | Condition                                | Value                        |
|------------|------------------------------|------------------------------------------|------------------------------|
| root       | data-orientation             | –                                        | Value of `orientation` prop  |
| root       | data-include-gap-in-size     | `includeGapInSize` prop is set           | –                            |
| control    | data-inactive                | No previous/next slides are available    | –                            |
| indicator  | data-active                  | Associated slide is active               | –                            |



### Keyword Arguments

#### Carousel

.. kwargs::Carousel


#### CarouselSlide

.. kwargs::CarouselSlide




================================================
File: docs/carousel/containerquery.py
================================================
import dash_mantine_components as dmc
from dash import html

component = html.Div(
    # Wrapper div is added for demonstration purposes only,
    #  It is not required in real projects
    dmc.Carousel(
        [
            dmc.CarouselSlide(dmc.Center("Slide-1", bg="blue", c="white", p=60)),
            dmc.CarouselSlide(dmc.Center("Slide-2", bg="blue", c="white", p=60)),
            dmc.CarouselSlide(dmc.Center("Slide-3", bg="blue", c="white", p=60)),
        ],
        id="carousel-container",
        type="container",
        slideSize = {"base": '100%', '300px': '50%', '500px': '33.333333%'},
        slideGap = {"base": 0, '300px': 'md', '500px': 'lg'},
        loop=True,
        align = "start"
    ),
    style={
        "resize": 'horizontal',
        "overflow": 'hidden',
        "maxWidth": '100%',
        "minWidth": 250,
        "padding": 10,
      }
)



================================================
File: docs/carousel/controls_icons.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Carousel(
    [
        dmc.CarouselSlide(
            dmc.Center(f"Slide {i}", ta="center", bg="blue", c="white", h="100%")
        )
        for i in range(1, 7)
    ],
    id="carousel-controls_icons",
    withIndicators=True,
    height=180,
    nextControlIcon=DashIconify(icon="bi:arrow-right-circle-fill", width=30),
    previousControlIcon=DashIconify(icon="bi:arrow-left-circle-fill", width=30),
    loop=True,
)



================================================
File: docs/carousel/drag_free.py
================================================
import dash_mantine_components as dmc

component = dmc.Carousel(
    [
        dmc.CarouselSlide(
            dmc.Center(f"Slide {i}", ta="center", bg="blue", c="white", h="100%")
        )
        for i in range(1, 7)
    ],
    id="carousel-drag-free",
    withIndicators=True,
    height=200,
    dragFree=True,
    slideGap="md",
    loop=True,
    align="start",
)



================================================
File: docs/carousel/hide_inactive_controls.py
================================================
import dash_mantine_components as dmc

component = dmc.Carousel(
    [
        dmc.CarouselSlide(dmc.Center(f"Slide {i}", bg="blue", c="white", h="100%"))
        for i in range(1, 4)
    ],
    id="carousel-hide-inactive-controls",
    height=200,
    classNames={"control": "dmc-control"},
)



================================================
File: docs/carousel/images.py
================================================
import dash_mantine_components as dmc

images = [
    "https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-1.png",
    "https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-2.png",
    "https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-3.png",
    "https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-4.png",
    "https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-5.png",
]

component = dmc.Carousel(
    [dmc.CarouselSlide(dmc.Image("Slide 1", src=image)) for image in images],
    id="carousel-images",
    withIndicators=True,
    w=400,
)



================================================
File: docs/carousel/indicator_styles.py
================================================
import dash_mantine_components as dmc

component = dmc.Carousel(
    [
        dmc.CarouselSlide(dmc.Center(f"Slide {i}", bg="blue", c="white", h="100%"))
        for i in range(1, 4)
    ],
    id="carousel-indicator-styles",
    withIndicators=True,
    height=200,
    loop=True,
    classNames={"indicator": "dmc-indicator"},
)



================================================
File: docs/carousel/initial.py
================================================
import dash_mantine_components as dmc
from dash import Input, Output, callback, no_update

component = dmc.Paper(
    [
        dmc.Select(
            label="Set initial slide",
            data=[str(i) for i in range(6)],
            value="0",
            id="carousel-input",
            mb=10,
        ),
        dmc.Carousel(
            [
                dmc.CarouselSlide(
                    dmc.Center(
                        f"Slide {i}", ta="center", bg="blue", c="white", h="100%"
                    )
                )
                for i in range(6)
            ],
            id="carousel-initial",
            height=200,
            loop=True,
            align="start",
        ),
    ]
)


@callback(
    Output("carousel-initial", "initialSlide"),
    Input("carousel-input", "value"),
)
def go_to_slide(value):
    return int(value)



================================================
File: docs/carousel/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.Carousel(
    [
        dmc.CarouselSlide(dmc.Text("Slide 1", ta="center", bg="blue", c="white", p=30)),
        dmc.CarouselSlide(dmc.Text("Slide 2", ta="center", bg="blue", c="white", p=30)),
        dmc.CarouselSlide(dmc.Text("Slide 3", ta="center", bg="blue", c="white", p=30)),
        dmc.CarouselSlide(dmc.Text("Slide 4", ta="center", bg="blue", c="white", p=30)),
    ],
    id="carousel",
)

configurator = Configurator(target)

configurator.add_segmented_control("align", ["start", "center", "end"], "center")
configurator.add_segmented_control(
    "orientation", ["horizontal", "vertical"], "horizontal"
)
configurator.add_slider("slideGap", "xs")
configurator.add_slider("controlsOffset", "sm")
configurator.add_number_slider("controlSize", 26, min=14, max=60)
configurator.add_switch("loop", True)
configurator.add_switch("dragFree", False)
configurator.add_switch("withControls", True)
configurator.add_switch("withIndicators", True)

component = configurator.panel



================================================
File: docs/carousel/responsive.py
================================================
import dash_mantine_components as dmc

component = dmc.Carousel(
    [
        dmc.CarouselSlide(
            dmc.Center(f"Slide {i}", ta="center", bg="blue", c="white", h="100%")
        )
        for i in range(1, 7)
    ],
    id="carousel-responsive",
    withIndicators=True,
    height=200,
    slideSize={"base": "100%", "sm": "50%", "md": "33.333333%"},
    slideGap={"base": 0, "sm": "md"},
    loop=True,
    align="start",
)



================================================
File: docs/carousel/show_controls_on_hover.py
================================================
import dash_mantine_components as dmc

component = dmc.Carousel(
    [
        dmc.CarouselSlide(dmc.Center(f"Slide {i}", bg="blue", c="white", h="100%"))
        for i in range(1, 4)
    ],
    id="carousel-show-controls-on-hover",
    height=200,
    classNames={"controls": "dmc-controls", "root": "dmc-root"},
)



================================================
File: docs/carousel/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Carousel(
    [
        dmc.CarouselSlide(dmc.Center("Slide-1", bg="blue", c="white", p=60)),
        dmc.CarouselSlide(dmc.Center("Slide-2", bg="blue", c="white", p=60)),
        dmc.CarouselSlide(dmc.Center("Slide-3", bg="blue", c="white", p=60)),
    ],
    id="carousel-simple",
)



================================================
File: docs/carousel/size_gap.py
================================================
import dash_mantine_components as dmc

component = dmc.Carousel(
    [
        dmc.CarouselSlide(dmc.Center(f"Slide {i}", bg="blue", c="white", h="100%"))
        for i in range(1, 7)
    ],
    id="carousel-size",
    withIndicators=True,
    height=200,
    slideSize="33.3333%",
    slideGap="md",
    loop=True,
    align="start",
    slidesToScroll=3,
)



================================================
File: docs/carousel/tabs.py
================================================
import dash_mantine_components as dmc
from dash import html, Input, Output, callback


def make_carousel(id):
    return dmc.Carousel(
        loop=True,
        withIndicators=True,
        children=[
            dmc.CarouselSlide(
                dmc.Center(
                    slide,
                    bg="blue",
                    c="white",
                    p=60,
                )
            )
            for slide in ["Slide 1", "Slide 2", "Slide 3"]
        ],
        id=id,
    )


component = html.Div(
    [
        dmc.Tabs(
            [
                dmc.TabsList(
                    [
                        dmc.TabsTab("Tab one", value="1"),
                        dmc.TabsTab("Tab two", value="2"),
                    ]
                ),
            ],
            id="tabs-carousel-example",
            value="1",
        ),
        html.Div(id="tabs-carousel-content", style={"paddingTop": 10}),
    ]
)


@callback(
    Output("tabs-carousel-content", "children"), Input("tabs-carousel-example", "value")
)
def render_content(active):
    if active == "1":
        return [dmc.Text("Tab One selected", my=10), make_carousel("carousel-tab1")]
    else:
        return [dmc.Text("Tab Two selected", my=10), make_carousel("carousel-tab2")]



================================================
File: docs/carousel/vertical.py
================================================
import dash_mantine_components as dmc

component = dmc.Carousel(
    [
        dmc.CarouselSlide(
            dmc.Center(f"Slide {i}", ta="center", bg="blue", c="white", h="100%")
        )
        for i in range(1, 7)
    ],
    id="carousel-vertical",
    orientation="vertical",
    withIndicators=True,
    height=200,
    loop=True,
)



================================================
File: docs/center/center.md
================================================
---
name: Center
description: Use Center component to center content vertically and horizontally.
endpoint: /components/center
package: dash_mantine_components
category: Layout
---

.. toc::

### Simple Example

.. exec::docs.center.simple

### Inline

To use `Center` with inline elements set `inline` prop. For example, you can center link icon and label:

.. exec::docs.center.inline


### Styles API

| Name | Static selector    | Description  |
|------|--------------------|--------------|
| root | .mantine-Card-root | Root element |

### Keyword Arguments

#### Center

.. kwargs::Center



================================================
File: docs/center/inline.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Box(
    dmc.Anchor(
        href="https://mantine.dev",
        target="_blank",
        children=dmc.Center(
            [
                DashIconify(
                    icon="tabler:arrow-left",  # Use the Tabler Arrow Left icon
                    width=12,
                    height=12,
                ),
                dmc.Box("Back to Mantine website", ml=5),
            ],
            inline=True,
        ),
    )
)


================================================
File: docs/center/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Center(
    style={"height": 200, "width": "100%"},
    children=[
        dmc.Badge("Free", style={"marginRight": 5}),
        dmc.Anchor("Click now!", href="https://mantine.dev/"),
    ],
)



================================================
File: docs/chartsintro/chartsintro.md
================================================
---
name: An Introduction to Charts
description: Getting started with chart components.
endpoint: /components/chartsintro
package: dash_mantine_components
category: Charts
---

.. toc::


### CSS Extensions

.. admonition::CSS Extensions
   :icon: radix-icons:info-circled
   :color: red

   Chart components require additional CSS styles.

The Chart components require an additional CSS stylesheet.  See the [Getting Started](/getting-started) section for more information.

Be sure to include:
```python
app = Dash(external_stylesheets=[dmc.styles.CHARTS])
```

Or, if you want to include all optional stylesheets:
```python
app = Dash(external_stylesheets=dmc.styles.ALL)
```

### Based on recharts

Most of the chart components are based on [recharts](https://recharts.org/) library. If you need advanced features that are not covered in dmc charts documentation, please refer to the [recharts documentation](https://recharts.org/en-US/api) for more information.


================================================
File: docs/checkbox/checkbox.md
================================================
---
name: Checkbox
description: Use Checkbox component to capture boolean input from user.
endpoint: /components/checkbox
package: dash_mantine_components
category: Inputs
---

.. toc::

### Introduction

.. exec::docs.checkbox.interactive
    :code: false

### Simple Usage

Use the property `checked` in the callbacks.

.. exec::docs.checkbox.simple

### States

.. exec::docs.checkbox.states

### Change icons

.. exec::docs.checkbox.icons

### Change icon color

Use `iconColor` prop to change icon color. You can reference colors from theme.colors or use any valid CSS color:

.. exec::docs.checkbox.iconcolor



### Different Colors

Set checkbox color using the `color` prop.

.. exec::docs.checkbox.colors

### Different Sizes

Choose from one of the following sizes: xs, sm, md, lg, xl.

.. exec::docs.checkbox.sizes


### Add custom sizes
Using the [Styles API](/styles-api), you can add any number of custom sizes with `data-size` attribute.  Defining the checkbox 
sizes in the [theme object](/theme-object) in the `MantineProvider` makes them available to all `Checkbox` components in the app.

 - [Live Demo on PyCafe](https://py.cafe/dash.mantine.components/checkbox-custom-sizes-demo)  

```python
component = dmc.Box([
    dmc.Checkbox(
        label="Extra small checkbox",
        size="xxs",
    ),
    dmc.Checkbox(
        label="Extra extra large checkbox",
        size="xxl",
        mt="md"
    ),
])

app.layout = dmc.MantineProvider(
   children=component,
    theme={
        "components": {
            "Checkbox": {"classNames": {
                "root": "checkbox-add-custom-sizes-root",
                "label": "checkbox-add-custom-sizes-label"}
            }
        }
    }
)
```
Define the classes in a `.css` file in `/assets` folder

```css
.checkbox-add-custom-sizes-root {
  --checkbox-size-xxl: 42px;
  --checkbox-size-xxs: 14px;

  &[data-size='xxl'] {
    .checkbox-add-custom-sizes-label {
      font-size: 22px;
      line-height: 40px;
    }
  }

  &[data-size='xxs'] {
    .checkbox-add-custom-sizes-label {
      font-size: 10px;
      line-height: 14px;
    }
  }
}
```


### Indeterminate state
`Checkbox` supports indeterminate state. When `indeterminate=True` prop is set, `checked` prop is ignored (checkbox
always has checked styles)

.. exec::docs.checkbox.indeterminate


### Label with link

.. exec::docs.checkbox.link


### Pointer cursor
By default, checkbox input and label have `cursor: default` (same as native `input[type='checkbox']`). To change cursor
to pointer, set `cursorType` on `theme`:

```python

app.layout = dmc.MantineProvider(
    theme = {"cursorType": "pointer"},
    children={...}
)
```


### Checkbox Group component

Use CheckboxGroup component to create inputs with multiple checkbox elements and label, description, etc. You can use either
the dmc.Group or dmc.Stack to customize the orientation and spacing of checkbox elements.

Use `value` property of the checkbox group in the callbacks.

.. exec::docs.checkbox.group

### CheckboxIndicator component

`CheckboxIndicator` looks exactly the same as `Checkbox` component, but it does not have any semantic meaning, it's 
just a visual representation of checkbox state. You can use it in any place where you need to display checkbox state 
without any interaction related to the indicator. For example, it is useful in cards based on buttons, trees, etc.

> Note that CheckboxIndicator cannot be focused or selected with keyboard. It is not accessible and should not be used as a replacement for Checkbox component.

.. exec::docs.checkbox.checkboxindicator

### CheckboxCard component
`CheckboxCard` component can be used as a replacement for `Checkbox` to build custom cards/buttons/other things that
work as checkboxes. The root element of the component has `role="checkbox"` attribute, it is accessible by default 
and supports the same keyboard interactions as `input[type="checkbox"]`.

Note - do not set the `checked` prop in the `CheckboxIndicator` component otherwise the `CheckboxIndicator` will not be updated.

.. exec::docs.checkbox.checkboxcard

### CheckboxCard with CheckboxGroup

You can use `CheckboxCard` with `CheckboxGroup` the same way as `Checkbox` component.

Note - do not set the `checked` prop in the `CheckboxIndicator` component otherwise the `CheckboxIndicator` will not be updated.
This example also shows how to add hover styles

.. exec::docs.checkbox.checkboxcardgroup
    :code: false

.. sourcetabs::docs/checkbox/checkboxcardgroup.py, assets/radiocard.css
    :defaultExpanded: false
    :withExpandedButton: true


### Example: Customize with Styles API


.. exec::docs.mantine-api.styles-api
    :code: false

.. sourcetabs::docs/mantine-api/styles-api.py, assets/examples/checkbox.css
    :defaultExpanded: true
    :withExpandedButton: true

   

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

> Check the Mantine documentation to explore the available selectors.  The [interactive demo](https://mantine.dev/core/checkbox/#styles-api)
> lets you hover over selectors to see which elements they correspond to.

#### Checkbox Selectors

| Selector       | Static selector              | Description                                             |
|---------------|------------------------------|---------------------------------------------------------|
| root          | .mantine-Checkbox-root       | Root element                                           |
| input         | .mantine-Checkbox-input      | Input element (`input[type="checkbox"]`)               |
| icon          | .mantine-Checkbox-icon       | Checkbox icon, used to display checkmark and indeterminate state icon |
| inner         | .mantine-Checkbox-inner      | Wrapper for icon and input                             |
| body          | .mantine-Checkbox-body       | Input body, contains all other elements                |
| labelWrapper  | .mantine-Checkbox-labelWrapper | Contains label, description, and error              |
| label         | .mantine-Checkbox-label      | Label element                                          |
| description   | .mantine-Checkbox-description | Description displayed below the label                 |
| error         | .mantine-Checkbox-error      | Error message displayed below the label               |

#### Checkbox CSS Variables

| Selector | Variable              | Description                                |
|----------|----------------------|--------------------------------------------|
| root     | --checkbox-color     | Controls checked checkbox background-color |
|          | --checkbox-radius    | Controls checkbox border-radius           |
|          | --checkbox-size      | Controls checkbox width and height        |
|          | --checkbox-icon-color | Controls checkbox icon color              |

#### Checkbox Data Attributes

| Selector | Attribute          | Condition                | Value                      |
|----------|-------------------|-------------------------|----------------------------|
| root     | data-checked      | `checked` prop is set   | –                          |
| input    | data-error        | `error` prop is set     | –                          |
| input    | data-indeterminate | `indeterminate` prop is set | –                     |
| inner    | data-label-position | –                      | Value of `labelPosition` prop |

#### CheckboxGroup Selectors

| Selector    | Static selector               | Description                         |
|------------|------------------------------|-------------------------------------|
| root       | .mantine-CheckboxGroup-root  | Root element                       |
| label      | .mantine-CheckboxGroup-label | Label element                      |
| required   | .mantine-CheckboxGroup-required | Required asterisk element, rendered inside label |
| description | .mantine-CheckboxGroup-description | Description element                |
| error      | .mantine-CheckboxGroup-error | Error element                      |

#### CheckboxIndicator Selectors

| Selector   | Static selector                     | Description   |
|------------|------------------------------------|---------------|
| indicator  | .mantine-CheckboxIndicator-indicator | Root element  |
| icon       | .mantine-CheckboxIndicator-icon   | Checkbox icon |

#### CheckboxIndicator CSS Variables

| Selector   | Variable            | Description                                |
|------------|--------------------|--------------------------------------------|
| indicator  | --checkbox-color   | Controls checked checkbox background-color |
|            | --checkbox-radius  | Controls checkbox border-radius           |
|            | --checkbox-size    | Controls checkbox width and height        |
|            | --checkbox-icon-color | Controls checkbox icon color          |

#### CheckboxIndicator Data Attributes

| Selector   | Attribute     | Condition         |
|------------|-------------|------------------|
| indicator  | data-checked | `checked` prop is set |
| indicator  | data-disabled | `disabled` prop is set |

#### CheckboxCard Selectors

| Selector | Static selector            | Description   |
|----------|----------------------------|---------------|
| card     | .mantine-CheckboxCard-card | Root element  |

#### CheckboxCard CSS Variables

| Selector | Variable      | Description                  |
|----------|-------------|------------------------------|
| card     | --card-radius | Controls card border-radius |

#### CheckboxCard Data Attributes

| Selector | Attribute       | Condition                  |
|----------|----------------|----------------------------|
| card     | data-checked    | `checked` prop is set      |
| card     | data-with-border | `withBorder` prop is set  |

### Keyword Arguments

#### Checkbox

.. kwargs::Checkbox

#### CheckboxGroup

.. kwargs::CheckboxGroup


#### CheckboxIndicator

.. kwargs::CheckboxIndicator

#### CheckboxCard

.. kwargs::CheckboxCard



================================================
File: docs/checkbox/checkboxcard.py
================================================

from dash import Input, Output, callback
import dash_mantine_components as dmc

component = dmc.Box([
        dmc.CheckboxCard(
            id="checkbox-card",
            withBorder=True,
            p="md",
            checked=True,
            children=[
                dmc.Center([
                    dmc.CheckboxIndicator(),
                    dmc.Text("CheckboxCard", size="xl", pl="sm"),
                ], inline=True),
            ]
        ),
        dmc.Box(id="checkbox-card-out"),
    ], p="lg")


@callback(
    Output("checkbox-card-out", "children"),
    Input("checkbox-card", "checked")
)
def update(checked):
   return f"Checked? {checked}"



================================================
File: docs/checkbox/checkboxcardgroup.py
================================================

from dash import Input, Output, callback
import dash_mantine_components as dmc

def make_checkboxcard(label, description):
    return dmc.CheckboxCard(
        withBorder=True,
        p="md",
        mt="md",
        className="checkboxcard-root",
        value=label,
        children=[
            dmc.Group([
                dmc.CheckboxIndicator(),
                dmc.Box([
                    dmc.Text(label, lh="1.3", fz="md", fw="bold" ),
                    dmc.Text(description, size="sm", c="dimmed"),
                ])
            ], wrap="nowrap", align="flex-start"),
        ]
    )


component = dmc.Box([
    dmc.CheckboxGroup(
        id="checkbox-card-group",
        label= "CheckboxGroup label",
        value=["CheckboxCard 1"],
        description="This is a CheckboxGroup description",
        children=[
            make_checkboxcard(f"CheckboxCard {i}", f"Checkbox description {i}")
            for i in range(1, 5)
        ]
    ),
    dmc.Box(id="checkbox-card-group-out"),
], p="lg")


@callback(
    Output("checkbox-card-group-out", "children"),
    Input("checkbox-card-group", "value")
)
def update(checked):
   return f"Checked? {checked}"




================================================
File: docs/checkbox/checkboxindicator.py
================================================

import dash_mantine_components as dmc

component = dmc.Group([
    dmc.CheckboxIndicator(),
    dmc.CheckboxIndicator(checked=True),
    dmc.CheckboxIndicator(disabled=True),
    dmc.CheckboxIndicator(disabled=True, checked=True)
])



================================================
File: docs/checkbox/colors.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    children=[
        dmc.Checkbox(label="I agree to sell my privacy", color="green", checked=True),
        dmc.Checkbox(label="I agree to sell my privacy", color="blue", checked=True),
        dmc.Checkbox(label="I agree to sell my privacy", color="red", checked=True),
        dmc.Checkbox(label="I agree to sell my privacy", color="orange", checked=True),
        dmc.Checkbox(label="I agree to sell my privacy", color="pink", checked=True),
    ],
)



================================================
File: docs/checkbox/group.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, callback

component = html.Div(
    [
        dmc.CheckboxGroup(
            id="checkbox-group",
            label="Select your favorite library",
            description="This is anonymous",
            withAsterisk=True,
            mb=10,
            children=dmc.Group(
                [
                    dmc.Checkbox(label="Pandas", value="pandas"),
                    dmc.Checkbox(label="Polars", value="polars"),
                    dmc.Checkbox(label="Vaex", value="vaex"),
                    dmc.Checkbox(label="Dask", value="dask"),
                ],
                mt=10,
            ),
            value=["pandas", "polars"],
        ),
        dmc.Text(id="checkbox-group-output"),
    ]
)


@callback(Output("checkbox-group-output", "children"), Input("checkbox-group", "value"))
def checkbox(value):
    return ", ".join(value) if value else None



================================================
File: docs/checkbox/iconcolor.py
================================================
import dash_mantine_components as dmc

component = dmc.Checkbox(
    checked=True,
    color="lime.4",
    iconColor="dark.8",
    size="md",
    label="Bright lime checkbox"
)


================================================
File: docs/checkbox/icons.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify


component = dmc.Stack([
    dmc.Checkbox(
        label="Custom checked icon",
        checked=True,
        icon=DashIconify(icon="ion:bag-check-sharp"),
        size="lg",
    ),
    dmc.Checkbox(
        label="Custom indeterminate icons",
        indeterminate=True,
        indeterminateIcon=DashIconify(icon="mdi:dots-circle", ),
        size="lg",
    ),
])


================================================
File: docs/checkbox/indeterminate.py
================================================


from dash import  html,  Input, Output,  callback, ALL, ctx
import dash_mantine_components as dmc

initial_values = [
    {"label": "Receive email notifications", "checked": False},
    {"label": "Receive sms notifications", "checked": False},
    {"label": "Receive push notifications", "checked": False},
]

component = html.Div([
    dmc.Checkbox(
        id="all-notifications",
        label="Receive all notifications",
        checked=False,
        indeterminate=False
    ),
    html.Div([
        dmc.Checkbox(
            id={"type": "notification-item", "index": i},
            label=item["label"],
            checked=item["checked"],
            style={"marginTop": "5px", "marginLeft": "33px"}
        )
        for i, item in enumerate(initial_values)
    ])
])



@callback(
    Output("all-notifications", "checked"),
    Output("all-notifications", "indeterminate"),
    Output({"type": "notification-item", "index": ALL}, "checked"),
    Input("all-notifications", "checked"),
    Input({"type": "notification-item", "index": ALL}, "checked"),
    prevent_initial_callback=True
)
def update_main_checkbox(all_checked, checked_states):
    # handle "all" checkbox"
    if ctx.triggered_id == 'all-notifications':
        checked_states = [all_checked] * len(checked_states)

    # handled individual check boxes
    all_checked_states = all(checked_states)
    indeterminate = any(checked_states) and not all_checked_states
    return all_checked_states, indeterminate, checked_states




================================================
File: docs/checkbox/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-checkbox"

target = dmc.Center(
    dmc.Checkbox(label="I agree to sell my privacy.", checked=True, id=TARGET_ID)
)

configurator = Configurator(target, TARGET_ID)

configurator.add_segmented_control("labelPosition", ["left", "right"], "right")
configurator.add_text_input("label", "I agree to sell my privacy")
configurator.add_text_input("description", "")
configurator.add_text_input("error", "")
configurator.add_colorpicker("color", "indigo")
configurator.add_segmented_control("variant", ["filled", "outline"], "filled")
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "sm")
configurator.add_switch("disabled", False)
configurator.add_switch("indeterminate", False)

component = configurator.panel



================================================
File: docs/checkbox/link.py
================================================
import dash_mantine_components as dmc

component = dmc.Checkbox(
    id="checkbox-simple",
    label=dmc.Text(
        ["I accept the ", dmc.Anchor("Terms and Conditions", href="#"), "."]
    ),
)



================================================
File: docs/checkbox/simple.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, callback

component = html.Div(
    [
        dmc.Checkbox(
            id="checkbox-state", label="I agree to sell my privacy", checked=True, mb=10
        ),
        dmc.Text(id="checkbox-output"),
    ]
)


@callback(Output("checkbox-output", "children"), Input("checkbox-state", "checked"))
def checkbox(checked):
    return str(checked)



================================================
File: docs/checkbox/sizes.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    children=[
        dmc.Checkbox(label="I agree to sell my privacy", size="xs", checked=True),
        dmc.Checkbox(label="I agree to sell my privacy", size="sm", checked=True),
        dmc.Checkbox(label="I agree to sell my privacy", size="md", checked=True),
        dmc.Checkbox(label="I agree to sell my privacy", size="lg", checked=True),
        dmc.Checkbox(label="I agree to sell my privacy", size="xl", checked=True),
    ],
)



================================================
File: docs/checkbox/states.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack([
    dmc.Checkbox(checked=False, label="Default checkbox"),
    dmc.Checkbox(checked=False, indeterminate=True, label="Indeterminate checkbox"),
    dmc.Checkbox(checked=True, label="Checked checkbox"),
    dmc.Checkbox(checked=True, variant="outline", label="Outline checked checkbox"),
    dmc.Checkbox(variant="outline", indeterminate=True, label="Outline indeterminate checkbox"),
    dmc.Checkbox(disabled=True, label="Disabled checkbox"),
    dmc.Checkbox(disabled=True, checked=True, label="Disabled checked checkbox"),
    dmc.Checkbox(disabled=True, indeterminate=True, label="Disabled indeterminate checkbox")
])


================================================
File: docs/chip/chip.md
================================================
---
name: Chip
description: Use Chip to pick one or multiple values with inline controls
endpoint: /components/chip
package: dash_mantine_components
category: Inputs
---

.. toc::

### Introduction

.. exec::docs.chip.interactive
    :code: false

### Simple Usage

For a stand-alone `Chip`, use the `checked` property in callbacks.

.. exec::docs.chip.simple


### Change Checked Icon

.. exec::docs.chip.icon



### States

.. exec::docs.chip.states
    :code: false


### Chip with Tooltip

.. exec::docs.chip.tooltip


### ChipGroups like Radio Button

In this example, only a single chip can be selected, similar to a radio button. 

> Note:  The  `ChipGroup` `value` property type must be a string when `multiple=False`.

.. exec::docs.chip.chipgroup_radio


### ChipGroups like Checklist

In this example,  multiple chips can be selected, similar to a checklist.  Set `multiple=True`

> Note: The  `ChipGroup` `value` property type must be a list of strings when `multiple=True`.

.. exec::docs.chip.chipgroup_checklist

### Deselect radio chip

To enable deselecting a radio chip, set `deselectable=True`


.. exec::docs.chip.chipgroup_radio_deselectable

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.



#### Chip Selectors

| Selector    | Static selector              | Description                               |
|-------------|------------------------------|-------------------------------------------|
| root        | .mantine-Chip-root            | Root element                              |
| checkIcon   | .mantine-Chip-checkIcon       | Check icon, visible when `checked` prop is true |
| iconWrapper | .mantine-Chip-iconWrapper     | Wraps `checkIcon` for alignment           |
| input       | .mantine-Chip-input           | Input element, hidden by default          |
| label       | .mantine-Chip-label           | Input label, used as the chip body        |

#### Chip CSS Variables

| Selector | Variable                  | Description                                          |
|----------|---------------------------|------------------------------------------------------|
| root     | --chip-fz                  | Controls font-size                                   |
|          | --chip-size                | Controls height                                      |
|          | --chip-icon-size           | Controls width and height of the icon                |
|          | --chip-padding             | Controls horizontal padding when chip is not checked |
|          | --chip-checked-padding     | Controls horizontal padding when chip is checked     |
|          | --chip-radius              | Controls border-radius                               |
|          | --chip-bg                  | Controls background-color when chip is checked       |
|          | --chip-hover               | Controls background-color when chip is checked and hovered |
|          | --chip-color               | Controls color when chip is checked                  |
|          | --chip-bd                  | Controls border when chip is checked                 |
|          | --chip-spacing             | Controls spacing between check icon and label        |

#### Chip Data Attributes

| Selector | Attribute      | Condition                |
|----------|----------------|--------------------------|
| label    | data-checked    | Chip is checked          |
| label    | data-disabled   | `disabled` prop is set   |



### Keyword Arguments

#### Chip

.. kwargs::Chip

#### ChipGroup

.. kwargs::ChipGroup



================================================
File: docs/chip/chipgroup_checklist.py
================================================
import dash_mantine_components as dmc
from dash import callback, Input, Output

component = dmc.Box(
    [
        dmc.Group(
            dmc.ChipGroup(
                [
                    dmc.Chip("Multiple chips", value="a"),
                    dmc.Chip("Can be selected", value="b"),
                    dmc.Chip("At a time", value="c"),
                ],
                multiple=True,
                value=["a", "b"],
                id="chipgroup-multi",
            ),
            justify="center",
        ),
        dmc.Text(id="chipgroup-multi-container", ta="center"),
    ]
)


@callback(
    Output("chipgroup-multi-container", "children"), Input("chipgroup-multi", "value")
)
def checkbox(value):
    return f"Selected chips: {value}"



================================================
File: docs/chip/chipgroup_radio.py
================================================
import dash_mantine_components as dmc
from dash import callback, Input, Output

component = dmc.Box(
    [
        dmc.Group(
            dmc.ChipGroup(
                [
                    dmc.Chip("Single chip", value="a"),
                    dmc.Chip("Can be selected", value="b"),
                    dmc.Chip("At a time", value="c"),
                ],
                multiple=False,
                value="a",
                id="chipgroup-single",
            ),
            justify="center",
        ),
        dmc.Text(id="chipgroup-single-container", ta="center"),
    ]
)


@callback(
    Output("chipgroup-single-container", "children"), Input("chipgroup-single", "value")
)
def checkbox(value):
    return f"You selected chip: {value}"



================================================
File: docs/chip/chipgroup_radio_deselectable.py
================================================
import dash_mantine_components as dmc
from dash import callback, Input, Output

component = dmc.Box(
    [
        dmc.Group(
            dmc.ChipGroup(
                [
                    dmc.Chip("Single chip", value="a"),
                    dmc.Chip("Can be selected", value="b"),
                    dmc.Chip("At a time", value="c"),
                ],
                multiple=False,
                value="a",
                deselectable=True,
                id="chipgroup-deselect",
            ),
            justify="center",
        ),
        dmc.Text(id="chipgroup-deselect-container", ta="center"),
    ]
)


@callback(
    Output("chipgroup-deselect-container", "children"), Input("chipgroup-deselect", "value")
)
def checkbox(value):
    return f"You selected chip: {value}"



================================================
File: docs/chip/icon.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Chip(
    "Forbidden",
    icon=DashIconify(icon="bi-x-circle"),
    color="red",
    checked=True,
    m="sm",
)



================================================
File: docs/chip/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-Chip"

target = dmc.Center(
    dmc.Chip("Awesome chip", checked=True, id=TARGET_ID)
)

configurator = Configurator(target, TARGET_ID)

configurator.add_segmented_control("variant", ["filled", "outline", "light"], "light")
configurator.add_colorpicker("color", "indigo")
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "lg")

component = configurator.panel



================================================
File: docs/chip/root.py
================================================
import dash_mantine_components as dmc

component = dmc.Chip(
    "Chip with props added to root",
    wrapperProps={"data-testid": "wrapper"},
    checked=True,
)



================================================
File: docs/chip/simple.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, callback


component = dmc.Box(
    [
        dmc.Chip("Awesome chip", checked=True, id="chip-state"),
        dmc.Text(id="chip-container"),
    ],
    p=20,
)


@callback(Output("chip-container", "children"), Input("chip-state", "checked"))
def checkbox(checked):
    return f"The chip is selected: {checked}"



================================================
File: docs/chip/states.py
================================================
import dash_mantine_components as dmc

component = dmc.Box(
    [
        dmc.Group(
            [
                dmc.Chip("Outline default", variant="outline"),
                dmc.Chip(
                    "Outline checked", variant="outline", checked=True
                ),
                dmc.Chip("Outline disabled", disabled=True, variant="outline"),
            ]
        ),
        dmc.Group(
            [
                dmc.Chip("Light default", variant="light",  m="sm"),
                dmc.Chip(
                    "Light checked",
                    variant="light",
                    checked=True,
                    m="sm",
                ),
                dmc.Chip("Light disabled", disabled=True, variant="light", m="sm"),
            ]
        ),
        dmc.Group(
            [
                dmc.Chip("Filled default", variant="filled", m="sm"),
                dmc.Chip(
                    "Filled checked",
                    variant="filled",
                    checked=True,
                    m="sm",
                ),
                dmc.Chip("Filled disabled", disabled=True, variant="filled", m="sm"),
            ]
        ),
    ],
)



================================================
File: docs/chip/tooltip.py
================================================
import dash_mantine_components as dmc

component = dmc.Tooltip(
    label="chip tooltip",
    children=dmc.Chip("chip with tooltip", checked=True),
)



================================================
File: docs/code/block.py
================================================
import dash_mantine_components as dmc

component = dmc.Code(
    """from dash import Dash
import dash_mantine_components as dmc

app = Dash(__name__)

app.layout = dmc.Button("Settings")

if __name__ == "__main__":
    app.run_server(debug=True)""",
    block=True,
)



================================================
File: docs/code/code.md
================================================
---
name: Code
description: Use Code to display code without syntax highlighting.
endpoint: /components/code
package: dash_mantine_components
category: Typography
---

.. toc::

### Inline Code

.. exec::docs.code.inline

### Block Code

.. exec::docs.code.block

### Colors

.. exec::docs.code.colors

### Syntax Highlighting

In case you need syntax highlight like in all code examples on this documentation, use [dmc.CodeHighlight](/components/code-highlight)
component.

### Styles API

| Name         | Static selector    | Description                                   |
|:-------------|:-------------------|:----------------------------------------------|
| root         | .mantine-Code-root | Root element                                  |

### Keyword Arguments

#### Code

.. kwargs::Code



================================================
File: docs/code/colors.py
================================================
import dash_mantine_components as dmc

code = "import collections"

component = dmc.Group(
    children=[
        dmc.Code(code, color=color) for color in ["red", "blue", "green", "pink"]
    ],
)



================================================
File: docs/code/inline.py
================================================
import dash_mantine_components as dmc

component = dmc.Code("app = Dash(__name__)")



================================================
File: docs/code-highlight/code-highlight.md
================================================
---
name: CodeHighlight
description: Use CodeHighlight component for highlighting code snippets with syntax highlighting for different languages like python, cpp, javascript, etc.
endpoint: /components/code-highlight
package: dash_mantine_components
category: Typography
---

.. toc::


### CSS Extensions

.. admonition::CSS Extensions
   :icon: radix-icons:info-circled
   :color: red

   CodeHighlight require additional CSS styles.

The CodeHighlight component require an additional CSS stylesheet.  See the [Getting Started](/getting-started) section for more information.

Be sure to include:
```python
app = Dash(external_stylesheets=[dmc.styles.CODE_HIGHLIGHT])
```
Or, if you want to include all optional stylesheets:
```python
app = Dash(external_stylesheets=dmc.styles.ALL)
```


### Simple Usage

`CodeHighlight` highlight given code with [highlight.js](https://highlightjs.org/), it accepts `code` prop with string of
code to highlight and `language` prop with language name. If language is not provided, `CodeHighlight` will assume that
the code language is `tsx` (TypeScript).

`CodeHighlight` is used to show the code for all the examples in these docs.

.. exec::docs.code-highlight.simple

### Copy button
You can customize copy button labels with `copyLabel` and `copiedLabel` props. In case you need to remove 
the copy button, set `withCopyButton=False`.


.. exec::docs.code-highlight.copy_btn


### With tabs
`CodeHighlightTabs` component allows organizing multiple code blocks into tabs:

The `code` prop is a list of dictionaries, where each dictionary defines a tab. Each dictionary can include the following keys:

- `fileName`: The label for the tab.
- `code`: The code string to display in the tab.
- `language`: The programming language for syntax highlighting.
- `icon`: An optional component to display to the left of the fileName.


.. exec::docs.code-highlight.tabs
    :code: false



```python

code = [
    {
        "fileName": "demo.py",
        "code": demo_py, # your code string here
        "language": "python",
        "icon": DashIconify(icon="vscode-icons:file-type-python", width=20), 
    },
    {
        "fileName": "styles.css",
        "code":styles_css, # your code string here
        "language": "css",
        "icon": DashIconify(icon="vscode-icons:file-type-css", width=20), 
    },    
]

dmc.CodeHighlightTabs(code=code)

```

### Expandable code
If the code snippet is too long, you can make it expandable with `withExpandButton` and `defaultExpanded=False` props.
To change label of the expand/collapse control tooltip, use `expandCodeLabel` and `collapseCodeLabel`.


.. exec::docs.code-highlight.expandable
    :code: false

### Inline code

`InlineCodeHighlight` component allows highlighting inline code snippets:


.. exec::docs.code-highlight.inline

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.


#### CodeHighlight Selectors

| Selector | Static selector               | Description                          |
|----------|--------------------------------|--------------------------------------|
| root     | .mantine-CodeHighlight-root    | Root element                         |
| pre      | .mantine-CodeHighlight-pre     | Pre element, contains code element   |
| code     | .mantine-CodeHighlight-code    | Code element                         |
| copy     | .mantine-CodeHighlight-copy    | Copy button                          |



#### CodeHighlightTabs Selectors

| Selector      | Static selector                     | Description                                            |
|---------------|--------------------------------------|--------------------------------------------------------|
| root          | .mantine-CodeHighlightTabs-root      | Root element                                           |
| pre           | .mantine-CodeHighlightTabs-pre       | Pre element, contains code element                    |
| codeWrapper   | .mantine-CodeHighlightTabs-codeWrapper | Wrapper around code element, used for expand/collapse logic |
| code          | .mantine-CodeHighlightTabs-code      | Code element, contains highlighted code               |
| header        | .mantine-CodeHighlightTabs-header    | Header element, contains copy button and file names   |
| controls      | .mantine-CodeHighlightTabs-controls  | Controls container, contains control buttons (copy, collapse, etc.) |
| control       | .mantine-CodeHighlightTabs-control   | Control button (copy, collapse, etc.)                 |
| files         | .mantine-CodeHighlightTabs-files     | File names list                                       |
| file          | .mantine-CodeHighlightTabs-file      | File name                                             |
| fileIcon      | .mantine-CodeHighlightTabs-fileIcon  | File icon                                             |
| showCodeButton| .mantine-CodeHighlightTabs-showCodeButton | Button that reveals full code when it is collapsed |


#### InlineCodeHighlight Selectors

| Selector | Static selector                    | Description    |
|----------|-------------------------------------|----------------|
| code     | .mantine-InlineCodeHighlight-code   | Root element   |

### Keyword Arguments

#### CodeHighlight

.. kwargs::CodeHighlight

#### CodeHighlightTabs

.. kwargs::CodeHighlightTabs

#### InlineCodeHighlight

.. kwargs::InlineCodeHighlight


================================================
File: docs/code-highlight/copy_btn.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack([
    dmc.CodeHighlight(
        code = "dmc.Text('This codeblock has a custom copy button label')",
        language="python",
        copyLabel="Copy button code",
        copiedLabel="Copied!",
    ),
    dmc.CodeHighlight(
            code = "dmc.Text('This codeblock does not have a copy button')",
            language="python",
            withCopyButton=False,
            mt="md"
        )
])


================================================
File: docs/code-highlight/expandable.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

styles_css = """
.dmc-api-demo-root {
  border: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));
  padding: var(--mantine-spacing-xs) var(--mantine-spacing-sm);
  border-radius: var(--mantine-radius-md);
  font-weight: 500;
  cursor: pointer;

  &[data-checked] {
    background-color: var(--mantine-color-blue-filled);
    border-color: var(--mantine-color-blue-filled);
    color: var(--mantine-color-white);
  }
}"""

demo_py = """
import dash_mantine_components as dmc

 dmc.Checkbox(
    classNames={"root": "dmc-api-demo-root"},
    label="Checkbox button",
    w=180
)"""


code = [
    {
        "fileName": "demo.py",
        "code": demo_py,
        "language": "python",
        "icon": DashIconify(icon="vscode-icons:file-type-python", width=20),
    },
    {
        "fileName": "styles.css",
        "code":styles_css,
        "language": "css",
        "icon": DashIconify(icon="vscode-icons:file-type-css", width=20),
    },
]

component = dmc.CodeHighlightTabs(
    code=code,
    withExpandButton=True,
    expandCodeLabel="Show full code",
    collapseCodeLabel="Show less",
    defaultExpanded=False
)



================================================
File: docs/code-highlight/inline.py
================================================
import dash_mantine_components as dmc

component = dmc.Text(
    [
        "You can highlight code inline ",
        dmc.InlineCodeHighlight(
            code='dmc.InlineCodeHighlight(code="Your code string here", language="python")',
            language="python",
        ),
        " Is not that cool?",
    ]
)



================================================
File: docs/code-highlight/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.CodeHighlight(
    language="python",
    code="""# Kadane's Algorithm

class Solution:
    def maxSubArray(self, nums: List[int]) -> int:
        curr, summ = nums[0], nums[0]
        for n in nums[1:]:
            curr = max(n, curr + n)
            summ = max(summ, curr)
        return summ""",
)



================================================
File: docs/code-highlight/tabs.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

styles_css = """
.dmc-api-demo-root {
  border: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));
  padding: var(--mantine-spacing-xs) var(--mantine-spacing-sm);
  border-radius: var(--mantine-radius-md);
  font-weight: 500;
  cursor: pointer;

  &[data-checked] {
    background-color: var(--mantine-color-blue-filled);
    border-color: var(--mantine-color-blue-filled);
    color: var(--mantine-color-white);
  }
}"""

demo_py = """
import dash_mantine_components as dmc

 dmc.Checkbox(
    classNames={"root": "dmc-api-demo-root"},
    label="Checkbox button",
    w=180
)"""


code = [
    {
        "fileName": "demo.py",
        "code": demo_py,
        "language": "python",
        "icon": DashIconify(icon="vscode-icons:file-type-python", width=20),
    },
    {
        "fileName": "styles.css",
        "code":styles_css,
        "language": "css",
        "icon": DashIconify(icon="vscode-icons:file-type-css", width=20),
    },
]

component = dmc.CodeHighlightTabs(code=code)



================================================
File: docs/collapse/collapse.md
================================================
---
name: Collapse
description: Use the Collapse component to animate presence with slide down/up transition
endpoint: /components/collapse
package: dash_mantine_components
category:  Miscellaneous
---

.. toc::

### Simple Example


.. exec::docs.collapse.simple

### Change transition
Set following props to control transition:

- `transitionDuration` – duration in ms
- `transitionTimingFunction` – [CSS timing function](https://developer.mozilla.org/en-US/docs/Web/CSS/transition-timing-function) ("ease", "linear", etc.), defaults to "ease"

.. exec::docs.collapse.transition

### Nested Collapse components

.. exec::docs.collapse.nested


### Keyword Arguments

#### Collapse

.. kwargs::Collapse



================================================
File: docs/collapse/nested.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc

component = dmc.Box([
    dmc.Button("Toggle Content", id="collapse-root-btn", n_clicks=0, mb="sm", size="lg"),
    dmc.Collapse(
        children=dmc.Box([
            dmc.Text("Hello World!", mt="lg"),
            dmc.Button(
                "Toggle Content",
                id="collapse-inner-btn",
                n_clicks=0,
                variant="outline",
                size="sm",
                my="lg",
                ml="lg"
            ),
            dmc.Collapse(children= dmc.Text("Hello Nested Worlds!", ml="lg"), id="collapse-inner")
        ]),
        opened=False,
        id="collapse-root"
    )
])

@callback(
    Output("collapse-root", "opened"),
    Input("collapse-root-btn", "n_clicks"),
)
def update(n):
    if n % 2 == 0:
        return False
    return True


@callback(
    Output("collapse-inner", "opened"),
    Input("collapse-inner-btn", "n_clicks"),
)
def update(n):
    if n % 2 == 0:
        return False
    return True




================================================
File: docs/collapse/simple.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc

component = dmc.Box([
    dmc.Button("Toggle Content", id="collapse-btn", n_clicks=0),
    dmc.Collapse(
        children=dmc.Text("Hello World!", my="lg"),
        opened=False,
        id="collapse-simple"
    )
])

@callback(
    Output("collapse-simple", "opened"),
    Input("collapse-btn", "n_clicks"),
)
def update(n):
    if n % 2 == 0:
        return False
    return True



================================================
File: docs/collapse/transition.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc

component = dmc.Box([
    dmc.Button("Toggle Content", id="collapse-transition-btn", n_clicks=0),
    dmc.Collapse(
        children=dmc.Text("Hello World!", my="lg"),
        opened=False,
        transitionDuration=1000,
        transitionTimingFunction="linear",
        id="collapse-transition"
    )
])

@callback(
    Output("collapse-transition", "opened"),
    Input("collapse-transition-btn", "n_clicks"),
)
def update(n):
    if n % 2 == 0:
        return False
    return True



================================================
File: docs/colorinput/colorinput.md
================================================
---
name: ColorInput
description: Capture color inputs from user.
endpoint: /components/colorinput
package: dash_mantine_components
category: Inputs
---

.. toc::

### Simple Example

.. exec::docs.colorinput.simple

### Formats
Component supports hex, hexa, rgb, rgba, hsl and hsla color formats. Slider to change opacity is displayed only for hexa, rgba and hsla formats.

.. exec::docs.colorinput.formats
   :code: false

### Disable free input
To disable free input set disallowInput prop.

.. exec::docs.colorinput.disable-free-input

### With swatches
With swatches
You can add any amount of predefined color swatches.  By default, there will be 10 swatches per row, you can change this with `swatchesPerRow` prop, like in ColorPicker component.

.. exec::docs.colorinput.swatches

If you need to restrict color picking to certain colors – disable color picker and disallow free input:

.. exec::docs.colorinput.swatches-only

### Remove or replace preview
By default, color preview will be rendered on the left side of the input, you can remove it using `withPreview=False` or replace with an icon.

.. exec::docs.colorinput.preview

### Eye dropper
Set `withEyeDropper` prop to display eye dropper icon in the right section. This feature depends on `EyeDropper` API, the eye dropper will not be rendered if the API is not supported.

.. exec::docs.colorinput.eyedropper

### Input props

.. exec::docs.colorinput.interactive
   :code:  false

### Accessibility
#### Color picker focus
Color picker is not focusable, users without mouse access can select color only by entering it into input manually. If you want to make component accessible do not disable free input.

#### aria-label
Provide `aria-labe`l in case you use component without label for screen reader support:

```python
import dash_mantine_components as dmc

dmc.ColorInput(value="#ffffff")  # not ok, input is not labeled
dmc.ColorInput(label="Pick color") # ok, input and label is connected
dmc.ColorInput(**{"aria-label": "My input"}) # ok, label is not visible but will be announced by screen readers
```

### StylesAPI

| Name              | Static selector                       | Description                                                         |
|:------------------|:--------------------------------------|:--------------------------------------------------------------------|
| wrapper           | .mantine-ColorInput-wrapper           | Root element                                                        |
| input             | .mantine-ColorInput-input             | Input element                                                       |
| section           | .mantine-ColorInput-section           | Left and right sections                                             |
| root              | .mantine-ColorInput-root              | Root element                                                        |
| label             | .mantine-ColorInput-label             | Label element                                                       |
| required          | .mantine-ColorInput-required          | Required asterisk element, rendered inside label                    |
| description       | .mantine-ColorInput-description       | Description element                                                 |
| error             | .mantine-ColorInput-error             | Error element                                                       |
| preview           | .mantine-ColorInput-preview           | Color preview, displayed only when `format` supports alpha channel  |
| body              | .mantine-ColorInput-body              | Contains alpha/hue sliders and color preview                        |
| slider            | .mantine-ColorInput-slider            | Alpha and hue sliders root                                          |
| sliderOverlay     | .mantine-ColorInput-sliderOverlay     | Element used to display various overlays over hue and alpha sliders |
| saturation        | .mantine-ColorInput-saturation        | Saturation picker                                                   |
| saturationOverlay | .mantine-ColorInput-saturationOverlay | Element used to display various overlays over saturation picker     |
| sliders           | .mantine-ColorInput-sliders           | Contains alpha and hue sliders                                      |
| thumb             | .mantine-ColorInput-thumb             | Thumb of all sliders                                                |
| swatch            | .mantine-ColorInput-swatch            | Color swatch                                                        |
| swatches          | .mantine-ColorInput-swatches          | Color swatches list                                                 |
| dropdown          | .mantine-ColorInput-dropdown          | Popover dropdown                                                    |
| colorPreview      | .mantine-ColorInput-colorPreview      | Color swatch preview in input left section                          |
| eyeDropperButton  | .mantine-ColorInput-eyeDropperButton  | Eye dropper button                                                  |
| eyeDropperIcon    | .mantine-ColorInput-eyeDropperIcon    | Default eye dropper icon                                            |

### Keyword Arguments

#### ColorInput

.. kwargs::ColorInput



================================================
File: docs/colorinput/disable-free-input.py
================================================
import dash_mantine_components as dmc


component = dmc.ColorInput(
    disallowInput=True, label="Your favorite color", value="#e05e5e", w=250
)



================================================
File: docs/colorinput/eyedropper.py
================================================
import dash_mantine_components as dmc


component = dmc.ColorInput(
    withEyeDropper=True, label="Pick any color from the page", w=250
)



================================================
File: docs/colorinput/formats.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.ColorInput(value="#C5D899", format="rgb", label="Select color", w=250)

configurator = Configurator(target)

configurator.add_select("format", ["hex", "hexa", "rgba", "rgb", "hsl", "hsla"], "rgb")

component = configurator.panel



================================================
File: docs/colorinput/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-color-input"
target = dmc.Center(
    dmc.ColorInput(
        label="Your favorite color",
        placeholder="Pick color",
        w=250,
        id=TARGET_ID,
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_text_input(
    "placeholder", "Pick color", **{"placeholder": "Placeholder"}
)
configurator.add_text_input("label", "Your favorite color", **{"placeholder": "Label"})
configurator.add_text_input("description", "", **{"placeholder": "Description"})
configurator.add_text_input("error", "", **{"placeholder": "Error"})
configurator.add_select("variant", ["default", "filled", "unstyled"], "default")
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "sm")
configurator.add_switch("withAsterisk", True)
configurator.add_switch("disabled", False)
configurator.add_switch("withEyeDropper", False)

component = configurator.panel



================================================
File: docs/colorinput/preview.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Stack(
    [
        dmc.ColorInput(
            label="Without preview",
            withPreview=False,
            value="#40c057",
            w=250,
        ),
        dmc.ColorInput(
            label="With icon",
            leftSection=DashIconify(icon="cil:paint"),
            withPreview=False,
            w=250,
            value="#40c057",
        ),
    ]
)



================================================
File: docs/colorinput/simple.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback

component = html.Div(
    [
        dmc.ColorInput(id="color-input", label="Your favorite color", w=250),
        dmc.Space(h=10),
        dmc.Text(id="selected-color-input"),
    ]
)


@callback(Output("selected-color-input", "children"), Input("color-input", "value"))
def pick(color):
    return f"You selected: {color}"



================================================
File: docs/colorinput/swatches-only.py
================================================
import dash_mantine_components as dmc

colors = dmc.DEFAULT_THEME["colors"]

component = dmc.ColorInput(
    label="Your favorite color",
    value="#40c057",
    disallowInput=True,
    w=250,
    withPicker=False,
    swatches=colors["red"] + colors["green"],
)



================================================
File: docs/colorinput/swatches.py
================================================
import dash_mantine_components as dmc

component = dmc.ColorInput(
    label="Your favorite color",
    value="#e05e5e",
    w=250,
    format="hex",
    swatches=[
        "#25262b",
        "#868e96",
        "#fa5252",
        "#e64980",
        "#be4bdb",
        "#7950f2",
        "#4c6ef5",
        "#228be6",
        "#15aabf",
        "#12b886",
        "#40c057",
        "#82c91e",
        "#fab005",
        "#fd7e14",
    ],
)



================================================
File: docs/colorpicker/colorpicker.md
================================================
---
name: ColorPicker
description: Use Colorpicker for color inputs in various formats such as hex, rgb, hsl etc.
endpoint: /components/colorpicker
package: dash_mantine_components
category: Inputs
---

.. toc::

### Simple Example

.. exec::docs.colorpicker.simple

### Color Format

Component supports hex, rgb, rgba, hsl and hsla color formats. Slider to change opacity is displayed only for rgba
and hsla formats.

.. exec::docs.colorpicker.formats

### With Swatches

You can add any number of predefined swatches and also set the number of swatches per row.

.. exec::docs.colorpicker.swatches

### Without Picker

To display just the swatches and no picker, initialize the component with `withPicker=False`.

.. exec::docs.colorpicker.picker

### Styles API

| Name              | Static selector                        | Description                                                         |
|:------------------|:---------------------------------------|:--------------------------------------------------------------------|
| wrapper           | .mantine-ColorPicker-wrapper           | Root element                                                        |
| preview           | .mantine-ColorPicker-preview           | Color preview, displayed only when `format` supports alpha channel  |
| body              | .mantine-ColorPicker-body              | Contains alpha/hue sliders and color preview                        |
| slider            | .mantine-ColorPicker-slider            | Alpha and hue sliders root                                          |
| sliderOverlay     | .mantine-ColorPicker-sliderOverlay     | Element used to display various overlays over hue and alpha sliders |
| saturation        | .mantine-ColorPicker-saturation        | Saturation picker                                                   |
| saturationOverlay | .mantine-ColorPicker-saturationOverlay | Element used to display various overlays over saturation picker     |
| sliders           | .mantine-ColorPicker-sliders           | Contains alpha and hue sliders                                      |
| thumb             | .mantine-ColorPicker-thumb             | Thumb of all sliders                                                |
| swatch            | .mantine-ColorPicker-swatch            | Color swatch                                                        |
| swatches          | .mantine-ColorPicker-swatches          | Color swatches list                                                 |

### Keyword Arguments

#### ColorPicker

.. kwargs::ColorPicker



================================================
File: docs/colorpicker/formats.py
================================================
import dash_mantine_components as dmc
from dash import html, Input, Output, callback

component = html.Div(
    [
        dmc.Group(
            justify="space-between",
            children=[
                dmc.ColorPicker(id="colorpicker-format", format="hex", value="#343353"),
                dmc.Select(
                    id="format-select",
                    data=[
                        {"label": fmt.upper(), "value": fmt}
                        for fmt in ["hex", "hexa", "rgb", "rgba", "hsl", "hsla"]
                    ],
                    value="hex",
                ),
            ],
        ),
        dmc.Space(h=10),
        dmc.Text(id="selected-color-format"),
    ]
)


@callback(Output("colorpicker-format", "format"), Input("format-select", "value"))
def pick_format(value):
    return value


@callback(
    Output("selected-color-format", "children"), Input("colorpicker-format", "value")
)
def pick_color(color):
    return color



================================================
File: docs/colorpicker/picker.py
================================================
import dash_mantine_components as dmc

# fmt: off
swatches = [
    "#25262b", "#868e96", "#fa5252", "#e64980", "#be4bdb", "#7950f2", "#4c6ef5",
    "#228be6", "#15aabf", "#12b886", "#40c057", "#82c91e", "#fab005", "#fd7e14"
]
# fmt: on

component = dmc.ColorPicker(swatches=swatches, swatchesPerRow=7, withPicker=False)



================================================
File: docs/colorpicker/simple.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback

component = html.Div(
    [
        dmc.ColorPicker(id="color-picker", format="rgba", value="rgba(41, 96, 214, 1)"),
        dmc.Space(h=10),
        dmc.Text(id="selected-color"),
    ]
)


@callback(Output("selected-color", "children"), Input("color-picker", "value"))
def pick(color):
    return color



================================================
File: docs/colorpicker/swatches.py
================================================
import dash_mantine_components as dmc

# fmt: off
swatches = [
    "#25262b", "#868e96", "#fa5252", "#e64980", "#be4bdb", "#7950f2", "#4c6ef5",
    "#228be6", "#15aabf", "#12b886", "#40c057", "#82c91e", "#fab005", "#fd7e14"
]
# fmt: on

component = dmc.Group(
    gap=40,
    children=[
        dmc.ColorPicker(swatches=swatches),
        dmc.ColorPicker(swatches=swatches, swatchesPerRow=9),
    ],
)



================================================
File: docs/colors/color_c_props.py
================================================
import dash_mantine_components as dmc

component = dmc.Button("Button with color and c props",  color="#C3FF36", c="black")


================================================
File: docs/colors/color_index.py
================================================
import dash_mantine_components as dmc
from dash import Input, Output, callback

component = dmc.Group([
    dmc.Box([
        dmc.Text(c="blue.5", id="color-index-text"),
        dmc.Button("Button", color="cyan.5", id="color-index-btn")
    ]),
    dmc.Box([
        dmc.Text("index"),
        dmc.Slider(min=0, max=9, step=1, value=3, id="color-index-slider", w=200)
    ])
], justify="space-between")

@callback(
    Output("color-index-text", "children"),
    Output("color-index-text", "c"),
    Output("color-index-btn", "color"),
    Input("color-index-slider", "value")
)
def update(val):
    return f"Text with blue.{val} color", f"blue.{val}", f"blue.{val}"



================================================
File: docs/colors/color_prop.py
================================================
import dash_mantine_components as dmc

component= dmc.Box([
    dmc.Text("Filled variant", size="sm", mb=5, fw=500),
    dmc.Group([
        dmc.Button("Theme color", color="cyan"),
        dmc.Button("Hex color", color="#1D72FE")
    ]),

    dmc.Text("Light variant", size="sm", mb=5, mt="md", fw=500),
    dmc.Group([
        dmc.Button("Theme color", variant="light", color="cyan"),
        dmc.Button("Hex color", variant="light", color="#1D72FE")
    ]),

    dmc.Text("Outline variant", size="sm", mb=5, mt="md", fw=500),
    dmc.Group([
        dmc.Button("Theme color", variant="outline", color="cyan"),
        dmc.Button("Hex color", variant="outline", color="#1D72FE")
    ])
])



================================================
File: docs/colors/colors.md
================================================
---
name: Colors
description: How to use colors with Dash Mantine Components.
endpoint: /colors
package: dash_mantine_components
category: Theming
order: 3  # sets order in navbar section
---

.. toc::

Mantine uses [open-color](https://yeun.github.io/open-color/) in default theme with some additions. Each color has 10 shades.


### Colors in the default theme

Colors are stored in the [theme object](/theme-object) as an array of strings. Each color is indexed from `0` (lightest) to `9`
(darkest). The default theme is available as `dmc.DEFAULT_THEME`, which contains all theme properties with their default values.

For example, access a specific shade by using the color name and index: `dmc.DEFAULT_THEME['colors']['blue'][1]`
Colors with larger indices are darker.

.. exec::docs.colors.theme_colors

When using the `color` or other style props like `c`, `bd` or `bg` prop, you can use just the color.index:

.. exec::docs.colors.primaryshade

### Colors as CSS Variables

Mantine also exposes colors as CSS variables. A complete list of Mantine CSS variables is available in the 
[Mantine Docs](https://mantine.dev/styles/css-variables-list/).

If you define custom colors in the `theme` object (via the `MantineProvider` component), these will also be included as
CSS variables.

```python
import dash_mantine_components as dmc
from dash import html

component = html.Div(
    " This is a blue theme",
    style={
        "backgroundColor": "var(--mantine-color-blue-1)",
        "color": "var(--mantine-color-blue-9)",
        "padding": "var(--mantine-spacing-lg)",
    }
)
```

### Adding extra colors
You can add any number of extra colors to `theme.colors` object. This will allow you to use them in all components that
support color prop, for example `Button`, `Badge` and `Switch`.


.. exec::docs.colors.custom_colors
    :code: false

```python
import dash_mantine_components as dmc

dmc.MantineProvider(
    theme={
        "colors": {
            "myColor": [                
              "#F2FFB6",
              "#DCF97E",
              "#C3E35B",
              "#AAC944",
              "#98BC20",
              "#86AC09",
              "#78A000",
              "#668B00",
              "#547200",
              "#455D00",                
            ]
        },
    },
    children=[dmc.Button("Custom Colors!", color="myColor")],
)
```
### Changing colors

You can override named theme colors as well, by providing your own list of 10 colors

```python

dmc.MantineProvider(
    theme={
        "colors": {
            "blue": [... ] # your 10 colors for "blue" theme color
        }
    }
)
```

> 10 shades per color
>
> Colors override must include at least 10 shades per color. Otherwise, you will get a TypeScript error and some 
> variants will not have proper colors. If you only have one color value, you can either pick the remaining colors 
> manually or use the [colors generator tool](https://mantine.dev/colors-generator/).
> 
> You can add more than 10 shades per color: these values will not be used by Mantine components with the default 
> colors resolver, but you can still reference them by index, for example, color="blue.11".



### Supported color formats
You can use the following color formats in theme.colors:

- HEX: #fff, #ffffff
- RGB: rgb(255, 255, 255), rgba(255, 255, 255, 0.5)
- HSL: hsl(0, 0%, 100%), hsla(0, 0%, 100%, 0.5)
- OKLCH: oklch(96.27% 0.0217 238.66), oklch(96.27% 0.0217 238.66 / 0.5)

### Changing Theme Object defaults

You can change the defaults for `primaryColor` and `primaryShade` in the [theme object](/theme-object) in the
`MantineProvider` component.

#### primaryColor

The value of `theme.primaryColor` must be defined as key of `theme.colors`, it is used:

- As a default value for most of the components that support color prop
- To set default focus ring outline color

You can customize the primary color by changing it from its default value of `blue` to another predefined theme color.  

This example changed the default primary color to `green`:

```python
dmc.MantineProvider(
    theme={"primaryColor": "green"},
    children=[] # your layout here
    
)
```

> Note You cannot assign CSS color values to `defaultColor`  It must be a defined color in the `theme` object.



#### primaryShade

`theme.primaryShade` is a number from 0 to 9. It determines which shade will be used for the components that have color prop.

.. exec::docs.colors.primaryshade
    :code: false
  
```python
dmc.MantineProvider(
    theme={"primaryShade": 3},
    children=dmc.Group([
        dmc.Button("Button",),
        dmc.Button("Button", variant="light"),
        dmc.Button("Button", variant="outline")
    ])
    
)
```

You can also customize primary shade for dark and light color schemes separately (This is the default):


```python
dmc.MantineProvider(
    theme={"primaryShade": { "light": 6, "dark": 8 }},
    children=[] # your layout here
    
)
```

### Color prop
Components that support changing their color have color prop. This prop supports the following values:

- Key of `theme.colors`, for example, `blue` or `green`
- Key of `theme.colors` with color index, for example, `blue.5` or `green.9`
- CSS color value, for example, #fff or rgba(0, 0, 0, 0.5)


.. exec::docs.colors.color_prop

### Colors index reference
You can reference colors by index in `color` prop and style props, for example `c` prop:


.. exec::docs.colors.color_index
    :code: false

```python
dmc.Text("Text with blue.5 color", c="blue.5")
dmc.Button("Button", color="blue.5")
```

### Difference between color and c props
`color` prop is used to control multiple CSS properties of the component. These properties can vary across different
components, but usually `color` prop controls `background`, `color` and `border-color` CSS properties. For example,
when you set `color='#C3FF36'` on `Button` component (with `variant='filled'`), it will set the following CSS properties:

- `background-color` to `#C3FF36`
- `background-color` when button is hovered to `#B0E631` (`#C3FF36` darkened by 10%)
- color to `var(--mantine-color-white)`
- `border-color` to `transparent`

`c` is a [style prop](/style-props) – it is responsible for setting a single CSS property `color` (color of the text). 
You can combine both props to achieve better contrast between text and background. In the following example:

- `color` prop sets all background: #C3FF36 and color: `var(--mantine-color-white)`
- `c` prop overrides color styles to `color: var(--mantine-color-black)`


.. exec::docs.colors.color_c_props

### Colors in light and dark mode

#### Using light-dark() CSS Function
The [light-dark()](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/light-dark) function allows defining different styles for light and dark color schemes.

```css
background-color: light-dark(white, black);
```

- The first argument applies in light mode.
- The second argument applies in dark mode.

Note that the light-dark() function is not supported in older browsers.

.. exec::docs.colors.light-dark-function


#### CSS Class Names for Light/Dark Mode

Since light-dark() is not supported in older browsers, you can use class-based styling instead:

.. exec::docs.colors.light-dark
    :code: false


.. sourcetabs::docs/colors/light-dark.py, assets/examples/light-dark-demo.css
    :defaultExpanded: true
    :withExpandedButton: true


#### CSS Variables for Light/Dark Mode

Defining CSS variables on the `:root` element allows global styling across your app, including the `body` element.

Here is an example using a CSS variable:

.. exec::docs.colors.light-dark-var
    :code: false


.. sourcetabs::docs/colors/light-dark-var.py, assets/examples/light-dark-var.css
    :defaultExpanded: true
    :withExpandedButton: true


### Default colors


.. exec::docs.colors.colorswatch


### Default colors: CSS Variables list

For a list of all Mantine CSS variables that are generated from default theme, see the [Mantine docs](https://mantine.dev/styles/css-variables-list/)



================================================
File: docs/colors/colorswatch.py
================================================
import dash_mantine_components as dmc

colors = dmc.DEFAULT_THEME["colors"]

component= dmc.SimpleGrid([
    dmc.Card([
        dmc.Box(h=100, w=100, bg=f"{c}.{i}" ),
        dmc.Text(f"{c} {i}", size="sm"),
        dmc.Text(f"{colors[c][i]}", size="sm", c="dimmed")
    ])  for c in list(colors) for i in range(10)
], cols={ "base": 5,  "lg": 10 }, spacing="xs")




================================================
File: docs/colors/custom_colors.py
================================================
import dash_mantine_components as dmc

component = dmc.Button("Custom Colors!", color="myColor")



================================================
File: docs/colors/light-dark-function.py
================================================
import dash_mantine_components as dmc

component = dmc.Box([

    dmc.Text(
        "Click the theme switch in the header to see how the background changes in different modes:"
    ),
    # Using CSS color names
    dmc.Text(
        "light-dark(whitesmoke, gray)",
        style={"backgroundColor": "light-dark(whitesmoke, gray)"},
        p="lg",
        m="md"
    ),
    # Using Mantine CSS variables
    dmc.Text(
        "light-dark(var(--mantine-color-blue-1), var(--mantine-color-blue-9))",
        style={"backgroundColor": "light-dark(var(--mantine-color-blue-1), var(--mantine-color-blue-9))"},
        p="lg",
        m="md"
    )
])


================================================
File: docs/colors/light-dark-var.py
================================================
import dash_mantine_components as dmc

component = dmc.Box([

    dmc.Text(
        "Click the theme switch in the header to see how the background changes in different modes:"
    ),
    dmc.Text(
        "CSS variable defined for light and dark scheme",
        style={"backgroundColor": "var(--my-light-dark-colors"},
        p="lg",
        m="md"
    ),
])


================================================
File: docs/colors/light-dark.py
================================================
import dash_mantine_components as dmc

component = dmc.Box([

    dmc.Text(
        "Click the theme switch in the header to see how the background changes in different modes"
    ),
    dmc.Text(
        "CSS class defined for light and dark scheme",
        className="light-dark-demo",
        p="lg",
        m="md"
    ),
])


================================================
File: docs/colors/primaryshade.py
================================================
import dash_mantine_components as dmc

component = dmc.Group([
    dmc.Button("Button", color="blue.3"),
    dmc.Button("Button", variant="light", color="blue.3"),
    dmc.Button("Button", variant="outline", color="blue.3")
])



================================================
File: docs/colors/theme_colors.py
================================================
import dash_mantine_components as dmc
from dash import html

component = html.Div(
    " This is a blue element",
    style={
        "backgroundColor": dmc.DEFAULT_THEME["colors"]["blue"][1],
        "color": dmc.DEFAULT_THEME["colors"]["blue"][9],
        "padding": dmc.DEFAULT_THEME["spacing"]["lg"]
    }
)


================================================
File: docs/compositechart/axislabels.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    type="stacked",
    xAxisLabel="Date",
    yAxisLabel="Amount",
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    xAxisLabel="Date",
    yAxisLabel="Amount",
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)



================================================
File: docs/compositechart/chartcolor.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    withLegend=True,
    maxBarWidth=30,
    series=[
        {"name": "Apples", "color": "blue", "type": "line"},
    ]
)



================================================
File: docs/compositechart/clickdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data

component = dmc.Group(
    [
        dmc.CompositeChart(
            id="figure-compositechart",
            h=300,
            data=data,
            dataKey="date",
            withLegend=True,
            maxBarWidth=30,
            series=[
                {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
                {"name": "Apples", "color": "red.8", "type": "line"},
                {"name": "Oranges", "color": "yellow.8", "type": "area"},
            ]
        ),
        dmc.Text(id="clickdata-compositechart1"),
        dmc.Text(id="clickdata-compositechart2"),
    ]
)

@callback(
    Output("clickdata-compositechart1", "children"),
    Output("clickdata-compositechart2", "children"),
    Input("figure-compositechart", "clickData"),
    Input("figure-compositechart", "clickSeriesName"),
)
def update(data, name):
    return f"clickData:  {data}", f"clickSeriesName: {name}"




================================================
File: docs/compositechart/compositechart.md
================================================
---
name: CompositeChart
description: Composed chart with support for Area, Bar and Line charts
endpoint: /components/compositechart
package: dash_mantine_components
category: Charts
---

.. toc::

### Introduction

.. exec::docs.compositechart.interactive
    :code: false

```python

import dash_mantine_components as dmc
from .data import data

dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    withLegend=True,
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)

```

### Data

Here is the data used in all the examples on this page:

```python
data = [
    {
        "date": "Mar 22",
        "Apples": 2890,
        "Oranges": 2338,
        "Tomatoes": 2452,
    },
    {
        "date": "Mar 23",
        "Apples": 2756,
        "Oranges": 2103,
        "Tomatoes": 2402,
    },
    {
        "date": "Mar 24",
        "Apples": 3322,
        "Oranges": 986,
        "Tomatoes": 1821,
    },
    {
        "date": "Mar 25",
        "Apples": 3470,
        "Oranges": 2108,
        "Tomatoes": 2809,
    },
    {
        "date": "Mar 26",
        "Apples": 3129,
        "Oranges": 1726,
        "Tomatoes": 2290,
    },
]

```


### Legend
To display chart legend, set `withLegend` prop. When one of the items in the legend is hovered, the corresponding data
series is highlighted in the chart.

.. exec::docs.compositechart.legend


### Legend position
You can pass props down to recharts `Legend` component with `legendProps` prop. For example, setting the following will
render the legend at the bottom of the chart and set its height to 50px.

```python
legendProps={"verticalAlign": "bottom", "height": 50} 
```

.. exec::docs.compositechart.legendposition


### Series labels
By default, series `name` is used as a label. To change it, set `label` property in `series` object:

.. exec::docs.compositechart.serieslabels

### Points labels

To display labels on data points, set `withPointLabels=True`. This feature is supported only for Line and Area charts:

.. exec::docs.compositechart.pointslabels

### X and Y axis props
Use `xAxisProps` and `yAxisProps` to pass props down to recharts `XAxis` and `YAxis` components. For example, these
props can be used to change orientation of axis:

.. exec::docs.compositechart.xyaxis

### Axis labels
Use `xAxisLabel` and `yAxisLabel` props to display axis labels:

.. exec::docs.compositechart.axislabels


### X axis offset
Use `xAxisProps` to set padding between the charts ends and the x-axis:

.. exec::docs.compositechart.xaxisoffset

### Y axis scale
Use `yAxisProps` to change domain of the Y axis. For example, if you know that your data will always be in the range
of 0 to 150, you can set domain to `[0, 150]`:

.. exec::docs.compositechart.yaxisscale


### Chart color

You can reference colors from theme the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

.. exec::docs.compositechart.chartcolor



### Change chart color depending on color scheme
You can use CSS variables in color property. Learn more in the Theming section under [Colors.](/colors#colors-in-light-and-dark-mode)

Example of line color that is dark orange in light mode and lime in dark mode:


.. exec::docs.compositechart.line-color-light-dark
    :code: false


.. sourcetabs::docs/compositechart/line-color-light-dark.py, assets/examples/chart-color.css
    :defaultExpanded: true
    :withExpandedButton: true


### Stroke dash array
Set `strokeDasharray` prop to control the stroke dash array of the grid and cursor lines. The value represent the lengths of alternating dashes and gaps. For example, strokeDasharray="10 5" will render a dashed line with 10px dashes and 5px gaps.

.. exec::docs.compositechart.strokedasharray



### Grid and text colors
Use `--chart-grid-color` and `--chart-text-color` to change colors of grid lines and text within the chart. 
With CSS , you can change colors depending on color scheme.  Learn more in the Theming section under [Colors.](/colors#colors-in-light-and-dark-mode)

.. exec::docs.compositechart.grid-text-color-light-dark
    :code: false


.. sourcetabs::docs/compositechart/grid-text-color-light-dark.py, assets/examples/chart-grid-text-colors.css
    :defaultExpanded: true
    :withExpandedButton: true

If your application has only one color scheme, you can use `gridColor` and `textColor` props instead of CSS variables:

```python
dmc.CompositeChart(
    h=300,
    dataKey="date",
    data=data,
    maxBarWidth=30,
    gridColor="gray.5",
    textColor="gray.9",
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)

```




### Tooltip animation
By default, tooltip animation is disabled. To enable it, set `tooltipAnimationDuration` prop to a number of milliseconds to animate the tooltip position change.

.. exec::docs.compositechart.tooltipanimation



### Units
Set `unit` prop to render a unit label next to the y-axis ticks and tooltip values:

.. exec::docs.compositechart.units

### Remove tooltip
To remove tooltip, set `withTooltip=false`. It also removes the cursor line and disables interactions with the chart.

.. exec::docs.compositechart.removetooltip

### Customize dots
Use `dotProps` to pass props down to recharts dot in regular state and `activeDotProps` to pass props down to recharts
dot in active state (when cursor is over the current series).

.. exec::docs.compositechart.customizedots

### Stroke width
Use `strokeWidth` prop to control the stroke width of all areas/lines:


.. exec::docs.compositechart.strokewidth


### Sync multiple charts
You can pass props down to recharts [ComposedChart](https://recharts.org/en-US/api/ComposedChart) component with
`composedChartProps` prop. For example, setting the following will sync tooltip of multiple `CompositeChart` components
with the same `syncId` prop.

```python 
composedChartProps={"syncId": "any-id"}
```

.. exec::docs.compositechart.sync

### Dashed lines
Set `strokeDasharray` property in series to change line style to dashed:


.. exec::docs.compositechart.dashedlines


### Reference lines

Use `referenceLines` prop to render reference lines. Reference lines are always rendered behind the chart.

.. exec::docs.compositechart.referencelines


### clickData
Use the `clickData` property in a callback to retrieve data from the most recent click event.
To get the name of the clicked series, use the `clickSeriesName` property.

.. exec::docs.compositechart.clickdata


### hoverData
Use the `hoverData` property in a callback to retrieve data from the most recent hover event.
To get the name of the hovered series, use the `hoverSeriesName` property.

.. exec::docs.compositechart.hoverdata


### highlightHover

Set `highlightHover=True` to highlight the series when hovered, mirroring the behavior of hovering over chart legend items.

.. exec::docs.compositechart.highlighthover


### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### CompositeChart selectors 

| Selector           | Static selector                           | Description                                   |
|--------------------|-------------------------------------------|-----------------------------------------------|
| root               | .mantine-CompositeChart-root              | Root element                                  |
| area               | .mantine-CompositeChart-area              | Area of the chart                             |
| line               | .mantine-CompositeChart-line              | Line of the chart                             |
| bar                | .mantine-CompositeChart-bar               | Bar of the chart                              |
| axis               | .mantine-CompositeChart-axis              | X and Y axis of the chart                     |
| container          | .mantine-CompositeChart-container         | Recharts ResponsiveContainer component        |
| grid               | .mantine-CompositeChart-grid              | Recharts CartesianGrid component              |
| legend             | .mantine-CompositeChart-legend            | Legend root element                           |
| legendItem         | .mantine-CompositeChart-legendItem        | Legend item representing data series          |
| legendItemColor    | .mantine-CompositeChart-legendItemColor   | Legend item color                             |
| legendItemName     | .mantine-CompositeChart-legendItemName    | Legend item name                              |
| tooltip            | .mantine-CompositeChart-tooltip           | Tooltip root element                          |
| tooltipBody        | .mantine-CompositeChart-tooltipBody       | Tooltip wrapper around all items              |
| tooltipItem        | .mantine-CompositeChart-tooltipItem       | Tooltip item representing data series         |
| tooltipItemBody    | .mantine-CompositeChart-tooltipItemBody   | Tooltip item wrapper around item color and name |
| tooltipItemColor   | .mantine-CompositeChart-tooltipItemColor  | Tooltip item color                            |
| tooltipItemName    | .mantine-CompositeChart-tooltipItemName   | Tooltip item name                             |
| tooltipItemData    | .mantine-CompositeChart-tooltipItemData   | Tooltip item data                             |
| tooltipLabel       | .mantine-CompositeChart-tooltipLabel      | Label of the tooltip                          |
| referenceLine      | .mantine-CompositeChart-referenceLine     | Reference line                                |
| axisLabel          | .mantine-CompositeChart-axisLabel         | X and Y axis labels                           |


### Composite CSS variables

| Selector         | Variable             | Description                                      |
|:-----------------|:---------------------|:-------------------------------------------------|
| root             | --chart-grid-color   | Controls color of the grid and cursor lines      |
|                  | --chart-text-color   | Controls color of the axis labels                |



### Keyword Arguments

#### CompositeChart

.. kwargs::CompositeChart



================================================
File: docs/compositechart/customizedots.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    dotProps={"r": 6, "strokeWidth": 2, "stroke": "#fff"},
    activeDotProps={"r": 8, "strokeWidth": 1, "fill": "#fff"},
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)



================================================
File: docs/compositechart/dashedlines.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    strokeWidth=1,
    dotProps={"r": 2},
    activeDotProps={"r": 3, "strokeWidth": 1},
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line", "strokeDasharray": "5 5"},
        {"name": "Oranges", "color": "yellow.8", "type": "area", "strokeDasharray": "5 5"},
    ]
)


================================================
File: docs/compositechart/data.py
================================================
data = [
    {
        "date": "Mar 22",
        "Apples": 2890,
        "Oranges": 2338,
        "Tomatoes": 2452,
    },
    {
        "date": "Mar 23",
        "Apples": 2756,
        "Oranges": 2103,
        "Tomatoes": 2402,
    },
    {
        "date": "Mar 24",
        "Apples": 3322,
        "Oranges": 986,
        "Tomatoes": 1821,
    },
    {
        "date": "Mar 25",
        "Apples": 3470,
        "Oranges": 2108,
        "Tomatoes": 2809,
    },
    {
        "date": "Mar 26",
        "Apples": 3129,
        "Oranges": 1726,
        "Tomatoes": 2290,
    },
]



================================================
File: docs/compositechart/grid-text-color-light-dark.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    dataKey="date",
    data=data,
    maxBarWidth=30,
    className="chart-grid-text-colors",
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)



================================================
File: docs/compositechart/highlighthover.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    withLegend=True,
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ],
    withTooltip=False,
    highlightHover=True
)



================================================
File: docs/compositechart/hoverdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data

component = dmc.Group(
    [
        dmc.CompositeChart(
            id="figure-compositechart-hover",
            h=300,
            data=data,
            dataKey="date",
            withLegend=True,
            maxBarWidth=30,
            series=[
                {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
                {"name": "Apples", "color": "red.8", "type": "line"},
                {"name": "Oranges", "color": "yellow.8", "type": "area"},
            ]
        ),
        dmc.Text(id="hoverdata-compositechart1"),
        dmc.Text(id="hoverdata-compositechart2"),
    ]
)

@callback(
    Output("hoverdata-compositechart1", "children"),
    Output("hoverdata-compositechart2", "children"),
    Input("figure-compositechart-hover", "hoverData"),
    Input("figure-compositechart-hover", "hoverSeriesName"),
)
def update(data, name):
    return f"hoverData:  {data}", f"hoverSeriesName: {name}"




================================================
File: docs/compositechart/interactive.py
================================================
import dash_mantine_components as dmc
from .data import data

from lib.configurator import Configurator

target =dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    withLegend=True,
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)

configurator = Configurator(target)


configurator.add_select(
    "curveType",
    ["Bump", "Linear", "Natural", "Monotone", "Step", "StepBefore", "StepAfter"],
    "Linear",
)

configurator.add_segmented_control("tickLine", ["x", "y", "xy", "none"], "xy")
configurator.add_segmented_control("gridAxis", ["x", "y", "xy", "none"], "x")
configurator.add_switch("withXAxis", True)
configurator.add_switch("withYAxis", True)


component = configurator.panel



================================================
File: docs/compositechart/legend.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    withLegend=True,
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)



================================================
File: docs/compositechart/legendposition.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    withLegend=True,
    maxBarWidth=30,
    legendProps={"verticalAlign": "bottom", "height": 50},
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)



================================================
File: docs/compositechart/line-color-light-dark.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    dataKey="date",
    data=data,
    series=[{"name": "Apples", "color": "var(--chart-color)", "type": "line" }],
)




================================================
File: docs/compositechart/pointslabels.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    withPointLabels=True,
    withLegend=True,
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)



================================================
File: docs/compositechart/referencelines.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    yAxisProps={"domain": [0, 100]},
    referenceLines=[
        {"y": 1200, "label": "Average sales", "color": "red.6"},
        {"x": "Mar 25", "label": "Report out", "color": "blue.7"},
    ],
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
    ]
)


================================================
File: docs/compositechart/removetooltip.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    withTooltip=False,
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)



================================================
File: docs/compositechart/serieslabels.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    withLegend=True,
    legendProps={"verticalAlign": "bottom"},
    maxBarWidth=30,
    series=[
        {
            "name": "Tomatoes",
            "label": "Tomatoes sales",
            "color": "rgba(18, 120, 255, 0.2)",
            "type": "bar",
        },
        {
            "name": "Apples",
            "label": "Apples sales",
            "color": "red.8",
            "type": "line",
        },
        {
            "name": "Oranges",
            "label": "Oranges sales",
            "color": "yellow.8",
            "type": "area",
        },
    ]
)



================================================
File: docs/compositechart/strokedasharray.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    strokeDasharray="15 15",
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)



================================================
File: docs/compositechart/strokewidth.py
================================================
import dash_mantine_components as dmc
from .data import data
from lib.configurator import Configurator

target = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    strokeWidth=2,
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)

configurator = Configurator(target)

configurator.add_number_slider("strokeWidth", 2, min=0.5, max=5)

component = configurator.panel



================================================
File: docs/compositechart/sync.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.Stack(
    [

        dmc.Text("Apples sales:", mb="md", pl="md"),
        dmc.CompositeChart(
            h=180,
            data=data,
            dataKey="date",
            series=[{"name": "Apples", "color": "indigo.6", "type": "area"}],
            composedChartProps={"syncId": "groceries"}
        ),
        dmc.Text("Tomatoes sales:", mb="md", pl="md", mt="xl"),
        dmc.CompositeChart(
            h=180,
            data=data,
            dataKey="date",
            series=[{"name": "Tomatoes", "color": "cyan.6", "type": "bar"}],
            composedChartProps={"syncId": "groceries"}
        )
    ]
)



================================================
File: docs/compositechart/tooltipanimation.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    tooltipAnimationDuration=200,
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)



================================================
File: docs/compositechart/units.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    unit="$",
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)



================================================
File: docs/compositechart/xaxisoffset.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.BarChart(
    h=300,
    dataKey="month",
    data=data,
    type="stacked",
    xAxisProps={"padding": {"left": 30, "right": 30}},
    series=[
        {"name": "Smartphones", "color": "violet.6"},
        {"name": "Laptops", "color": "blue.6"},
        {"name": "Tablets", "color": "teal.6"},
    ],
)

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    xAxisProps={"padding": {"left": 30, "right": 30}},
    maxBarWidth=30,
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)



================================================
File: docs/compositechart/xyaxis.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    tickLine="xy",
    yAxisProps={"tickMargin": 15, "orientation": "right"},
    xAxisProps={"tickMargin": 15, "orientation": "top"},
    series=[
        {"name": "Tomatoes", "color": "rgba(18, 120, 255, 0.2)", "type": "bar"},
        {"name": "Apples", "color": "red.8", "type": "line"},
        {"name": "Oranges", "color": "yellow.8", "type": "area"},
    ]
)



================================================
File: docs/compositechart/yaxisscale.py
================================================
import dash_mantine_components as dmc

data = [
    {"date": "Mar 22", "Apples": 50},
    {"date": "Mar 23", "Apples": 60},
    {"date": "Mar 24", "Apples": 40},
    {"date": "Mar 25", "Apples": 30},
    {"date": "Mar 26", "Apples": 0},
    {"date": "Mar 27", "Apples": 20},
    {"date": "Mar 28", "Apples": 20},
    {"date": "Mar 29", "Apples": 10},
]

component = dmc.CompositeChart(
    h=300,
    data=data,
    dataKey="date",
    yAxisProps={"domain": [0, 100]},
    withLegend=True,
    maxBarWidth=30,
    series=[
        {"name": "Apples", "color": "red.8", "type": "line"},
    ]
)



================================================
File: docs/container/container.md
================================================
---
name: Container
description: Container is the most basic layout element, it centers content horizontally and adds horizontal padding from theme.
endpoint: /components/container
package: dash_mantine_components
category: Layout
---

.. toc::

### Simple Example

Container is the most basic layout element, it centers content horizontally and adds horizontal padding from Mantine's 
theme.

Component accepts these props:

  * `size` – controls default max width 
  * `fluid` – overwrites size prop and sets max width to 100%

.. exec::docs.container.simple

### Fluid
Set `fluid` prop to make container fluid, it will take 100% of available width, it is the same as setting `size="100%"`.

.. exec::docs.container.fluid



### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### Container Selectors

| Selector | Static selector            | Description   |
|----------|-----------------------------|---------------|
| root     | .mantine-Container-root     | Root element  |


#### Container CSS Variables

| Selector | Variable          | Description               |
|----------|-------------------|---------------------------|
| root     | --container-size  | Controls container max-width |



### Keyword Arguments

#### Container

.. kwargs::Container



================================================
File: docs/container/fluid.py
================================================
import dash_mantine_components as dmc
from dash import html


component = dmc.Container(
    "Fluid container has 100% max-width",
    fluid=True,
    h=50,
    bg="var(--mantine-color-blue-light)"
)



================================================
File: docs/container/simple.py
================================================
import dash_mantine_components as dmc
from dash import html

style = {
    "height": 100,
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "marginTop": 20,
    "marginBottom": 20,
}

component = html.Div(
    children=[
        dmc.Container("Default container", style=style),
        dmc.Container(
            "xs container with xs horizontal padding", size="xs", px="xs", style=style
        ),
        dmc.Container(
            "200px container with 0px horizontal padding", size=200, px=0, style=style
        ),
    ]
)



================================================
File: docs/cssvariables/button.py
================================================
import dash_mantine_components as dmc

component = dmc.Button("Pink filled button", color="pink", variant="filled")


================================================
File: docs/cssvariables/cssvariable_list.py
================================================
import dash_mantine_components as dmc


css_variables =  [
    {"--mantine-scale": "1"},
    {"--mantine-cursor-type": "default"},
    {"--mantine-color-scheme": "light dark"},
    {"--mantine-webkit-font-smoothing": "antialiased"},
    {"--mantine-moz-font-smoothing": "grayscale"},
    {"--mantine-color-white": "#fff"},
    {"--mantine-color-black": "#000"},
    {"--mantine-line-height": "1.55"},
    {"--mantine-font-family": "-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji"},
    {"--mantine-font-family-monospace": "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, Liberation Mono, Courier New, monospace"},
    {"--mantine-font-family-headings": "-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji"},
    {"--mantine-heading-font-weight": "700"},
    {"--mantine-heading-text-wrap": "wrap"},
    {"--mantine-radius-default": "0.25rem"},
    {"--mantine-primary-color-filled": "var(--mantine-color-blue-filled)"},
    {"--mantine-primary-color-filled-hover": "var(--mantine-color-blue-filled-hover)"},
    {"--mantine-primary-color-light": "var(--mantine-color-blue-light)"},
    {"--mantine-primary-color-light-hover": "var(--mantine-color-blue-light-hover)"},
    {"--mantine-primary-color-light-color": "var(--mantine-color-blue-light-color)"},
    {"--mantine-breakpoint-xs": "36em"},
    {"--mantine-breakpoint-sm": "48em"},
    {"--mantine-breakpoint-md": "62em"},
    {"--mantine-breakpoint-lg": "75em"},
    {"--mantine-breakpoint-xl": "88em"},
    {"--mantine-spacing-xs": "0.625rem"},
    {"--mantine-spacing-sm": "0.75rem"},
    {"--mantine-spacing-md": "1rem"},
    {"--mantine-spacing-lg": "1.25rem"},
    {"--mantine-spacing-xl": "2rem"},
    {"--mantine-font-size-xs": "0.75rem"},
    {"--mantine-font-size-sm": "0.875rem"},
    {"--mantine-font-size-md": "1rem"},
    {"--mantine-font-size-lg": "1.125rem"},
    {"--mantine-font-size-xl": "1.25rem"},
    {"--mantine-line-height-xs": "1.4"},
    {"--mantine-line-height-sm": "1.45"},
    {"--mantine-line-height-md": "1.55"},
    {"--mantine-line-height-lg": "1.6"},
    {"--mantine-line-height-xl": "1.65"},
    {"--mantine-shadow-xs": "0 0.0625rem 0.1875rem rgba(0, 0, 0, 0.05), 0 0.0625rem 0.125rem rgba(0, 0, 0, 0.1)"},
    {"--mantine-shadow-sm": "0 0.0625rem 0.1875rem rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 0.625rem 0.9375rem -0.3125rem, rgba(0, 0, 0, 0.04) 0 0.4375rem 0.4375rem -0.3125rem"},
    {"--mantine-shadow-md": "0 0.0625rem 0.1875rem rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 1.25rem 1.5625rem -0.3125rem, rgba(0, 0, 0, 0.04) 0 0.625rem 0.625rem -0.3125rem"},
    {"--mantine-shadow-lg": "0 0.0625rem 0.1875rem rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 1.75rem 1.4375rem -0.4375rem, rgba(0, 0, 0, 0.04) 0 0.75rem 0.75rem -0.4375rem"},
    {"--mantine-shadow-xl": "0 0.0625rem 0.1875rem rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 2.25rem 1.75rem -0.4375rem, rgba(0, 0, 0, 0.04) 0 1.0625rem 1.0625rem -0.4375rem"},
    {"--mantine-radius-xs": "0.125rem"},
    {"--mantine-radius-sm": "0.25rem"},
    {"--mantine-radius-md": "0.5rem"},
    {"--mantine-radius-lg": "1rem"},
    {"--mantine-radius-xl": "2rem"},
    {"--mantine-primary-color-0": "var(--mantine-color-blue-0)"},
    {"--mantine-primary-color-1": "var(--mantine-color-blue-1)"},
    {"--mantine-primary-color-2": "var(--mantine-color-blue-2)"},
    {"--mantine-primary-color-3": "var(--mantine-color-blue-3)"},
    {"--mantine-primary-color-4": "var(--mantine-color-blue-4)"},
    {"--mantine-primary-color-5": "var(--mantine-color-blue-5)"},
    {"--mantine-primary-color-6": "var(--mantine-color-blue-6)"},
    {"--mantine-primary-color-7": "var(--mantine-color-blue-7)"},
    {"--mantine-primary-color-8": "var(--mantine-color-blue-8)"},
    {"--mantine-primary-color-9": "var(--mantine-color-blue-9)"},
    {"--mantine-color-dark-0": "#C9C9C9"},
    {"--mantine-color-dark-1": "#b8b8b8"},
    {"--mantine-color-dark-2": "#828282"},
    {"--mantine-color-dark-3": "#696969"},
    {"--mantine-color-dark-4": "#424242"},
    {"--mantine-color-dark-5": "#3b3b3b"},
    {"--mantine-color-dark-6": "#2e2e2e"},
    {"--mantine-color-dark-7": "#242424"},
    {"--mantine-color-dark-8": "#1f1f1f"},
    {"--mantine-color-dark-9": "#141414"},
    {"--mantine-color-gray-0": "#f8f9fa"},
    {"--mantine-color-gray-1": "#f1f3f5"},
    {"--mantine-color-gray-2": "#e9ecef"},
    {"--mantine-color-gray-3": "#dee2e6"},
    {"--mantine-color-gray-4": "#ced4da"},
    {"--mantine-color-gray-5": "#adb5bd"},
    {"--mantine-color-gray-6": "#868e96"},
    {"--mantine-color-gray-7": "#495057"},
    {"--mantine-color-gray-8": "#343a40"},
    {"--mantine-color-gray-9": "#212529"},
    {"--mantine-color-red-0": "#fff5f5"},
    {"--mantine-color-red-1": "#ffe3e3"},
    {"--mantine-color-red-2": "#ffc9c9"},
    {"--mantine-color-red-3": "#ffa8a8"},
    {"--mantine-color-red-4": "#ff8787"},
    {"--mantine-color-red-5": "#ff6b6b"},
    {"--mantine-color-red-6": "#fa5252"},
    {"--mantine-color-red-7": "#f03e3e"},
    {"--mantine-color-red-8": "#e03131"},
    {"--mantine-color-red-9": "#c92a2a"},
    {"--mantine-color-pink-0": "#fff0f6"},
    {"--mantine-color-pink-1": "#ffdeeb"},
    {"--mantine-color-pink-2": "#fcc2d7"},
    {"--mantine-color-pink-3": "#faa2c1"},
    {"--mantine-color-pink-4": "#f783ac"},
    {"--mantine-color-pink-5": "#f06595"},
    {"--mantine-color-pink-6": "#e64980"},
    {"--mantine-color-pink-7": "#d6336c"},
    {"--mantine-color-pink-8": "#c2255c"},
    {"--mantine-color-pink-9": "#a61e4d"},
    {"--mantine-color-grape-0": "#f8f0fc"},
    {"--mantine-color-grape-1": "#f3d9fa"},
    {"--mantine-color-grape-2": "#eebefa"},
    {"--mantine-color-grape-3": "#e599f7"},
    {"--mantine-color-grape-4": "#da77f2"},
    {"--mantine-color-grape-5": "#cc5de8"},
    {"--mantine-color-grape-6": "#be4bdb"},
    {"--mantine-color-grape-7": "#ae3ec9"},
    {"--mantine-color-grape-8": "#9c36b5"},
    {"--mantine-color-grape-9": "#862e9c"},
    {"--mantine-color-violet-0": "#f3f0ff"},
    {"--mantine-color-violet-1": "#e5dbff"},
    {"--mantine-color-violet-2": "#d0bfff"},
    {"--mantine-color-violet-3": "#b197fc"},
    {"--mantine-color-violet-4": "#9775fa"},
    {"--mantine-color-violet-5": "#845ef7"},
    {"--mantine-color-violet-6": "#7950f2"},
    {"--mantine-color-violet-7": "#7048e8"},
    {"--mantine-color-violet-8": "#6741d9"},
    {"--mantine-color-violet-9": "#5f3dc4"},
    {"--mantine-color-indigo-0": "#edf2ff"},
    {"--mantine-color-indigo-1": "#dbe4ff"},
    {"--mantine-color-indigo-2": "#bac8ff"},
    {"--mantine-color-indigo-3": "#91a7ff"},
    {"--mantine-color-indigo-4": "#748ffc"},
    {"--mantine-color-indigo-5": "#5c7cfa"},
    {"--mantine-color-indigo-6": "#4c6ef5"},
    {"--mantine-color-indigo-7": "#4263eb"},
    {"--mantine-color-indigo-8": "#3b5bdb"},
    {"--mantine-color-indigo-9": "#364fc7"},
    {"--mantine-color-blue-0": "#e7f5ff"},
    {"--mantine-color-blue-1": "#d0ebff"},
    {"--mantine-color-blue-2": "#a5d8ff"},
    {"--mantine-color-blue-3": "#74c0fc"},
    {"--mantine-color-blue-4": "#4dabf7"},
    {"--mantine-color-blue-5": "#339af0"},
    {"--mantine-color-blue-6": "#228be6"},
    {"--mantine-color-blue-7": "#1c7ed6"},
    {"--mantine-color-blue-8": "#1971c2"},
    {"--mantine-color-blue-9": "#1864ab"},
    {"--mantine-color-cyan-0": "#e3fafc"},
    {"--mantine-color-cyan-1": "#c5f6fa"},
    {"--mantine-color-cyan-2": "#99e9f2"},
    {"--mantine-color-cyan-3": "#66d9e8"},
    {"--mantine-color-cyan-4": "#3bc9db"},
    {"--mantine-color-cyan-5": "#22b8cf"},
    {"--mantine-color-cyan-6": "#15aabf"},
    {"--mantine-color-cyan-7": "#1098ad"},
    {"--mantine-color-cyan-8": "#0c8599"},
    {"--mantine-color-cyan-9": "#0b7285"},
    {"--mantine-color-teal-0": "#e6fcf5"},
    {"--mantine-color-teal-1": "#c3fae8"},
    {"--mantine-color-teal-2": "#96f2d7"},
    {"--mantine-color-teal-3": "#63e6be"},
    {"--mantine-color-teal-4": "#38d9a9"},
    {"--mantine-color-teal-5": "#20c997"},
    {"--mantine-color-teal-6": "#12b886"},
    {"--mantine-color-teal-7": "#0ca678"},
    {"--mantine-color-teal-8": "#099268"},
    {"--mantine-color-teal-9": "#087f5b"},
    {"--mantine-color-green-0": "#ebfbee"},
    {"--mantine-color-green-1": "#d3f9d8"},
    {"--mantine-color-green-2": "#b2f2bb"},
    {"--mantine-color-green-3": "#8ce99a"},
    {"--mantine-color-green-4": "#69db7c"},
    {"--mantine-color-green-5": "#51cf66"},
    {"--mantine-color-green-6": "#40c057"},
    {"--mantine-color-green-7": "#37b24d"},
    {"--mantine-color-green-8": "#2f9e44"},
    {"--mantine-color-green-9": "#2b8a3e"},
    {"--mantine-color-lime-0": "#f4fce3"},
    {"--mantine-color-lime-1": "#e9fac8"},
    {"--mantine-color-lime-2": "#d8f5a2"},
    {"--mantine-color-lime-3": "#c0eb75"},
    {"--mantine-color-lime-4": "#a9e34b"},
    {"--mantine-color-lime-5": "#94d82d"},
    {"--mantine-color-lime-6": "#82c91e"},
    {"--mantine-color-lime-7": "#74b816"},
    {"--mantine-color-lime-8": "#66a80f"},
    {"--mantine-color-lime-9": "#5c940d"},
    {"--mantine-color-yellow-0": "#fff9db"},
    {"--mantine-color-yellow-1": "#fff3bf"},
    {"--mantine-color-yellow-2": "#ffec99"},
    {"--mantine-color-yellow-3": "#ffe066"},
    {"--mantine-color-yellow-4": "#ffd43b"},
    {"--mantine-color-yellow-5": "#fcc419"},
    {"--mantine-color-yellow-6": "#fab005"},
    {"--mantine-color-yellow-7": "#f59f00"},
    {"--mantine-color-yellow-8": "#f08c00"},
    {"--mantine-color-yellow-9": "#e67700"},
    {"--mantine-color-orange-0": "#fff4e6"},
    {"--mantine-color-orange-1": "#ffe8cc"},
    {"--mantine-color-orange-2": "#ffd8a8"},
    {"--mantine-color-orange-3": "#ffc078"},
    {"--mantine-color-orange-4": "#ffa94d"},
    {"--mantine-color-orange-5": "#ff922b"},
    {"--mantine-color-orange-6": "#fd7e14"},
    {"--mantine-color-orange-7": "#f76707"},
    {"--mantine-color-orange-8": "#e8590c"},
    {"--mantine-color-orange-9": "#d9480f"},
    {"--mantine-h1-font-size": "2.125rem"},
    {"--mantine-h1-line-height": "1.3"},
    {"--mantine-h1-font-weight": "700"},
    {"--mantine-h2-font-size": "1.625rem"},
    {"--mantine-h2-line-height": "1.35"},
    {"--mantine-h2-font-weight": "700"},
    {"--mantine-h3-font-size": "1.375rem"},
    {"--mantine-h3-line-height": "1.4"},
    {"--mantine-h3-font-weight": "700"},
    {"--mantine-h4-font-size": "1.125rem"},
    {"--mantine-h4-line-height": "1.45"},
    {"--mantine-h4-font-weight": "700"},
    {"--mantine-h5-font-size": "1rem"},
    {"--mantine-h5-line-height": "1.5"},
    {"--mantine-h5-font-weight": "700"},
    {"--mantine-h6-font-size": "0.875rem"},
    {"--mantine-h6-line-height": "1.5"},
    {"--mantine-h6-font-weight": "700"},
]

def make_rows(data):
    rows = [
        dmc.Grid([
            dmc.GridCol(dmc.Text(key), span=5),
            dmc.GridCol(dmc.Text(value), span=5),
            dmc.GridCol(dmc.Box(h=24, w=24, bg=value), span=2),
            dmc.GridCol(dmc.Divider(), span=12)
        ])
        for item in data
        for key, value in item.items()
    ]
    return rows


component =  dmc.Box(
    make_rows(css_variables)
)





================================================
File: docs/cssvariables/cssvariable_list_dark.py
================================================
import dash_mantine_components as dmc

dark_color_scheme =  [
    {"--mantine-primary-color-contrast": "var(--mantine-color-white)"},
    {"--mantine-color-bright": "var(--mantine-color-white)"},
    {"--mantine-color-text": "var(--mantine-color-dark-0)"},
    {"--mantine-color-body": "var(--mantine-color-dark-7)"},
    {"--mantine-color-error": "var(--mantine-color-red-8)"},
    {"--mantine-color-placeholder": "var(--mantine-color-dark-3)"},
    {"--mantine-color-anchor": "var(--mantine-color-blue-4)"},
    {"--mantine-color-default": "var(--mantine-color-dark-6)"},
    {"--mantine-color-default-hover": "var(--mantine-color-dark-5)"},
    {"--mantine-color-default-color": "var(--mantine-color-white)"},
    {"--mantine-color-default-border": "var(--mantine-color-dark-4)"},
    {"--mantine-color-dimmed": "var(--mantine-color-dark-2)"},
    {"--mantine-color-dark-text": "var(--mantine-color-dark-4)"},
    {"--mantine-color-dark-filled": "var(--mantine-color-dark-8)"},
    {"--mantine-color-dark-filled-hover": "var(--mantine-color-dark-9)"},
    {"--mantine-color-dark-light": "rgba(46, 46, 46, 0.15)"},
    {"--mantine-color-dark-light-hover": "rgba(46, 46, 46, 0.2)"},
    {"--mantine-color-dark-light-color": "var(--mantine-color-dark-3)"},
    {"--mantine-color-dark-outline": "var(--mantine-color-dark-4)"},
    {"--mantine-color-dark-outline-hover": "rgba(66, 66, 66, 0.05)"},
    {"--mantine-color-gray-text": "var(--mantine-color-gray-4)"},
    {"--mantine-color-gray-filled": "var(--mantine-color-gray-8)"},
    {"--mantine-color-gray-filled-hover": "var(--mantine-color-gray-9)"},
    {"--mantine-color-gray-light": "rgba(134, 142, 150, 0.15)"},
    {"--mantine-color-gray-light-hover": "rgba(134, 142, 150, 0.2)"},
    {"--mantine-color-gray-light-color": "var(--mantine-color-gray-3)"},
    {"--mantine-color-gray-outline": "var(--mantine-color-gray-4)"},
    {"--mantine-color-gray-outline-hover": "rgba(206, 212, 218, 0.05)"},
    {"--mantine-color-red-text": "var(--mantine-color-red-4)"},
    {"--mantine-color-red-filled": "var(--mantine-color-red-8)"},
    {"--mantine-color-red-filled-hover": "var(--mantine-color-red-9)"},
    {"--mantine-color-red-light": "rgba(250, 82, 82, 0.15)"},
    {"--mantine-color-red-light-hover": "rgba(250, 82, 82, 0.2)"},
    {"--mantine-color-red-light-color": "var(--mantine-color-red-3)"},
    {"--mantine-color-red-outline": "var(--mantine-color-red-4)"},
    {"--mantine-color-red-outline-hover": "rgba(255, 135, 135, 0.05)"},
    {"--mantine-color-pink-text": "var(--mantine-color-pink-4)"},
    {"--mantine-color-pink-filled": "var(--mantine-color-pink-8)"},
    {"--mantine-color-pink-filled-hover": "var(--mantine-color-pink-9)"},
    {"--mantine-color-pink-light": "rgba(230, 73, 128, 0.15)"},
    {"--mantine-color-pink-light-hover": "rgba(230, 73, 128, 0.2)"},
    {"--mantine-color-pink-light-color": "var(--mantine-color-pink-3)"},
    {"--mantine-color-pink-outline": "var(--mantine-color-pink-4)"},
    {"--mantine-color-pink-outline-hover": "rgba(247, 131, 172, 0.05)"},
    {"--mantine-color-grape-text": "var(--mantine-color-grape-4)"},
    {"--mantine-color-grape-filled": "var(--mantine-color-grape-8)"},
    {"--mantine-color-grape-filled-hover": "var(--mantine-color-grape-9)"},
    {"--mantine-color-grape-light": "rgba(190, 75, 219, 0.15)"},
    {"--mantine-color-grape-light-hover": "rgba(190, 75, 219, 0.2)"},
    {"--mantine-color-grape-light-color": "var(--mantine-color-grape-3)"},
    {"--mantine-color-grape-outline": "var(--mantine-color-grape-4)"},
    {"--mantine-color-grape-outline-hover": "rgba(218, 119, 242, 0.05)"},
    {"--mantine-color-violet-text": "var(--mantine-color-violet-4)"},
    {"--mantine-color-violet-filled": "var(--mantine-color-violet-8)"},
    {"--mantine-color-violet-filled-hover": "var(--mantine-color-violet-9)"},
    {"--mantine-color-violet-light": "rgba(121, 80, 242, 0.15)"},
    {"--mantine-color-violet-light-hover": "rgba(121, 80, 242, 0.2)"},
    {"--mantine-color-violet-light-color": "var(--mantine-color-violet-3)"},
    {"--mantine-color-violet-outline": "var(--mantine-color-violet-4)"},
    {"--mantine-color-violet-outline-hover": "rgba(151, 117, 250, 0.05)"},
    {"--mantine-color-indigo-text": "var(--mantine-color-indigo-4)"},
    {"--mantine-color-indigo-filled": "var(--mantine-color-indigo-8)"},
    {"--mantine-color-indigo-filled-hover": "var(--mantine-color-indigo-9)"},
    {"--mantine-color-indigo-light": "rgba(76, 110, 245, 0.15)"},
    {"--mantine-color-indigo-light-hover": "rgba(76, 110, 245, 0.2)"},
    {"--mantine-color-indigo-light-color": "var(--mantine-color-indigo-3)"},
    {"--mantine-color-indigo-outline": "var(--mantine-color-indigo-4)"},
    {"--mantine-color-indigo-outline-hover": "rgba(116, 143, 252, 0.05)"},
    {"--mantine-color-blue-text": "var(--mantine-color-blue-4)"},
    {"--mantine-color-blue-filled": "var(--mantine-color-blue-8)"},
    {"--mantine-color-blue-filled-hover": "var(--mantine-color-blue-9)"},
    {"--mantine-color-blue-light": "rgba(34, 139, 230, 0.15)"},
    {"--mantine-color-blue-light-hover": "rgba(34, 139, 230, 0.2)"},
    {"--mantine-color-blue-light-color": "var(--mantine-color-blue-3)"},
    {"--mantine-color-blue-outline": "var(--mantine-color-blue-4)"},
    {"--mantine-color-blue-outline-hover": "rgba(77, 171, 247, 0.05)"},
    {"--mantine-color-cyan-text": "var(--mantine-color-cyan-4)"},
    {"--mantine-color-cyan-filled": "var(--mantine-color-cyan-8)"},
    {"--mantine-color-cyan-filled-hover": "var(--mantine-color-cyan-9)"},
    {"--mantine-color-cyan-light": "rgba(21, 170, 191, 0.15)"},
    {"--mantine-color-cyan-light-hover": "rgba(21, 170, 191, 0.2)"},
    {"--mantine-color-cyan-light-color": "var(--mantine-color-cyan-3)"},
    {"--mantine-color-cyan-outline": "var(--mantine-color-cyan-4)"},
    {"--mantine-color-cyan-outline-hover": "rgba(59, 201, 219, 0.05)"},
    {"--mantine-color-teal-text": "var(--mantine-color-teal-4)"},
    {"--mantine-color-teal-filled": "var(--mantine-color-teal-8)"},
    {"--mantine-color-teal-filled-hover": "var(--mantine-color-teal-9)"},
    {"--mantine-color-teal-light": "rgba(18, 184, 134, 0.15)"},
    {"--mantine-color-teal-light-hover": "rgba(18, 184, 134, 0.2)"},
    {"--mantine-color-teal-light-color": "var(--mantine-color-teal-3)"},
    {"--mantine-color-teal-outline": "var(--mantine-color-teal-4)"},
    {"--mantine-color-teal-outline-hover": "rgba(56, 217, 169, 0.05)"},
    {"--mantine-color-green-text": "var(--mantine-color-green-4)"},
    {"--mantine-color-green-filled": "var(--mantine-color-green-8)"},
    {"--mantine-color-green-filled-hover": "var(--mantine-color-green-9)"},
    {"--mantine-color-green-light": "rgba(64, 192, 87, 0.15)"},
    {"--mantine-color-green-light-hover": "rgba(64, 192, 87, 0.2)"},
    {"--mantine-color-green-light-color": "var(--mantine-color-green-3)"},
    {"--mantine-color-green-outline": "var(--mantine-color-green-4)"},
    {"--mantine-color-green-outline-hover": "rgba(105, 219, 124, 0.05)"},
    {"--mantine-color-lime-text": "var(--mantine-color-lime-4)"},
    {"--mantine-color-lime-filled": "var(--mantine-color-lime-8)"},
    {"--mantine-color-lime-filled-hover": "var(--mantine-color-lime-9)"},
    {"--mantine-color-lime-light": "rgba(130, 201, 30, 0.15)"},
    {"--mantine-color-lime-light-hover": "rgba(130, 201, 30, 0.2)"},
    {"--mantine-color-lime-light-color": "var(--mantine-color-lime-3)"},
    {"--mantine-color-lime-outline": "var(--mantine-color-lime-4)"},
    {"--mantine-color-lime-outline-hover": "rgba(169, 227, 75, 0.05)"},
    {"--mantine-color-yellow-text": "var(--mantine-color-yellow-4)"},
    {"--mantine-color-yellow-filled": "var(--mantine-color-yellow-8)"},
    {"--mantine-color-yellow-filled-hover": "var(--mantine-color-yellow-9)"},
    {"--mantine-color-yellow-light": "rgba(250, 176, 5, 0.15)"},
    {"--mantine-color-yellow-light-hover": "rgba(250, 176, 5, 0.2)"},
    {"--mantine-color-yellow-light-color": "var(--mantine-color-yellow-3)"},
    {"--mantine-color-yellow-outline": "var(--mantine-color-yellow-4)"},
    {"--mantine-color-yellow-outline-hover": "rgba(255, 212, 59, 0.05)"},
    {"--mantine-color-orange-text": "var(--mantine-color-orange-4)"},
    {"--mantine-color-orange-filled": "var(--mantine-color-orange-8)"},
    {"--mantine-color-orange-filled-hover": "var(--mantine-color-orange-9)"},
    {"--mantine-color-orange-light": "rgba(253, 126, 20, 0.15)"},
    {"--mantine-color-orange-light-hover": "rgba(253, 126, 20, 0.2)"},
    {"--mantine-color-orange-light-color": "var(--mantine-color-orange-3)"},
    {"--mantine-color-orange-outline": "var(--mantine-color-orange-4)"},
    {"--mantine-color-orange-outline-hover": "rgba(255, 169, 77, 0.05)"}
]

def make_rows(data):
    rows = [
        dmc.Grid([
            dmc.GridCol(dmc.Text(key), span=5),
            dmc.GridCol(dmc.Text(value), span=5),
            dmc.GridCol(dmc.Box(h=24, w=24, bg=value), span=2),
            dmc.GridCol(dmc.Divider(), span=12)
        ])
        for item in data
        for key, value in item.items()
    ]
    return rows


component =  dmc.Box(
    make_rows(dark_color_scheme)
)





================================================
File: docs/cssvariables/cssvariable_list_light.py
================================================
import dash_mantine_components as dmc


light_color_scheme = [
    {"--mantine-primary-color-contrast": "var(--mantine-color-white)"},
    {"--mantine-color-bright": "var(--mantine-color-black)"},
    {"--mantine-color-text": "#000"},
    {"--mantine-color-body": "#fff"},
    {"--mantine-color-error": "var(--mantine-color-red-6)"},
    {"--mantine-color-placeholder": "var(--mantine-color-gray-5)"},
    {"--mantine-color-anchor": "var(--mantine-color-blue-6)"},
    {"--mantine-color-default": "var(--mantine-color-white)"},
    {"--mantine-color-default-hover": "var(--mantine-color-gray-0)"},
    {"--mantine-color-default-color": "var(--mantine-color-black)"},
    {"--mantine-color-default-border": "var(--mantine-color-gray-4)"},
    {"--mantine-color-dimmed": "var(--mantine-color-gray-6)"},
    {"--mantine-color-dark-text": "var(--mantine-color-dark-filled)"},
    {"--mantine-color-dark-filled": "var(--mantine-color-dark-6)"},
    {"--mantine-color-dark-filled-hover": "var(--mantine-color-dark-7)"},
    {"--mantine-color-dark-light": "rgba(46, 46, 46, 0.1)"},
    {"--mantine-color-dark-light-hover": "rgba(46, 46, 46, 0.12)"},
    {"--mantine-color-dark-light-color": "var(--mantine-color-dark-6)"},
    {"--mantine-color-dark-outline": "var(--mantine-color-dark-6)"},
    {"--mantine-color-dark-outline-hover": "rgba(46, 46, 46, 0.05)"},
    {"--mantine-color-gray-text": "var(--mantine-color-gray-filled)"},
    {"--mantine-color-gray-filled": "var(--mantine-color-gray-6)"},
    {"--mantine-color-gray-filled-hover": "var(--mantine-color-gray-7)"},
    {"--mantine-color-gray-light": "rgba(134, 142, 150, 0.1)"},
    {"--mantine-color-gray-light-hover": "rgba(134, 142, 150, 0.12)"},
    {"--mantine-color-gray-light-color": "var(--mantine-color-gray-6)"},
    {"--mantine-color-gray-outline": "var(--mantine-color-gray-6)"},
    {"--mantine-color-gray-outline-hover": "rgba(134, 142, 150, 0.05)"},
    {"--mantine-color-red-text": "var(--mantine-color-red-filled)"},
    {"--mantine-color-red-filled": "var(--mantine-color-red-6)"},
    {"--mantine-color-red-filled-hover": "var(--mantine-color-red-7)"},
    {"--mantine-color-red-light": "rgba(250, 82, 82, 0.1)"},
    {"--mantine-color-red-light-hover": "rgba(250, 82, 82, 0.12)"},
    {"--mantine-color-red-light-color": "var(--mantine-color-red-6)"},
    {"--mantine-color-red-outline": "var(--mantine-color-red-6)"},
    {"--mantine-color-red-outline-hover": "rgba(250, 82, 82, 0.05)"},
    {"--mantine-color-pink-text": "var(--mantine-color-pink-filled)"},
    {"--mantine-color-pink-filled": "var(--mantine-color-pink-6)"},
    {"--mantine-color-pink-filled-hover": "var(--mantine-color-pink-7)"},
    {"--mantine-color-pink-light": "rgba(230, 73, 128, 0.1)"},
    {"--mantine-color-pink-light-hover": "rgba(230, 73, 128, 0.12)"},
    {"--mantine-color-pink-light-color": "var(--mantine-color-pink-6)"},
    {"--mantine-color-pink-outline": "var(--mantine-color-pink-6)"},
    {"--mantine-color-pink-outline-hover": "rgba(230, 73, 128, 0.05)"},
    {"--mantine-color-grape-text": "var(--mantine-color-grape-filled)"},
    {"--mantine-color-grape-filled": "var(--mantine-color-grape-6)"},
    {"--mantine-color-grape-filled-hover": "var(--mantine-color-grape-7)"},
    {"--mantine-color-grape-light": "rgba(190, 75, 219, 0.1)"},
    {"--mantine-color-grape-light-hover": "rgba(190, 75, 219, 0.12)"},
    {"--mantine-color-grape-light-color": "var(--mantine-color-grape-6)"},
    {"--mantine-color-grape-outline": "var(--mantine-color-grape-6)"},
    {"--mantine-color-grape-outline-hover": "rgba(190, 75, 219, 0.05)"},
    {"--mantine-color-violet-text": "var(--mantine-color-violet-filled)"},
    {"--mantine-color-violet-filled": "var(--mantine-color-violet-6)"},
    {"--mantine-color-violet-filled-hover": "var(--mantine-color-violet-7)"},
    {"--mantine-color-violet-light": "rgba(121, 80, 242, 0.1)"},
    {"--mantine-color-violet-light-hover": "rgba(121, 80, 242, 0.12)"},
    {"--mantine-color-violet-light-color": "var(--mantine-color-violet-6)"},
    {"--mantine-color-violet-outline": "var(--mantine-color-violet-6)"},
    {"--mantine-color-violet-outline-hover": "rgba(121, 80, 242, 0.05)"},
    {"--mantine-color-indigo-text": "var(--mantine-color-indigo-filled)"},
    {"--mantine-color-indigo-filled": "var(--mantine-color-indigo-6)"},
    {"--mantine-color-indigo-filled-hover": "var(--mantine-color-indigo-7)"},
    {"--mantine-color-indigo-light": "rgba(76, 110, 245, 0.1)"},
    {"--mantine-color-indigo-light-hover": "rgba(76, 110, 245, 0.12)"},
    {"--mantine-color-indigo-light-color": "var(--mantine-color-indigo-6)"},
    {"--mantine-color-indigo-outline": "var(--mantine-color-indigo-6)"},
    {"--mantine-color-indigo-outline-hover": "rgba(76, 110, 245, 0.05)"},
    {"--mantine-color-blue-text": "var(--mantine-color-blue-filled)"},
    {"--mantine-color-blue-filled": "var(--mantine-color-blue-6)"},
    {"--mantine-color-blue-filled-hover": "var(--mantine-color-blue-7)"},
    {"--mantine-color-blue-light": "rgba(34, 139, 230, 0.1)"},
    {"--mantine-color-blue-light-hover": "rgba(34, 139, 230, 0.12)"},
    {"--mantine-color-blue-light-color": "var(--mantine-color-blue-6)"},
    {"--mantine-color-blue-outline": "var(--mantine-color-blue-6)"},
    {"--mantine-color-blue-outline-hover": "rgba(34, 139, 230, 0.05)"},
    {"--mantine-color-cyan-text": "var(--mantine-color-cyan-filled)"},
    {"--mantine-color-cyan-filled": "var(--mantine-color-cyan-6)"},
    {"--mantine-color-cyan-filled-hover": "var(--mantine-color-cyan-7)"},
    {"--mantine-color-cyan-light": "rgba(21, 170, 191, 0.1)"},
    {"--mantine-color-cyan-light-hover": "rgba(21, 170, 191, 0.12)"},
    {"--mantine-color-cyan-light-color": "var(--mantine-color-cyan-6)"},
    {"--mantine-color-cyan-outline": "var(--mantine-color-cyan-6)"},
    {"--mantine-color-cyan-outline-hover": "rgba(21, 170, 191, 0.05)"},
    {"--mantine-color-teal-text": "var(--mantine-color-teal-filled)"},
    {"--mantine-color-teal-filled": "var(--mantine-color-teal-6)"},
    {"--mantine-color-teal-filled-hover": "var(--mantine-color-teal-7)"},
    {"--mantine-color-teal-light": "rgba(18, 184, 134, 0.1)"},
    {"--mantine-color-teal-light-hover": "rgba(18, 184, 134, 0.12)"},
    {"--mantine-color-teal-light-color": "var(--mantine-color-teal-6)"},
    {"--mantine-color-teal-outline": "var(--mantine-color-teal-6)"},
    {"--mantine-color-teal-outline-hover": "rgba(18, 184, 134, 0.05)"},
    {"--mantine-color-green-text": "var(--mantine-color-green-filled)"},
    {"--mantine-color-green-filled": "var(--mantine-color-green-6)"},
    {"--mantine-color-green-filled-hover": "var(--mantine-color-green-7)"},
    {"--mantine-color-green-light": "rgba(64, 192, 87, 0.1)"},
    {"--mantine-color-green-light-hover": "rgba(64, 192, 87, 0.12)"},
    {"--mantine-color-green-light-color": "var(--mantine-color-green-6)"},
    {"--mantine-color-green-outline": "var(--mantine-color-green-6)"},
    {"--mantine-color-green-outline-hover": "rgba(64, 192, 87, 0.05)"},
    {"--mantine-color-lime-text": "var(--mantine-color-lime-filled)"},
    {"--mantine-color-lime-filled": "var(--mantine-color-lime-6)"},
    {"--mantine-color-lime-filled-hover": "var(--mantine-color-lime-7)"},
    {"--mantine-color-lime-light": "rgba(130, 201, 30, 0.1)"},
    {"--mantine-color-lime-light-hover": "rgba(130, 201, 30, 0.12)"},
    {"--mantine-color-lime-light-color": "var(--mantine-color-lime-6)"},
    {"--mantine-color-lime-outline": "var(--mantine-color-lime-6)"},
    {"--mantine-color-lime-outline-hover": "rgba(130, 201, 30, 0.05)"},
    {"--mantine-color-yellow-text": "var(--mantine-color-yellow-filled)"},
    {"--mantine-color-yellow-filled": "var(--mantine-color-yellow-6)"},
    {"--mantine-color-yellow-filled-hover": "var(--mantine-color-yellow-7)"},
    {"--mantine-color-yellow-light": "rgba(250, 176, 5, 0.1)"},
    {"--mantine-color-yellow-light-hover": "rgba(250, 176, 5, 0.12)"},
    {"--mantine-color-yellow-light-color": "var(--mantine-color-yellow-6)"},
    {"--mantine-color-yellow-outline": "var(--mantine-color-yellow-6)"},
    {"--mantine-color-yellow-outline-hover": "rgba(250, 176, 5, 0.05)"},
    {"--mantine-color-orange-text": "var(--mantine-color-orange-filled)"},
    {"--mantine-color-orange-filled": "var(--mantine-color-orange-6)"},
    {"--mantine-color-orange-filled-hover": "var(--mantine-color-orange-7)"},
    {"--mantine-color-orange-light": "rgba(253, 126, 20, 0.1)"},
    {"--mantine-color-orange-light-hover": "rgba(253, 126, 20, 0.12)"},
    {"--mantine-color-orange-light-color": "var(--mantine-color-orange-6)"},
    {"--mantine-color-orange-outline": "var(--mantine-color-orange-6)"},
    {"--mantine-color-orange-outline-hover": "rgba(253, 126, 20, 0.05)"}
]

def make_rows(data):
    rows = [
        dmc.Grid([
            dmc.GridCol(dmc.Text(key), span=5),
            dmc.GridCol(dmc.Text(value), span=5),
            dmc.GridCol(dmc.Box(h=24, w=24, bg=value), span=2),
            dmc.GridCol(dmc.Divider(), span=12)
        ])
        for item in data
        for key, value in item.items()
    ]
    return rows


component =  dmc.Box(
    make_rows(light_color_scheme)
)





================================================
File: docs/cssvariables/cssvariables.md
================================================
---
name: CSS Variables
description: How to use CSS variables with Dash Mantine Components.
endpoint: /css-variables
package: dash_mantine_components
category: Theming
order: 3  # sets order in navbar section
---

.. toc::

MantineProvider exposes all Mantine CSS variables based on the given theme. You can use these variables in CSS files,
style prop or any other styles. See the full list of variables at the bottom of the page.

### Typography variables

#### Font family
The following CSS variables are used to assign font families to all Mantine components:


| Variable                        | Default value           | Description                                              |
|:--------------------------------|:------------------------|:---------------------------------------------------------|
| `mantine-font-family`           | system sans-serif fonts | Controls font-family property of most Mantine components |
| `mantine-font-family-monospace` | system monospace fonts  | Controls font-family property of code blocks             |
| `mantine-font-family-headings`  | system sans-serif fonts | Controls font-family property of headings                |


You can control these variables in the [theme](/theme-object). Note that if `theme.headings.fontFamily` is not set,
`--mantine-font-family-headings` value will be the same as `--mantine-font-family`


```python
theme = {
    # Controls --mantine-font-family
    "fontFamily": "Arial, sans-serif",

    # Controls --mantine-font-family-monospace
    "fontFamilyMonospace": "Courier New, monospace",

    "headings": {
        # Controls --mantine-font-family-headings
        "fontFamily": "Georgia, serif",
    },
}
dmc.MantineProvider(theme=theme, children=[])
```

If you want to use system fonts as a fallback for custom fonts, you can reference `dmc.DEFAULT_THEME` value instead of defining it manually:

```python
import dash_mantine_components as dmc

theme = {
    "fontFamily": f"Roboto, {dmc.DEFAULT_THEME['fontFamily']}"
}
```
You can reference font family variables in your CSS:

```css

.text {
  font-family: var(--mantine-font-family);
}

.code {
  font-family: var(--mantine-font-family-monospace);
}

.heading {
  font-family: var(--mantine-font-family-headings);
}

```

And in `ff` style prop:

- `ff="text"` will use `--mantine-font-family` variable
- `ff="monospace"` will use `--mantine-font-family-monospace` variable
- `ff="heading"` will use `--mantine-font-family-headings` variable


```python
dmc.Text(
    "This text uses --mantine-font-family-monospace variable",
    ff="monospace"
)
```


#### Font size

Font size variables are used in most Mantine components to control text size. The variable that is chosen depends on
the component and its size prop.

| Variable                        | Default value   |
|:--------------------------------|:----------------|
| --mantine-font-size-xs          | 0.75rem (12px)  |
| --mantine-font-size-sm          | 0.875rem (14px) |
| --mantine-font-size-md          | 1rem (16px)     |
| --mantine-font-size-lg          | 1.125rem (18px) |
| --mantine-font-size-xl          | 1.25rem (20px)  |

You can reference font size variables in CSS:

```css
.demo {
  font-size: var(--mantine-font-size-md);
}
```

And in `fz` style prop:
```python
dmc.Text(
    "This text uses --mantine-font-size-xl variable",
    fz="xl"
)
```

To define custom font sizes, can use `theme.fontSizes` property:

```python
theme = {
    'fontSizes': {
    'xs': '0.5rem',
    'sm': '0.75rem',
    'md': '1rem',
    'lg': '1.25rem',
    'xl': '1.5rem',
  },
}
dmc.MantineProvider(theme=theme, children=[])
```


Note that `theme.fontSizes` dict is merged with the dmc.DEFAULT_THEME – it is not required to define all values, only those that you want to change.

```python
theme = {
    'fontSizes': {'xs': '0.5rem'}
}
```

You can add any number of additional font sizes to the `theme.fontSizes` object. These values will be defined as
CSS variables in `--mantine-font-size-{size}` format:


```python
theme = {
    'fontSizes': {
        'xxs': '0.125rem',
        'xxl': '2rem',
    }
}
```

After defining `theme.fontSizes`, you can reference these variables in your CSS:

```css
.demo {
  font-size: var(--mantine-font-size-xxs);
}
```

> Case conversion
>
>Case conversion (camelCase to kebab-case) is not automatically applied to custom font sizes. If you define `theme.fontSizes`
with camelCase keys, you need to reference them in camelCase format. For example, if you define `{ customSize: '1rem' }`, you need to reference it as `--mantine-font-size-customSize`.


#### Line height

Line height variables are used in the Text component. In other components, line-height is either calculated based on font size or set to `--mantine-line-height`, which is an alias for `--mantine-line-height-md`.

| Variable                      | Default value  |
|:------------------------------|:---------------|
| --mantine-line-height         | 1.55           |
| --mantine-line-height-xs      | 1.4            |
| --mantine-line-height-sm      | 1.45           |
| --mantine-line-height-md      | 1.55           |
| --mantine-line-height-lg      | 1.6            |
| --mantine-line-height-xl      | 1.65           |

You can reference line height variables in your CSS:

```css
.demo {
  line-height: var(--mantine-line-height-md);
}
```

```python
dmc.Text("This text uses --mantine-line-height-xl variable", lh="xl")
```

To define custom line heights, you can use theme.lineHeights property:

```python
theme = {
    'lineHeights': {
    'xs': '1.2',
    'sm': '1.3',
    'md': '1.4',
    'lg': '1.5',
    'xl': '1.6',
  },
}
```


#### Headings

`theme.headings` controls `font-size`, `line-height`, `font-weight`, and `text-wrap` CSS properties of headings in `Title` and `TypographyStylesProvider` components.

| Variable                        | Default value   |
|:--------------------------------|:----------------|
| **General variables**           |                 |
| --mantine-heading-font-weight   | 700             |
| --mantine-heading-text-wrap     | wrap            |
| **h1 heading**                  |                 |
| --mantine-h1-font-size          | 2.125rem (34px) |
| --mantine-h1-line-height        | 1.3             |
| --mantine-h1-font-weight        | 700             |
| **h2 heading**                  |                 |
| --mantine-h2-font-size          | 1.625rem (26px) |
| --mantine-h2-line-height        | 1.35            |
| --mantine-h2-font-weight        | 700             |
| **h3 heading**                  |                 |
| --mantine-h3-font-size          | 1.375rem (22px) |
| --mantine-h3-line-height        | 1.4             |
| --mantine-h3-font-weight        | 700             |
| **h4 heading**                  |                 |
| --mantine-h4-font-size          | 1.125rem (18px) |
| --mantine-h4-line-height        | 1.45            |
| --mantine-h4-font-weight        | 700             |
| **h5 heading**                  |                 |
| --mantine-h5-font-size          | 1rem (16px)     |
| --mantine-h5-line-height        | 1.5             |
| --mantine-h5-font-weight        | 700             |
| **h6 heading**                  |                 |
| --mantine-h6-font-size          | 0.875rem (14px) |
| --mantine-h6-line-height        | 1.5             |
| --mantine-h6-font-weight        | 700             |

These variables are used in the `Title` component. The `order` prop controls which heading level to use. For example, `order={3}` Title will use:

- `--mantine-h3-font-size`
- `--mantine-h3-line-height`
- `--mantine-h3-font-weight`


.. exec::docs.title.simple

You can reference heading variables in your CSS:


```css
.h1 {
  font-size: var(--mantine-h1-font-size);
  line-height: var(--mantine-h1-line-height);
  font-weight: var(--mantine-h1-font-weight);
}
```
And in fz and lh style props:

```python
dmc.Text("This text uses --mantine-h1-* variables",  fz="h1", lh="h1")
```

To change heading styles, can use `theme.headings` property:

```python
theme = {
    "headings": {
        "sizes": {
            "h1": {
                "fontSize": "2rem",
                "lineHeight": "1.5",
                "fontWeight": "500",
            },
            "h2": {
                "fontSize": "1.5rem",
                "lineHeight": "1.6",
                "fontWeight": "500",
            },
        },
        # ...
    },
}
```

`theme.headings` dict is deeply merged with the default theme – it is not required to define all values, only those that you want to change.


```python
theme = {
    "headings": {
        "sizes": {
            "h1": {
                "fontSize": "2rem",             
            },          
        },    
    },
}
```


#### Font smoothing

Font smoothing variables control `-webkit-font-smoothing` and `moz-osx-font-smoothing` CSS properties. These variables are used to make text look better on screens with high pixel density.

Font smoothing variables are controlled by the `theme.fontSmoothing` theme property, which is `True` by default. If `theme.fontSmoothing` is `False`, both variables will be set to `unset`.

| Variable                        | Default value  |
|:--------------------------------|:---------------|
| --mantine-webkit-font-smoothing | antialiased    |
| --mantine-moz-font-smoothing    | grayscale      |

If you need to override font smoothing values, the best way is to disable `theme.fontSmoothing` and set global styles on the `body` element:

```python
# Disable font smoothing in your theme
theme = {
  "fontSmoothing": False,
}
```

Add global styles to your project with desired font smoothing values
```css
body {
  -webkit-font-smoothing: subpixel-antialiased;
  -moz-osx-font-smoothing: auto;
}
```


### Colors variables

Colors variables are controlled by `theme.colors` and `theme.primaryColor`. Each color defined in the `theme.colors` object is required to have 10 shades. Theme colors can be referenced by their name and shade index, for example, `--mantine-color-red-6`.

You can define new colors on the theme object or override existing colors:

```python
theme = {
    "colors": {
        "demo": [
            "#FF0000",
            "#FF3333",
            "#FF6666",
            "#FF9999",
            "#FFCCCC",
            "#FFEEEE",
            "#FFFAFA",
            "#FFF5F5",
            "#FFF0F0",
            "#FFEBEB",
        ],
    },
}
```

The code above will define the following CSS variables:

| Variable                      | Default value  |
|:------------------------------|:---------------|
| --mantine-color-demo-0        | #FF0000        |
| --mantine-color-demo-1        | #FF3333        |
| --mantine-color-demo-2        | #FF6666        |
| --mantine-color-demo-3        | #FF9999        |
| --mantine-color-demo-4        | #FFCCCC        |
| --mantine-color-demo-5        | #FFEEEE        |
| --mantine-color-demo-6        | #FFFAFA        |
| --mantine-color-demo-7        | #FFF5F5        |
| --mantine-color-demo-8        | #FFF0F0        |
| --mantine-color-demo-9        | #FFEBEB        |

#### Variant colors

Some Mantine components like `Button` or `Badge` have the `variant` prop that in combination with the `color` prop controls the component text, background, and border colors. For each variant and color, Mantine defines a set of CSS variables that control these colors. For example, for the default blue color the following CSS variables are defined:

| Variable                                         | Default value                 |
|:-------------------------------------------------|:------------------------------|
| **Filled variant**                               |                               |
| --mantine-color-blue-filled                      | var(--mantine-color-blue-6)   |
| --mantine-color-blue-filled-hover                | var(--mantine-color-blue-7)   |
| **Light variant**                                |                               |
| --mantine-color-blue-light                       | rgba(34, 139, 230, 0.1)       |
| --mantine-color-blue-light-hover                 | rgba(34, 139, 230, 0.12)      |
| --mantine-color-blue-light-color                 | var(--mantine-color-blue-6)   |
| **Outline variant**                              |                               |
| --mantine-color-blue-outline                     | var(--mantine-color-blue-6)   |
| --mantine-color-blue-outline-hover               | rgba(34, 139, 230, 0.05)      |


For example, if you use Button component the following way:


.. exec::docs.cssvariables.button

The component will have the following styles:

- Background color will be `var(--mantine-color-pink-filled)`
- Background color on hover will be `var(--mantine-color-pink-filled-hover)`
- Text color will be `var(--mantine-color-white)`
- Border color will be `transparent`

Note that the variables above are not static; they are generated based on the values of `theme.colors` and `theme.primaryShade`. Additionally, their values are different for dark and light color schemes.

#### Variant Colors Variables

Variant colors variables are used in all components that support the `color` prop, for example, `Button`, `Badge`, `Avatar`, and `Pagination`. The color values used by these components are determined by `cssVariablesResolver` and `variantColorResolver`.

#### Primary Color Variables

Primary color variables are defined by `theme.primaryColor` (which must be a key of `theme.colors`). The following CSS variables are defined for the primary color:

| Variable                                      | Default value                                      |
|:----------------------------------------------|:---------------------------------------------------|
| --mantine-primary-color-{shade}               | `var(--mantine-color-{primaryColor}-{shade})`      |
| --mantine-primary-color-filled                | `var(--mantine-color-{primaryColor}-filled)`       |
| --mantine-primary-color-filled-hover          | `var(--mantine-color-{primaryColor}-filled-hover)` |
| --mantine-primary-color-light                 | `var(--mantine-color-{primaryColor}-light)`        |
| --mantine-primary-color-light-hover           | `var(--mantine-color-{primaryColor}-light-hover)`  |
| --mantine-primary-color-light-color           | `var(--mantine-color-{primaryColor}-light-color)`  |

You can reference primary color variables in CSS:

```css
.demo {
  color: var(--mantine-primary-color-0);
  background-color: var(--mantine-primary-color-filled);
}
```

#### Other Color Variables

The following colors are used in various Mantine components. Note that default values are provided for the light color scheme; dark color scheme values are different.

| Variable                          | Description                                             | Default Value                    |
|-----------------------------------|---------------------------------------------------------|----------------------------------|
| --mantine-color-white             | Value of `theme.white`                                  | #fff                             |
| --mantine-color-black             | Value of `theme.black`                                  | #000                             |
| --mantine-color-text              | Color used for text in the body element                 | var(--mantine-color-black)       |
| --mantine-color-body              | Body background color                                   | var(--mantine-color-white)       |
| --mantine-color-error             | Color used for error messages and states                | var(--mantine-color-red-6)       |
| --mantine-color-placeholder       | Color used for input placeholders                       | var(--mantine-color-gray-5)      |
| --mantine-color-dimmed            | Color used for dimmed text                              | var(--mantine-color-gray-6)      |
| --mantine-color-bright            | Color used for bright text                              | var(--mantine-color-black)       |
| --mantine-color-anchor            | Color used for links                                    | var(--mantine-primary-color-6)   |
| --mantine-color-default           | Background color of default variant                     | var(--mantine-color-white)       |
| --mantine-color-default-hover     | Background color of default variant on hover            | var(--mantine-color-gray-0)      |
| --mantine-color-default-color     | Text color of default variant                           | var(--mantine-color-black)       |
| --mantine-color-default-border    | Border color of default variant                         | var(--mantine-color-gray-4)      |


### Spacing variables

`theme.spacing` values are used in most Mantine components to control paddings, margins, and other spacing-related properties. The following CSS variables are defined based on `theme.spacing`:

| Variable               | Default value   |
|------------------------|-----------------|
| --mantine-spacing-xs   | 0.625rem (10px) |
| --mantine-spacing-sm   | 0.75rem (12px)  |
| --mantine-spacing-md   | 1rem (16px)     |
| --mantine-spacing-lg   | 1.25rem (20px)  |
| --mantine-spacing-xl   | 2rem (32px)     |

To define custom spacing values, use the `theme.spacing` property:

```python
theme = {
    "spacing": {
        "xs": "0.5rem",
        "sm": "0.75rem",
        "md": "1rem",
        "lg": "1.5rem",
        "xl": "2rem",
    },
}
```

### Border radius variables

Mantine components that support the `radius` prop use border radius variables to control border radius. The following CSS variables are defined based on `theme.radius`:

| Variable                 | Default value  |
|--------------------------|----------------|
| --mantine-radius-xs      | 0.125rem (2px) |
| --mantine-radius-sm      | 0.25rem (4px)  |
| --mantine-radius-md      | 0.5rem (8px)   |
| --mantine-radius-lg      | 1rem (16px)    |
| --mantine-radius-xl      | 2rem (32px)    |

Additionally, `--mantine-radius-default` variable is defined based on `theme.defaultRadius` value. If the `radius` prop on components is not set explicitly, `--mantine-radius-default` is used instead.

To define custom border radius values, use the `theme.radius` and `theme.defaultRadius` properties:

```python
theme = {
    "defaultRadius": "sm",
    "radius": {
        "xs": "0.25rem",
        "sm": "0.5rem",
        "md": "1rem",
        "lg": "2rem",
        "xl": "3rem",
    },
}
```


### Shadow variables

Shadow variables are used in all Mantine components that support the `shadow` prop. The following CSS variables are defined based on `theme.shadows`:

| Variable              | Default value                                                                                          |
|-----------------------|--------------------------------------------------------------------------------------------------------|
| --mantine-shadow-xs   | 0 1px 3px rgba(0, 0, 0, 0.05), 0 1px 2px rgba(0, 0, 0, 0.1)                                            |
| --mantine-shadow-sm   | 0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 10px 15px -5px, rgba(0, 0, 0, 0.04) 0 7px 7px -5px |
| --mantine-shadow-md   | 0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 20px 25px -5px, rgba(0, 0, 0, 0.04) 0 10px 10px -5px|
| --mantine-shadow-lg   | 0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 28px 23px -7px, rgba(0, 0, 0, 0.04) 0 12px 12px -7px|
| --mantine-shadow-xl   | 0 1px 3px rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 36px 28px -7px, rgba(0, 0, 0, 0.04) 0 17px 17px -7px|

To define custom shadow values, use the `theme.shadows` property:

```python
theme = {
    "shadows": {
        "xs": "0 1px 2px rgba(0, 0, 0, 0.1)",
        "sm": "0 1px 3px rgba(0, 0, 0, 0.1)",
        "md": "0 2px 4px rgba(0, 0, 0, 0.1)",
        "lg": "0 4px 8px rgba(0, 0, 0, 0.1)",
        "xl": "0 8px 16px rgba(0, 0, 0, 0.1)",
    },
}
```

### z-index variables

z-index variables are defined in `@mantine/core/styles.css`. Unlike other variables, z-index variables are not controlled by the theme and are not exposed in the theme object.

| Variable                  | Default value |
|---------------------------|---------------|
| --mantine-z-index-app     | 100           |
| --mantine-z-index-modal   | 200           |
| --mantine-z-index-popover | 300           |
| --mantine-z-index-overlay | 400           |
| --mantine-z-index-max     | 9999          |

You can reference z-index variables in CSS:

```css
/* Display content above the modal */
.my-content {
  z-index: calc(var(--mantine-z-index-modal) + 1);
}
```

And in components by referencing the CSS variable:

```python
import dash_mantine_components as dmc

dmc.Modal(
    zIndex="var(--mantine-z-index-max)",
    opened=True,
    children="Modal content"
) 
```

### CSS Variables list

#### CSS variables not depending on color scheme
.. exec::docs.cssvariables.cssvariable_list
   :code: false


#### Light color scheme only variables 
.. exec::docs.cssvariables.cssvariable_list_light
   :code: false


#### Dark color scheme only variables
.. exec::docs.cssvariables.cssvariable_list_dark
   :code: false


================================================
File: docs/dash-iconify/dash-iconify.md
================================================
---
name: Dash Iconify
description: Add icons to your dash apps the simplest and the most efficient way.
endpoint: /dash-iconify
package: dash_mantine_components
---

.. toc::

### Why Use This?

DashIconify fetches only the icons you need. You can use icons from over 100 icon sets without loading all of them.
Search [here](https://icon-sets.iconify.design/) for the desired icon and use DashIconify to use that in your dash app.

[Source Code](https://github.com/snehilvj/dash-iconify)

### Installation

```bash
pip install dash-iconify
```

```bash
poetry add dash-iconify
```

### Simple Usage

DashIconify component can be customized with `width`, `height`, `rotate` and `flip` props.

.. exec::docs.dash-iconify.props

### Usage With DMC

Although dash-iconify can be used with any dash components library, be it, dash-mantine-components, dash-core-components
or dash-bootstrap-components, DMC provides direct hooks for adding icons to enhance the look and feel of your apps.

.. exec::docs.dash-iconify.dmc



================================================
File: docs/dash-iconify/dmc.py
================================================
from datetime import date

import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Group(
    [
        dmc.DatePickerInput(
            value=date.today(), leftSection=DashIconify(icon="clarity:date-line")
        ),
        dmc.Alert(
            icon=DashIconify(icon="radix-icons:cross-circled"),
            children="There seems to be an error!",
            color="red",
        ),
        dmc.Button(
            "Open Settings",
            leftSection=DashIconify(icon="carbon:settings-check", width=20),
        ),
    ]
)



================================================
File: docs/dash-iconify/props.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Group(
    [
        DashIconify(icon="ion:logo-github", width=30, rotate=1, flip="horizontal"),
        DashIconify(icon="flat-ui:settings", width=30),
        DashIconify(
            icon="feather:info",
            color=dmc.DEFAULT_THEME["colors"]["yellow"][5],
            width=30,
        ),
    ]
)



================================================
File: docs/dateinput/clearable.py
================================================
import dash_mantine_components as dmc

component = dmc.DateInput(
    clearable=True, label="Date input", placeholder="Date Input", w=250
)



================================================
File: docs/dateinput/dateinput.md
================================================
---
name: DateInput
description: Free form date input
endpoint: /components/dateinput
package: dash_mantine_components
category: Date Pickers
---

.. toc::



### CSS Extensions

.. admonition::CSS Extensions
   :icon: radix-icons:info-circled
   :color: red

   Date components require additional CSS styles.

The Date components require an additional CSS stylesheet.  See the [Getting Started](/getting-started) section for more information.

Be sure to include:
```python
app = Dash(external_stylesheets=[dmc.styles.DATES])
```
Or, if you want to include all optional stylesheets:
```python
app = Dash(external_stylesheets=dmc.styles.ALL)
```


### DateInput props

DateInput supports most of the [DatePicker](/components/datepicker) props, read through DatePicker
documentation to learn about all component features that are not listed on this page.

### Simple Example

This is a simple example of DateInput tied to a callback. You can type a date or select from the DatePicker

.. exec::docs.dateinput.simple

### Value format

Use `format` property to change the format of the date displayed in the date input field.

.. exec::docs.dateinput.formats

Use `valueFormat` prop to change [dayjs format](https://day.js.org/docs/en/display/format) of value label.


### Clearable

Set clearable prop to allow removing value from the input. Input will be cleared if user selects the same date in dropdown or clears input value.

When `clearable=True`, a clear button in the right section is displayed. Note that if you set rightSection prop, clear button will not be displayed.

.. exec::docs.dateinput.clearable

### Min and max date

Set `minDate` and `maxDate` props to define min and max dates. If date that is after `maxDate` or before `minDate` is entered, then it will be considered invalid and input value will be reverted to last known valid date value.

.. exec::docs.dateinput.minmax

### Input props

.. exec::docs.dateinput.interactive
   :code: false

### Styles API

| Name                      | Static selector                              | Description                                                          |
|:--------------------------|:---------------------------------------------|:---------------------------------------------------------------------|
| wrapper                   | .mantine-DateInput-wrapper                   | Root element of the Input                                            |
| input                     | .mantine-DateInput-input                     | Input element                                                        |
| section                   | .mantine-DateInput-section                   | Left and right sections                                              |
| root                      | .mantine-DateInput-root                      | Root element                                                         |
| label                     | .mantine-DateInput-label                     | Label element                                                        |
| required                  | .mantine-DateInput-required                  | Required asterisk element, rendered inside label                     |
| description               | .mantine-DateInput-description               | Description element                                                  |
| error                     | .mantine-DateInput-error                     | Error element                                                        |
| calendarHeader            | .mantine-DateInput-calendarHeader            | Calendar header root element                                         |
| calendarHeaderControl     | .mantine-DateInput-calendarHeaderControl     | Previous/next calendar header controls                               |
| calendarHeaderControlIcon | .mantine-DateInput-calendarHeaderControlIcon | Icon of previous/next calendar header controls                       |
| calendarHeaderLevel       | .mantine-DateInput-calendarHeaderLevel       | Level control (changes levels when clicked, month -> year -> decade) |
| levelsGroup               | .mantine-DateInput-levelsGroup               | Group of decades levels                                              |
| yearsList                 | .mantine-DateInput-yearsList                 | Years list table element                                             |
| yearsListRow              | .mantine-DateInput-yearsListRow              | Years list row element                                               |
| yearsListCell             | .mantine-DateInput-yearsListCell             | Years list cell element                                              |
| yearsListControl          | .mantine-DateInput-yearsListControl          | Button used to pick months and years                                 |
| monthsList                | .mantine-DateInput-monthsList                | Years list table element                                             |
| monthsListRow             | .mantine-DateInput-monthsListRow             | Years list row element                                               |
| monthsListCell            | .mantine-DateInput-monthsListCell            | Years list cell element                                              |
| monthsListControl         | .mantine-DateInput-monthsListControl         | Button used to pick months and years                                 |
| monthThead                | .mantine-DateInput-monthThead                | thead element of month table                                         |
| monthRow                  | .mantine-DateInput-monthRow                  | tr element of month table                                            |
| monthTbody                | .mantine-DateInput-monthTbody                | tbody element of month table                                         |
| monthCell                 | .mantine-DateInput-monthCell                 | td element of month table                                            |
| month                     | .mantine-DateInput-month                     | Month table element                                                  |
| weekdaysRow               | .mantine-DateInput-weekdaysRow               | Weekdays tr element                                                  |
| weekday                   | .mantine-DateInput-weekday                   | Weekday th element                                                   |
| day                       | .mantine-DateInput-day                       | Month day control                                                    |

### Keyword Arguments

#### DateInput

.. kwargs::DateInput



================================================
File: docs/dateinput/formats.py
================================================
from datetime import datetime

import dash_mantine_components as dmc

component = dmc.Group(
    gap="xl",
    children=[
        dmc.DateInput(
            value=datetime.now().date(),
            valueFormat="ddd, MMM D YY",
            label="ddd, MMM D YY",
            w=250,
        ),
        dmc.DateInput(
            value=datetime.now().date(),
            valueFormat="MMMM DD, YY",
            label="MMMM DD, YY",
            w=250,
        ),
        dmc.DateInput(
            value=datetime.now().date(),
            valueFormat="DD-MM-YYYY",
            label="DD-MM-YYYY",
            w=250,
        ),
    ],
)



================================================
File: docs/dateinput/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-date-input"
target = dmc.Center(
    dmc.DateInput(label="Enter date", placeholder="Enter date", w=250, id=TARGET_ID)
)

configurator = Configurator(target, TARGET_ID)
configurator.add_text_input(
    "placeholder", "Enter date", **{"placeholder": "Placeholder"}
)
configurator.add_text_input("label", "Enter date", **{"placeholder": "Label"})
configurator.add_text_input("description", "", **{"placeholder": "Description"})
configurator.add_text_input("error", "", **{"placeholder": "Error"})
configurator.add_select("variant", ["default", "filled", "unstyled"], "default")
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "sm")
configurator.add_switch("withAsterisk", True)
configurator.add_switch("disabled", False)
configurator.add_switch("clearable", True)


component = configurator.panel



================================================
File: docs/dateinput/minmax.py
================================================
from datetime import datetime, timedelta

import dash_mantine_components as dmc

component = dmc.DateInput(
    minDate=datetime.now(),
    maxDate=datetime.now() + timedelta(days=7),
    placeholder="Date input",
    label="Select valid date",
    w=250,
)



================================================
File: docs/dateinput/simple.py
================================================
import dash_mantine_components as dmc
from dash import Input, Output, html, callback

component = html.Div(
    [
        dmc.DateInput(
            id="dateinput2",
            label="Enter a date",
            description="You can type a date or select from the calendar",
            w=300,
        ),
        dmc.Space(h=10),
        dmc.Text(id="selected-dateinput2"),
    ]
)


@callback(Output("selected-dateinput2", "children"), Input("dateinput2", "value"))
def update_output(d):
    prefix = "You entered: "
    if d:
        return prefix + d
    else:
        return ""



================================================
File: docs/dateinput/time.py
================================================
from datetime import datetime

import dash_mantine_components as dmc
from dash import Output, callback, Input, html

component = html.Div(
    [
        dmc.DateInput(
            id="datetime-time",
            valueFormat="DD/MM/YYYY HH:mm:ss",
            label="Date and Time input",
            value=datetime.now(),
            w=250,
        ),
        dmc.Space(h=10),
        dmc.Text(id="selected-datetime"),
    ]
)


@callback(Output("selected-datetime", "children"), Input("datetime-time", "value"))
def update_output(d):
    prefix = "You entered: "
    if d:
        return prefix + d
    else:
        return ""



================================================
File: docs/datepicker/datepicker.md
================================================
---
name: DatePicker
description: DatePicker component
endpoint: /components/datepicker
package: dash_mantine_components
category: Date Pickers
---

.. toc::

### DatePicker renamed

In dash-mantine-components 0.15.0 the `DatePicker` was renamed to  `DatePickerInput`.

> If your app used the `DatePicker` component in version 0.14, simply update it to `DatePickerInput` to reflect the new name.

Why the change? This renaming keeps us aligned with the upstream Mantine library. Mantine has two components:  
- `DatePicker`: A standalone calendar.  
- `DatePickerInput`: An input field with a dropdown calendar (similar to Dash Core Components' DatePickers).  

Stay tuned, we'll be adding Mantine’s standalone `DatePicker` in a future release.  






================================================
File: docs/datepickerinput/clearable.py
================================================
from datetime import datetime

import dash_mantine_components as dmc

component = dmc.Stack(
    [
        dmc.DatePickerInput(
            value=datetime.now().date(),
            label="Date not clearable",
            w=200,
        ),
        dmc.DatePickerInput(
            value=datetime.now().date(),
            label="Date clearable",
            w=200,
            clearable=True,
        ),
    ]
)



================================================
File: docs/datepickerinput/columns.py
================================================
import dash_mantine_components as dmc

component = dmc.DatePickerInput(w=250, type="range", numberOfColumns=2)



================================================
File: docs/datepickerinput/datepickerinput.md
================================================
---
name: DatePickerInput
description: Date, multiple dates and dates range picker input. Helps you easily switch between different months, years along with locale support.
endpoint: /components/datepickerinput
package: dash_mantine_components
category: Date Pickers
---

.. toc::



### CSS Extensions

.. admonition::CSS Extensions
   :icon: radix-icons:info-circled
   :color: red

   Date components require additional CSS styles.

The Date components require an additional CSS stylesheet.  See the [Getting Started](/getting-started) section for more information.

Be sure to include:
```python
app = Dash(external_stylesheets=[dmc.styles.DATES])
```
Or, if you want to include all optional stylesheets:
```python
app = Dash(external_stylesheets=dmc.styles.ALL)
```


### Simple Example

This is a simple example of `DatePickerInput` tied to a callback. You can either use strings in a valid datetime format such
as `YYYY-MM-DD` or use the date object from datetime library.

> If you would like to enable the user to type a date manually into the input field, please use the `DateInput` component

.. exec::docs.datepickerinput.simple

### Multiple dates

Set type="multiple" to allow user to pick multiple dates.  Note that `value` is a list.

.. exec::docs.datepickerinput.multiple

### Dates range

Set type="range" to allow user to pick dates range. Note that `value` is a list.

.. exec::docs.datepickerinput.range

### Open picker in modal

By default, `DatePickerInput` is rendered inside `Popover`. You can change that to `Modal` by setting `dropdownType="modal"`

.. exec::docs.datepickerinput.modal

### Number of columns

.. exec::docs.datepickerinput.columns

### Value format

Use `format` property to change the format of the date displayed in the date input field.

.. exec::docs.datepickerinput.formats

Use `valueFormat` prop to change [dayjs format](https://day.js.org/docs/en/display/format) of value label.

### Clearable

Set `clearable=True` prop to display clear button in the right section. Note that if you set `rightSection` prop, clear button will not be displayed.

.. exec::docs.datepickerinput.clearable

### Error Display

You can convey errors in your date picker by setting the `error` prop. For instance, in the below example we try to
convey the user that it's a required field and the date can't be an odd date. Since it's a required field, we also
set `clearable=False`.

.. exec::docs.datepickerinput.errors

### Localization

For information on setting locale, have a look at the [DatesProvider](/components/datesprovider) component.

### Styles API

| Name                      | Static selector                                    | Description                                                          |
|:--------------------------|:---------------------------------------------------|:---------------------------------------------------------------------|
| wrapper                   | .mantine-DatePickerInput-wrapper                   | Root element of the Input                                            |
| input                     | .mantine-DatePickerInput-input                     | Input element                                                        |
| section                   | .mantine-DatePickerInput-section                   | Left and right sections                                              |
| root                      | .mantine-DatePickerInput-root                      | Root element                                                         |
| label                     | .mantine-DatePickerInput-label                     | Label element                                                        |
| required                  | .mantine-DatePickerInput-required                  | Required asterisk element, rendered inside label                     |
| description               | .mantine-DatePickerInput-description               | Description element                                                  |
| error                     | .mantine-DatePickerInput-error                     | Error element                                                        |
| calendarHeader            | .mantine-DatePickerInput-calendarHeader            | Calendar header root element                                         |
| calendarHeaderControl     | .mantine-DatePickerInput-calendarHeaderControl     | Previous/next calendar header controls                               |
| calendarHeaderControlIcon | .mantine-DatePickerInput-calendarHeaderControlIcon | Icon of previous/next calendar header controls                       |
| calendarHeaderLevel       | .mantine-DatePickerInput-calendarHeaderLevel       | Level control (changes levels when clicked, month -> year -> decade) |
| levelsGroup               | .mantine-DatePickerInput-levelsGroup               | Group of decades levels                                              |
| yearsList                 | .mantine-DatePickerInput-yearsList                 | Years list table element                                             |
| yearsListRow              | .mantine-DatePickerInput-yearsListRow              | Years list row element                                               |
| yearsListCell             | .mantine-DatePickerInput-yearsListCell             | Years list cell element                                              |
| yearsListControl          | .mantine-DatePickerInput-yearsListControl          | Button used to pick months and years                                 |
| monthsList                | .mantine-DatePickerInput-monthsList                | Years list table element                                             |
| monthsListRow             | .mantine-DatePickerInput-monthsListRow             | Years list row element                                               |
| monthsListCell            | .mantine-DatePickerInput-monthsListCell            | Years list cell element                                              |
| monthsListControl         | .mantine-DatePickerInput-monthsListControl         | Button used to pick months and years                                 |
| monthThead                | .mantine-DatePickerInput-monthThead                | thead element of month table                                         |
| monthRow                  | .mantine-DatePickerInput-monthRow                  | tr element of month table                                            |
| monthTbody                | .mantine-DatePickerInput-monthTbody                | tbody element of month table                                         |
| monthCell                 | .mantine-DatePickerInput-monthCell                 | td element of month table                                            |
| month                     | .mantine-DatePickerInput-month                     | Month table element                                                  |
| weekdaysRow               | .mantine-DatePickerInput-weekdaysRow               | Weekdays tr element                                                  |
| weekday                   | .mantine-DatePickerInput-weekday                   | Weekday th element                                                   |
| day                       | .mantine-DatePickerInput-day                       | Month day control                                                    |
| placeholder               | .mantine-DatePickerInput-placeholder               | Placeholder element                                                  |

### Keyword Arguments

#### DatePickerInput

.. kwargs::DatePickerInput



================================================
File: docs/datepickerinput/errors.py
================================================
from datetime import datetime

import dash_mantine_components as dmc
from dash import Output, Input, callback

component = dmc.DatePickerInput(
    id="datepickerinput-error",
    value=datetime.now().date(),
    label="Date",
    required=True,
    clearable=False,
    w=200,
)


@callback(Output("datepickerinput-error", "error"), Input("datepickerinput-error", "value"))
def datepicker_error(date):
    day = datetime.strptime(date, "%Y-%M-%d").day
    return "Please select an even date." if day % 2 else ""



================================================
File: docs/datepickerinput/formats.py
================================================
from datetime import datetime

import dash_mantine_components as dmc

component = dmc.Group(
    gap="xl",
    children=[
        dmc.DatePickerInput(
            value=datetime.now().date(),
            valueFormat="ddd, MMM D YY",
            label="ddd, MMM D YY",
            w=200,
        ),
        dmc.DatePickerInput(
            value=datetime.now().date(),
            valueFormat="MMMM DD, YY",
            label="MMMM DD, YY",
            w=200,
        ),
        dmc.DatePickerInput(
            value=datetime.now().date(),
            valueFormat="DD-MM-YYYY",
            label="DD-MM-YYYY",
            w=200,
        ),
    ],
)



================================================
File: docs/datepickerinput/locale.py
================================================
import dash_mantine_components as dmc

component = dmc.DatesProvider(
    dmc.DatePickerInput(id="fr-date-picker-input", w=200, label="Sélectionner une date"),
    settings={"locale": "fr"},
)



================================================
File: docs/datepickerinput/modal.py
================================================
from datetime import datetime

import dash_mantine_components as dmc

component = dmc.DatePickerInput(
    value=datetime.now().date(),
    dropdownType="modal",
    w=200,
)



================================================
File: docs/datepickerinput/multiple.py
================================================
from datetime import datetime, date, timedelta

import dash_mantine_components as dmc
from dash import Input, Output, html, callback, no_update


component = html.Div(
    [
        dmc.DatePickerInput(
            id="date-picker-input-multiple",
            label="Pick dates",
            description="Pick one or more dates",
            minDate=date(2020, 8, 5),
            value=[datetime.now().date(), datetime.now().date() + timedelta(days=5)],
            w=400,
            type="multiple",
            placeholder="Pick dates",
            maw=300,
            clearable=True,
        ),
        dmc.Space(h=10),
        dmc.Text(id="selected-date-input-multiple"),
    ]
)


@callback(
    Output("selected-date-input-multiple", "children"),
    Input("date-picker-input-multiple", "value"),
)
def update_output(dates):
    prefix = "You have selected: "
    if dates:
        return prefix + ",   ".join(dates)
    else:
        return no_update



================================================
File: docs/datepickerinput/range.py
================================================
from datetime import datetime, timedelta, date

import dash_mantine_components as dmc
from dash import Input, Output, html, callback
from dash.exceptions import PreventUpdate

component = html.Div(
    [
        dmc.DatePickerInput(
            id="date-input-range-picker",
            label="Date Range",
            description="Select a date range",
            minDate=date(2020, 8, 5),
            type="range",
            value=[datetime.now().date(), datetime.now().date() + timedelta(days=5)],
            maw=300,
        ),
        dmc.Space(h=10),
        dmc.Text(id="selected-date-input-range-picker"),
    ]
)


@callback(
    Output("selected-date-input-range-picker", "children"),
    Input("date-input-range-picker", "value"),
)
def update_output(dates):
    prefix = "You have selected from "
    if None not in dates:
        return prefix + "   to   ".join(dates)
    else:
        raise PreventUpdate



================================================
File: docs/datepickerinput/simple.py
================================================
from datetime import datetime, date

import dash_mantine_components as dmc
from dash import Input, Output, html, callback
from dash.exceptions import PreventUpdate

component = html.Div(
    [
        dmc.DatePickerInput(
            id="date-picker-input",
            label="Start Date",
            description="You can also provide a description",
            minDate=date(2020, 8, 5),
            value=datetime.now().date(),  # or string in the format "YYYY-MM-DD"
            w=250,
        ),
        dmc.Space(h=10),
        dmc.Text(id="selected-date-input"),
    ]
)


@callback(
    Output("selected-date-input", "children"), Input("date-picker-input", "value")
)
def update_output(d):
    prefix = "You have selected: "
    if d:
        return prefix + d
    else:
        raise PreventUpdate



================================================
File: docs/datesprovider/datesprovider.md
================================================
---
name: DatesProvider
description: DatesProvider component lets you set various settings that are shared across all date components.
endpoint: /components/datesprovider
package: dash_mantine_components
category: Date Pickers
---

.. toc::


### CSS Extensions

.. admonition::CSS Extensions
   :icon: radix-icons:info-circled
   :color: red

   Date components require additional CSS styles.

The Date components require an additional CSS stylesheet.  See the [Getting Started](/getting-started) section for more information.

Be sure to include:
```python
app = Dash(external_stylesheets=[dmc.styles.DATES])
```
Or, if you want to include all optional stylesheets:
```python
app = Dash(external_stylesheets=dmc.styles.ALL)
```



### Usage

The DatesProvider component lets you set various settings that are shared across all date components. DatesProvider supports the following settings:

- `locale` – dayjs locale, note that you also need to import corresponding locale module from dayjs. Default value is en.
- `firstDayOfWeek` – number from 0 to 6, where 0 is Sunday and 6 is Saturday. Default value is 1 – Monday.
- `weekendDays` – an array of numbers from 0 to 6, where 0 is Sunday and 6 is Saturday. Default value is [0, 6] – Saturday and Sunday.

### Locale

DatePicker component uses [dayjs](https://day.js.org) behind the scenes. So you can easily customize locale by including
required locale data and setting the `locale`. Make sure to include proper localization file from dayjs library.

```python
from dash import Dash
import dash_mantine_components as dmc

scripts = [
    "https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.10.8/dayjs.min.js",
    "https://cdnjs.cloudflare.com/ajax/libs/dayjs/1.10.8/locale/ru.min.js",
]

app = Dash(__name__, external_scripts=scripts, external_stylesheets=[dmc.styles.DATES])
```

.. exec::docs.datesprovider.simple

### Keyword Arguments

#### DatesProvider

.. kwargs::DatesProvider



================================================
File: docs/datesprovider/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.DatesProvider(
    children=dmc.Stack(
        [
            dmc.DatePickerInput(
                w=250,
                label="Sélectionner une date",
            ),
            dmc.DatePickerInput(
                w=250,
                label="Sélectionner une autre date",
            ),
        ]
    ),
    settings={"locale": "fr", "firstDayOfWeek": 0, "weekendDays": [0]},
)



================================================
File: docs/datetimepicker/clearable.py
================================================
from datetime import datetime

import dash_mantine_components as dmc

component = dmc.DateTimePicker(
    clearable=True,
    value=datetime.now(),
    label="Pick date and time (clearable)",
    placeholder="Pick Date and time",
)



================================================
File: docs/datetimepicker/datetimepicker.md
================================================
---
name: DateTimePicker
description: Capture datetime from the user
endpoint: /components/datetimepicker
package: dash_mantine_components
category: Date Pickers
---

.. toc::



### CSS Extensions

.. admonition::CSS Extensions
   :icon: radix-icons:info-circled
   :color: red

   Date components require additional CSS styles.

The Date components require an additional CSS stylesheet.  See the [Getting Started](/getting-started) section for more information.

Be sure to include:
```python
app = Dash(external_stylesheets=[dmc.styles.DATES])
```
Or, if you want to include all optional stylesheets:
```python
app = Dash(external_stylesheets=dmc.styles.ALL)
```
### DatePicker props
`DateTimePicker` supports most of the `DatePicker` props, read through `DatePicker` documentation to learn about all component features that are not listed on this page.

### Simple Example

.. exec::docs.datetimepicker.simple

### With Seconds


.. exec::docs.datetimepicker.seconds


### Value format

Use `valueFormat` prop to change [dayjs format](https://day.js.org/docs/en/display/format) of value label.

.. exec::docs.datetimepicker.valueformat

### Disabled state

.. exec::docs.datetimepicker.disabled


### Input props

.. exec::docs.datetimepicker.interactive
   :code:  false


### Clearable

Set `clearable=True` prop to display clear button in the right section. Note that if you set `rightSection` prop, clear button will not be displayed.

.. exec::docs.datetimepicker.clearable


### Open picker in modal

By default, `DateTimePicker` is rendered inside `Popover`. You can change that to `Modal` by setting `dropdownType="modal"`

.. exec::docs.datetimepicker.modal






### Styles API
#### DateTimePicker selectors

| Selector                    | Static selector                               | Description                                                 |
|-----------------------------|-----------------------------------------------|-------------------------------------------------------------|
| wrapper                     | .mantine-DateTimePicker-wrapper               | Root element of the Input                                   |
| input                       | .mantine-DateTimePicker-input                 | Input element                                               |
| section                     | .mantine-DateTimePicker-section               | Left and right sections                                     |
| root                        | .mantine-DateTimePicker-root                  | Root element                                                |
| label                       | .mantine-DateTimePicker-label                 | Label element                                               |
| required                    | .mantine-DateTimePicker-required              | Required asterisk element, rendered inside label            |
| description                 | .mantine-DateTimePicker-description           | Description element                                         |
| error                       | .mantine-DateTimePicker-error                 | Error element                                               |
| calendarHeader              | .mantine-DateTimePicker-calendarHeader        | Calendar header root element                                |
| calendarHeaderControl       | .mantine-DateTimePicker-calendarHeaderControl | Previous/next calendar header controls                      |
| calendarHeaderControlIcon   | .mantine-DateTimePicker-calendarHeaderControlIcon | Icon of previous/next calendar header controls           |
| calendarHeaderLevel         | .mantine-DateTimePicker-calendarHeaderLevel   | Level control (changes levels when clicked, month -> year -> decade) |
| levelsGroup                 | .mantine-DateTimePicker-levelsGroup           | Group of months levels                                      |
| yearsList                   | .mantine-DateTimePicker-yearsList             | Years list table element                                    |
| yearsListRow                | .mantine-DateTimePicker-yearsListRow          | Years list row element                                      |
| yearsListCell               | .mantine-DateTimePicker-yearsListCell         | Years list cell element                                     |
| yearsListControl            | .mantine-DateTimePicker-yearsListControl      | Button used to pick months and years                        |
| monthsList                  | .mantine-DateTimePicker-monthsList            | Months list table element                                   |
| monthsListRow               | .mantine-DateTimePicker-monthsListRow         | Months list row element                                     |
| monthsListCell              | .mantine-DateTimePicker-monthsListCell        | Months list cell element                                    |
| monthsListControl           | .mantine-DateTimePicker-monthsListControl     | Button used to pick months and years                        |
| monthThead                  | .mantine-DateTimePicker-monthThead            | thead element of month table                                |
| monthRow                    | .mantine-DateTimePicker-monthRow              | tr element of month table                                   |
| monthTbody                  | .mantine-DateTimePicker-monthTbody            | tbody element of month table                                |
| monthCell                   | .mantine-DateTimePicker-monthCell             | td element of month table                                   |
| month                       | .mantine-DateTimePicker-month                 | Month table element                                         |
| weekdaysRow                 | .mantine-DateTimePicker-weekdaysRow           | Weekdays tr element                                         |
| weekday                     | .mantine-DateTimePicker-weekday               | Weekday th element                                          |
| day                         | .mantine-DateTimePicker-day                   | Month day control                                           |
| timeWrapper                 | .mantine-DateTimePicker-timeWrapper           | Wrapper around time input and submit button                 |
| timeInput                   | .mantine-DateTimePicker-timeInput             | TimeInput                                                   |
| submitButton                | .mantine-DateTimePicker-submitButton          | Submit button                                               |

#### DateTimePicker data attributes

| Selector              | Attribute          | Condition                                                | Value                                        |
|-----------------------|--------------------|----------------------------------------------------------|----------------------------------------------|
| calendarHeaderControl  | data-direction     | –                                                        | "previous" or "next" depending on the control type |
| calendarHeaderControl  | data-disabled      | Control is disabled for any reason                        | –                                            |
| monthCell             | data-with-spacing  | `withCellSpacing` prop is set                             | –                                            |
| day                   | data-today         | Date is the same as `new Date()`                          | –                                            |
| day                   | data-hidden        | Day is outside of current month and `hideOutsideDates` is set | –                                         |
| day                   | data-disabled      | Day disabled by one of the props (`excludeDate`, `getDayProps`, etc.) | –                                      |
| day                   | data-weekend       | Day is weekend                                            | –                                            |
| day                   | data-outside       | Day is outside of the current month                       | –                                            |
| day                   | data-selected      | Day is selected                                           | –                                            |
| day                   | data-in-range      | Day is in range selection                                 | –                                            |
| day                   | data-first-in-range| Day is first in range selection                           | –                                            |
| day                   | data-last-in-range | Day is last in range selection                            | –                                            |


### Keyword Arguments

#### DateTimePicker

.. kwargs::DateTimePicker



================================================
File: docs/datetimepicker/disabled.py
================================================
import dash_mantine_components as dmc

component = dmc.DateTimePicker(
    disabled=True,
    label="Pick date and time (Disabled)",
    placeholder="Pick date and time",
)



================================================
File: docs/datetimepicker/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-datetime-input"
target = dmc.Center(
    dmc.DateTimePicker(
        label="Pick a date and time",
        placeholder="Pick date and time",
        w=250,
        id=TARGET_ID,
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_text_input(
    "placeholder", "Pick date and time", **{"placeholder": "Placeholder"}
)
configurator.add_text_input("label", "Pick date and time", **{"placeholder": "Label"})
configurator.add_text_input("description", "", **{"placeholder": "Description"})
configurator.add_text_input("error", "", **{"placeholder": "Error"})
configurator.add_select("variant", ["default", "filled", "unstyled"], "default")
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "sm")
configurator.add_switch("withAsterisk", True)
configurator.add_switch("disabled", False)


component = configurator.panel



================================================
File: docs/datetimepicker/modal.py
================================================
import dash_mantine_components as dmc

component = dmc.DateTimePicker(
    dropdownType="modal",
    label="Pick date and time (picker in modal)",
    placeholder="Pick date and time",
)



================================================
File: docs/datetimepicker/seconds.py
================================================
import dash_mantine_components as dmc

component = dmc.DateTimePicker(
    label="Pick date and time",
    placeholder="Pick date and time",
    withSeconds=True,
)



================================================
File: docs/datetimepicker/simple.py
================================================
import dash_mantine_components as dmc
from dash import Input, Output, html, callback, no_update


component = html.Div(
    [
        dmc.DateTimePicker(
            id="datetime-picker",
            label="Start Date and time",
            description="You can also provide a description",
            w=250,
        ),
        dmc.Space(h=10),
        dmc.Text(id="selected-datetime"),
    ]
)


@callback(Output("selected-datetime", "children"), Input("datetime-picker", "value"))
def update_output(d):
    return f"You have selected {d}"



================================================
File: docs/datetimepicker/valueformat.py
================================================
import dash_mantine_components as dmc

component = dmc.DateTimePicker(
    valueFormat="DD MMM YYYY hh:mm A",
    label="Pick date and time (Value Formatter)",
    placeholder="Pick date and time",
)



================================================
File: docs/divider/color.py
================================================
import dash_mantine_components as dmc

component = dmc.Divider(color="red")



================================================
File: docs/divider/divider.md
================================================
---
name: Divider
description: Use Divider component as an alternative to html.Hr.
endpoint: /components/divider
package: dash_mantine_components
category: Miscellaneous
---

.. toc::

### Simple Example

.. exec::docs.divider.simple

### With Label

You can provide `label` and `labelPosition` to customize dmc.Divider.

.. exec::docs.divider.label

### Different Sizes

Set the `size` property to change the size of the divider.

.. exec::docs.divider.sizes

### Vertical Divider

Divider can be used in vertical orientations by setting `orientation="vertical"` and providing it some height.

.. exec::docs.divider.orientation

### With Color

Set the Divider color from one of the colors of Mantine default theme using the `color` prop.

.. exec::docs.divider.color

### Styles API

| Name  | Static selector        | Description   |
|:------|:-----------------------|:--------------|
| root  | .mantine-Divider-root  | Root element  |
| label | .mantine-Divider-label | Label element |

### Keyword Arguments

#### Divider

.. kwargs::Divider



================================================
File: docs/divider/label.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    [
        dmc.Divider(label="Click on update button to refresh"),
        dmc.Divider(label="Divider with centered content", labelPosition="center"),
        dmc.Divider(label="Divider with content on the right", labelPosition="right"),
    ],
)



================================================
File: docs/divider/orientation.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    [
        dmc.Badge("Badge 1"),
        dmc.Divider(orientation="vertical", style={"height": 20}),
        dmc.Badge("Badge 2"),
        dmc.Divider(orientation="vertical", style={"height": 20}),
        dmc.Badge("Badge 3"),
    ]
)



================================================
File: docs/divider/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    children=[
        dmc.Divider(variant="solid"),
        dmc.Divider(variant="dashed"),
        dmc.Divider(variant="dotted"),
    ],
)



================================================
File: docs/divider/sizes.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    children=[
        dmc.Divider(size="xs"),
        dmc.Divider(size="sm"),
        dmc.Divider(size="md"),
        dmc.Divider(size="lg"),
        dmc.Divider(size="xl"),
        dmc.Divider(size=10),
    ],
)



================================================
File: docs/donutchart/angle.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.DonutChart(data=data, startAngle=180, endAngle=0)



================================================
File: docs/donutchart/chartlabel.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.DonutChart(data=data, chartLabel="Users by country")



================================================
File: docs/donutchart/clickdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data

component = dmc.Stack(
    [
        dmc.DonutChart(id="figure-donutchart", data=data, withTooltip=False),
        dmc.Text(id="clickdata-donutchart1"),
        dmc.Text(id="clickdata-donutchart2"),
    ]
)



@callback(
    Output("clickdata-donutchart1", "children"),
    Output("clickdata-donutchart2", "children"),
    Input("figure-donutchart", "clickData"),
    Input("figure-donutchart", "clickSeriesName"),
)
def update(data, name):
    return f"clickData:  {data}", f"clickSeriesName: {name}"



================================================
File: docs/donutchart/data.py
================================================
data = [
    {"name": "USA", "value": 400, "color": "indigo.6"},
    {"name": "India", "value": 300, "color": "yellow.6"},
    {"name": "Japan", "value": 100, "color": "teal.6"},
    {"name": "Other", "value": 200, "color": "gray.6"},
]



================================================
File: docs/donutchart/donut.md
================================================
---
name: DonutChart
description: Donut chart component
endpoint: /components/donutchart
package: dash_mantine_components
category: Charts
---

.. toc::

### Usage

`DonutChart` is based on [PieChart recharts component](https://recharts.org/en-US/api/PieChart):

.. exec::docs.donutchart.usage

### Data

Here is the data imported for the examples on this page:

```python

data = [
  { "name": "USA", "value": 400, "color": "indigo.6" },
  { "name": "India", "value": 300, "color": "yellow.6" },
  { "name": "Japan", "value": 100, "color": "teal.6" },
  { "name": "Other", "value": 200, "color": "gray.6" }
]

```
    

### Segments labels

Set `withLabels` prop to display labels next to each segment:

.. exec::docs.donutchart.segmentlabels
    :code: false

```python
import dash_mantine_components as dmc
from .data import data

dmc.DonutChart(
    data=data,   
    withLabels=True,
    withLabelsLine=True
)
```

### Size and thickness 

Set `size` prop to control width and height of the chart. Note that if `withLabels` prop is set, the chart height is
automatically increased by 80px to make room for labels. You can override this behavior by setting `h` style prop.


.. exec::docs.donutchart.size
    :code: false



```python
import dash_mantine_components as dmc
from .data import data

dmc.DonutChart(
    data=data,
    size=160,
    thickness=30
)
```


### Padding angle 

Use `paddingAngle` prop to control the space between segments:

.. exec::docs.donutchart.paddingangle
    :code: false


```python

import dash_mantine_components as dmc
from .data import data

dmc.DonutChart(
    data=data,
    paddingAngle=30,
)
```


### Segment color

You can reference colors from theme the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. 
Any valid CSS color value is also accepted.

.. exec::docs.donutchart.segmentcolor


### Tooltip data source

By default, the tooltip displays data for all segments when hovered over any segment. To display data only for the hovered segment, set tooltipDataSource="segment":

.. exec::docs.donutchart.tooltipdatasource

### Without tooltip

To remove the tooltip, set `withTooltip=False`:


.. exec::docs.donutchart.withouttooltip

### Chart label

To display a label in the center of the chart, use `chartLabel` prop. It accepts a string or a number:

.. exec::docs.donutchart.chartlabel


### Start and end angle

Use `startAngle` and `endAngle` props to control the start and end angle of the chart. For example, to display a
half-circle chart, set `startAngle=180` and `endAngle=0`:

.. exec::docs.donutchart.angle

### Segments stroke

Use `strokeWidth` prop to control the width of the stroke around each segment.


.. exec::docs.donutchart.strokewidth
    :code: false


```python
import dash_mantine_components as dmc
from .data import data

dmc.DonutChart(
    data=data,
    strokeWidth=1.8  
)
```

To change color of the stroke, use `strokeColor` prop. You can reference colors from theme the same way as in other
components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

```python
dmc.DonutChart(
    data=data,
    strokeColor="red.5"
)
```

By default, segments stroke color is the same as the background color of the body element
(`--mantine-color-body` CSS variable). If you want to change it depending on the color scheme, define CSS variable
and pass it to the `strokeColor` prop:


.. exec::docs.donutchart.stroke

```css
.root {
  --card-bg: light-dark(var(--mantine-color-gray-1), var(--mantine-color-dark-5));

  background-color: var(--card-bg);
  padding: var(--mantine-spacing-md);
  border-radius: var(--mantine-radius-md);
}

```


### Donut animation
By default, the Recharts data animation is disabled. To enable and customize the animation, use `pieProps` to pass properties to the Recharts `Pie` component.


.. exec::docs.donutchart.donut_animation


### clickData
Use the `clickData` property in a callback to retrieve data from the most recent click event. To get the name of the
clicked series, use the `clickSeriesName` property.
.. exec::docs.donutchart.clickdata



### hoverData
Use the `hoverData` property in a callback to retrieve data from the most recent hover event. To get the name of the 
hovered series, use the `hoverSeriesName` property.

.. exec::docs.donutchart.hoverdata


### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### DonutChart selectors

| Selector    | Static selector              | Description                             |
|:------------|:-----------------------------|:----------------------------------------|
| root        | .mantine-DonutChart-root    | Root element                            |
| label       | .mantine-DonutChart-label   | Chart label, controlled by chartLabel prop |

#### DonutChart CSS variables

| Selector         | Variable               | Description                              |
|:-----------------|:-----------------------|:-----------------------------------------|
| root             | --chart-labels-color   | Controls color of the chart labels       |
|                  | --chart-size           | Controls size of the chart               |
|                  | --chart-stroke-color   | Controls color of the chart stroke       |

### Keyword Arguments

#### DonutChart

.. kwargs::DonutChart



================================================
File: docs/donutchart/donut_animation.py
================================================
from random import randint
import dash_mantine_components as dmc
from dash import callback, Input, Output


def get_data(values):
    return [
        {"name": "A", "value": values[0], "color": "indigo.6"},
        {"name": "B", "value": values[1], "color": "yellow.6"},
        {"name": "C", "value": values[2], "color": "teal.6"},
        {"name": "C", "value": values[3], "color": "gray.6"},
    ]


component = dmc.Box(
    [
        dmc.Button("Update Chart", id="btn-donutchart-animation", n_clicks=0, mb="md"),
        dmc.DonutChart(
            id="donutchart-animation",
            data=get_data([100, 0, 0, 0]),
            pieProps={"isAnimationActive": True},
        ),
    ]
)


@callback(
    Output("donutchart-animation", "data"),
    Input("btn-donutchart-animation", "n_clicks"),
)
def update(n):
    if n % 2 == 0:
        return get_data([400, 300, 600, 100])
    return get_data([100, 0, 0, 0])



================================================
File: docs/donutchart/hoverdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data

component = dmc.Stack(
    [
        dmc.DonutChart(id="figure-donutchart-hover", data=data, withTooltip=False),
        dmc.Text(id="hoverdata-donutchart1"),
        dmc.Text(id="hoverdata-donutchart2"),
    ]
)


@callback(
    Output("hoverdata-donutchart1", "children"),
    Output("hoverdata-donutchart2", "children"),
    Input("figure-donutchart-hover", "hoverData"),
    Input("figure-donutchart-hover", "hoverSeriesName"),
)
def update(data, name):
    return f"hoverData:  {data}", f"hoverSeriesName: {name}"



================================================
File: docs/donutchart/paddingangle.py
================================================
import dash_mantine_components as dmc
from .data import data

from lib.configurator import Configurator

target = dmc.DonutChart(data=data, paddingAngle=30)

configurator = Configurator(target)
configurator.add_number_slider("paddingAngle", 30, min=0, max=30)

component = configurator.panel



================================================
File: docs/donutchart/segmentcolor.py
================================================
import dash_mantine_components as dmc

data = [
    {"name": "USA", "value": 400, "color": "blue"},
    {"name": "Other", "value": 200, "color": "gray.6"},
]

component = dmc.DonutChart(data=data)



================================================
File: docs/donutchart/segmentlabels.py
================================================
import dash_mantine_components as dmc
from .data import data

from lib.configurator import Configurator

target = dmc.DonutChart(data=data, withLabels=True, withLabelsLine=True)

configurator = Configurator(target)

configurator.add_switch("withLabelsLine", True)

component = configurator.panel



================================================
File: docs/donutchart/size.py
================================================
import dash_mantine_components as dmc
from .data import data

from lib.configurator import Configurator

target = dmc.DonutChart(data=data, size=160, thickness=20)

configurator = Configurator(target)
configurator.add_number_slider("size", 275, min=80, max=300)
configurator.add_number_slider("thickness", 20, min=2, max=30)

component = configurator.panel



================================================
File: docs/donutchart/stroke.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.DonutChart(data=data, strokeColor="var(--card-bg)")



================================================
File: docs/donutchart/strokewidth.py
================================================
import dash_mantine_components as dmc
from .data import data

from lib.configurator import Configurator

target = dmc.DonutChart(
    data=data,
)

configurator = Configurator(target)

configurator.add_number_slider("strokeWidth", 0, min=0, max=5)

component = configurator.panel



================================================
File: docs/donutchart/tooltipdatasource.py
================================================
import dash_mantine_components as dmc
from dash import html
from .data import data

component = dmc.Group(
    [
        html.Div(
            [
                dmc.Text(
                    "Data only for hovered segment", fz="xs", mb="sm", ta="center"
                ),
                dmc.DonutChart(
                    data=data,
                    withTooltip=True,
                    tooltipDataSource="segment",
                    mx="auto",
                ),
            ]
        ),
        html.Div(
            [
                dmc.Text("Data only for all segments", fz="xs", mb="sm", ta="center"),
                dmc.DonutChart(
                    data=data,
                    withTooltip=True,
                    mx="auto",
                ),
            ]
        ),
    ],
    gap=50,
)



================================================
File: docs/donutchart/usage.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.DonutChart(data=data)



================================================
File: docs/donutchart/withouttooltip.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.DonutChart(data=data, withTooltip=False)



================================================
File: docs/drawer/drawer.md
================================================
---
name: Drawer
description: Use Drawer component to create collapsible sidebars.
endpoint: /components/drawer
package: dash_mantine_components
category: Overlay
---

.. toc::

### Simple Example

This is a basic example of dmc.Drawer. Set the `opened` property to open the drawer. The drawer can be controlled in following ways:

* programmatically (using callbacks)
* by clicking on the cross button (if not disabled using `hideCloseButton` prop)
* by clicking outside the drawer area (if not disabled using `closeOnClickOutside` prop)
* by pressing the ESC key (if not disabled using `closeOnEscape` prop)

.. exec::docs.drawer.simple

### Different Sizes

Set the size of the drawer using the `size` prop.

.. exec::docs.drawer.sizes

### Placement

By default, Drawer will start to appear from the left, but this position can be customized by setting the `position` 
prop.

.. exec::docs.drawer.placement

### Transition

You can customize transition, timing function and duration for Drawer transition.

.. exec::docs.drawer.transition

### Styles API

#### Drawer Selectors

| Selector  | Static selector             | Description                                                             |
| --------- | --------------------------- | ----------------------------------------------------------------------- |
| `root`    | `.mantine-Drawer-root`       | Root element                                                            |
| `inner`   | `.mantine-Drawer-inner`      | Element used to center modal, has fixed position, takes entire screen    |
| `content` | `.mantine-Drawer-content`    | Drawer.Content root element                                              |
| `header`  | `.mantine-Drawer-header`     | Contains title and close button                                          |
| `overlay` | `.mantine-Drawer-overlay`    | Overlay displayed under the Drawer.Content                               |
| `title`   | `.mantine-Drawer-title`      | Drawer title (`h2` tag), displayed in the header                         |
| `body`    | `.mantine-Drawer-body`       | Drawer body, displayed after header                                      |
| `close`   | `.mantine-Drawer-close`      | Close button                                                            |



#### Drawer CSS variables


| Selector | Variable          | Description                              |
|----------|-------------------|------------------------------------------|
| root     | --drawer-offset    | Controls margin of Drawer.Content        |
|          | --drawer-size      | Controls width of Drawer.Content         |
|          | --drawer-flex      | Controls flex property of Drawer.Content |
|          | --drawer-align     | Controls align-items property of Drawer.Content |
|          | --drawer-justify   | Controls justify-content property of Drawer.Content |
|          | --drawer-height    | Controls height property of Drawer.Content |


### Keyword Arguments

#### Drawer

.. kwargs::Drawer



================================================
File: docs/drawer/placement.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, State, callback

data = [
    ["Left (Default)", "left"],
    ["Top", "top"],
    ["Right", "right"],
    ["Bottom", "bottom"],
]

component = html.Div(
    [
        dmc.Drawer(
            id="drawer-position",
        ),
        dmc.Group(
            align="center",
            gap="xl",
            children=[
                dmc.RadioGroup(
                    dmc.Group([dmc.Radio(label, value=value) for label, value in data]),
                    id="drawer-position-radio",
                    value="left",
                ),
                dmc.Button("Open Drawer", id="drawer-position-button"),
            ],
        ),
    ]
)


@callback(
    Output("drawer-position", "opened"),
    Output("drawer-position", "position"),
    Input("drawer-position-button", "n_clicks"),
    State("drawer-position-radio", "value"),
    prevent_initial_call=True,
)
def toggle_drawer(n_clicks, position):
    return True, position



================================================
File: docs/drawer/simple.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, callback

component = html.Div(
    [
        dmc.Button("Open Drawer", id="drawer-demo-button"),
        dmc.Drawer(
            title="Drawer Example",
            id="drawer-simple",
            padding="md",
        ),
    ]
)


@callback(
    Output("drawer-simple", "opened"),
    Input("drawer-demo-button", "n_clicks"),
    prevent_initial_call=True,
)
def drawer_demo(n_clicks):
    return True



================================================
File: docs/drawer/sizes.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, State, callback

component = html.Div(
    [
        dmc.Drawer(title="Size: md", id="drawer-size-md", padding="md", size="md"),
        dmc.Drawer(
            title="Size: 450px",
            id="drawer-size-450",
            padding="md",
            size=450,
        ),
        dmc.Drawer(
            title="Size: 55%",
            id="drawer-size-55",
            padding="md",
            size="55%",
        ),
        dmc.Drawer(
            title="Size: full",
            id="drawer-size-full",
            padding="md",
            size="100%",
        ),
        dmc.Group(
            [
                dmc.Button("md", id="md-drawer-button"),
                dmc.Button("450px", id="450-drawer-button"),
                dmc.Button("55%", id="55-drawer-button"),
                dmc.Button("full", id="full-drawer-button"),
            ]
        ),
    ]
)


def toggle_drawer(n_clicks, opened):
    return not opened


for size in ["md", "450", "55", "full"]:
    callback(
        Output(f"drawer-size-{size}", "opened"),
        Input(f"{size}-drawer-button", "n_clicks"),
        State(f"drawer-size-{size}", "opened"),
        prevent_initial_call=True,
    )(toggle_drawer)



================================================
File: docs/drawer/transition.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, callback

component = html.Div(
    [
        dmc.Button("Open Drawer", id="drawer-transition-button"),
        dmc.Drawer(
            title="Drawer Example",
            id="drawer-fancy",
            padding="md",
            transitionProps={
                "transition": "rotate-left",
                "duration": 1000,
                "timingFunction": "ease",
            },
        ),
    ]
)


@callback(
    Output("drawer-fancy", "opened"),
    Input("drawer-transition-button", "n_clicks"),
    prevent_initial_call=True,
)
def drawer_demo(n_clicks):
    return True



================================================
File: docs/fieldset/disabled.py
================================================
import dash_mantine_components as dmc

component = dmc.Fieldset(
    children=[
        dmc.TextInput(label="Your name", placeholder="Your name"),
        dmc.TextInput(label="Email", placeholder="Email"),
        dmc.Group([dmc.Button("Send")], justify="flex-end"),
    ],
    legend="Personal information",
    disabled=True,
)



================================================
File: docs/fieldset/fieldset.md
================================================
---
name: Fieldset
description: Group related elements in a form.
endpoint: /components/fieldset
package: dash_mantine_components
category: Inputs
---

.. toc::

### Introduction

.. exec::docs.fieldset.interactive
   :code: false

### Disabled State

Set `disabled` prop to disable all inputs and buttons inside the fieldset:

.. exec::docs.fieldset.disabled

### Styles API
#### Fieldset selectors

| Selector | Static selector            | Description      |
| -------- | -------------------------- | ---------------- |
| `root`   | `.mantine-Fieldset-root`    | Root element     |
| `legend` | `.mantine-Fieldset-legend`  | Legend element   |

#### Fieldset CSS variables

| Selector | Variable           | Description               |
| -------- | ------------------ | ------------------------- |
| `root`   | `--fieldset-radius` | Controls border-radius     |

### Keyword Arguments

#### TextInput

.. kwargs::Fieldset


================================================
File: docs/fieldset/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "fieldset-interactive"

target = dmc.Fieldset(
    children=[
        dmc.TextInput(label="Your name", placeholder="Your name"),
        dmc.TextInput(label="Email", placeholder="Email"),
    ],
    legend="Personal information",
    id=TARGET_ID,
)

configurator = Configurator(target, TARGET_ID)

configurator.add_select(
    "variant",
    ["default", "filled", "unstyled"],
    "filled",
)
configurator.add_slider("radius", "sm")
configurator.add_switch("disabled", False)

component = configurator.panel



================================================
File: docs/figuretemplates/mantine_figure_templates.py
================================================
import dash_mantine_components as dmc
from dash import dcc
import plotly.express as px

df = px.data.gapminder()
dff = df[df.year == 2007]

dmc.add_figure_templates()


component = dmc.SimpleGrid(
    [
        dcc.Graph(figure=px.bar(dff, x="continent", y="pop", template="mantine_light", title="matine_light theme" )),
        dcc.Graph(figure=px.bar(dff, x="continent", y="pop", template="mantine_dark",  title="mantine_dark theme"))
    ],
    cols=2
)


================================================
File: docs/figuretemplates/multiple_figures.py
================================================

import dash_mantine_components as dmc
from dash import  dcc, Input, Output, State, callback, Patch, ALL
import plotly.express as px
import plotly.io as pio

dmc.add_figure_templates(default="mantine_light")

df = px.data.gapminder()

line_fig = px.line(
    df.query("1952 <= year <= 1982 & continent != 'Asia'"),
    x="year",
    y="gdpPercap",
    color="continent",
    line_group="country"
)

dff = df[df.year == 2007]
scatter_fig = px.scatter(
    dff,
    x="gdpPercap",
    y="lifeExp",
    size="pop",
    color="continent",
    log_x=True,
    size_max=60,
    title=f"2007 GDP per Capita vs Life Expectancy, Sized by Population ",
)


avg_lifeExp = (dff["lifeExp"] * dff["pop"]).sum() / dff["pop"].sum()
map_fig = px.choropleth(
    dff,
    locations="iso_alpha",
    color="lifeExp",
    title="%.0f World Average Life Expectancy was %.1f years" % (2007, avg_lifeExp),
)

bar_fig = px.bar(dff, x="continent", y="pop", title="Population by Continent")

graphs = dmc.Grid(
    [
        dmc.GridCol(dcc.Graph(figure=bar_fig, id={"type": "graph", "index": "bar"}), span={"base": 12, "md":6}),
        dmc.GridCol(dcc.Graph(figure=scatter_fig, id={"type": "graph", "index": "scatter"}), span={"base": 12, "md":6}),
        dmc.GridCol(dcc.Graph(figure=line_fig, id={"type": "graph", "index": "line"}), span={"base": 12, "md":6}),
        dmc.GridCol(dcc.Graph(figure=map_fig, id={"type": "graph", "index": "map"}), span={"base": 12, "md":6}),
    ],
    gutter="xl",
)

sample_controls = dmc.Box([
    dmc.Button("sample button"),
    dmc.Button("sample red button", color="red"),
    dmc.Button("sample yellow button", color="yellow"),
    dmc.Slider(value=25, my="lg"),
], w=600)

# used in the children prop of  MantinePovider([], id="m2d-mantine-provider)
component = dmc.Box([sample_controls, graphs])

@callback(
    Output({"type": "graph", "index": ALL}, "figure"),
    Input("m2d-mantine-provider", "forceColorScheme"),
    State({"type": "graph", "index": ALL}, "id"),
)
def update_figure(theme, ids):
    # template must be template object rather than just the template string name
    template = pio.templates["mantine_light"] if theme == "light" else pio.templates["mantine_dark"]
    patched_figures = []
    for i in ids:
        patched_fig = Patch()
        patched_fig["layout"]["template"] = template
        patched_figures.append(patched_fig)

    return patched_figures



================================================
File: docs/figuretemplates/plotly_figure_templates.py
================================================
import dash_mantine_components as dmc
from dash import dcc
import plotly.express as px

df = px.data.gapminder()
dff = df[df.year == 2007]

component = dmc.SimpleGrid(
    [
        dcc.Graph(figure=px.bar(dff, x="continent", y="pop", template="plotly_white", title="plotly_white theme")),
        dcc.Graph(figure=px.bar(dff, x="continent", y="pop", template="plotly_dark", title="plotly_dark theme"))
    ],
    cols=2
)



================================================
File: docs/figuretemplates/templates.md
================================================
---
name: Plotly figure templates
description: How to style Plotly figures with a Mantine theme.
endpoint: /components/figure-templates
package: dash_mantine_components
category: Theming
order: 11  # sets order in navbar section
---

.. toc::

---

### Plotly Figure Template Basics

Plotly figure templates allow you to style your figures globally or per-figure. Templates include pre-defined color schemes, font styles, and layout configurations.

For more details, refer to the [Plotly templates documentation](https://plotly.com/python/templates/).

Below is an example using Plotly's built-in `plotly_white` and `plotly_dark` templates.  This is the same figure
styled for a light and dark theme.


.. exec::docs.figuretemplates.plotly_figure_templates


### Mantine-Themed Plotly Templates

To make Plotly figures consistent with Mantine's default theme, Dash Mantine Components provides two custom Plotly templates:

- **`mantine_light`**: Based on `plotly_white` and styled with Mantine's light theme.  
- **`mantine_dark`**: Based on `plotly_dark` and styled with Mantine's dark theme.  

These templates are created and registered using the `add_figure_templates` function. They include:  
- Color palettes from Mantine’s theme.  
- Fonts (`Inter` by default).  
- Background and grid colors that match Mantine’s styles.  


.. exec::docs.figuretemplates.mantine_figure_templates


### Setting a Default Template
You can globally set either `mantine_light` or `mantine_dark` as the default Plotly template. This ensures all figures
use the specified template unless explicitly overridden.

```python
import dash_mantine_components as dmc

# Set "mantine_dark" as the default template
dmc.add_figure_templates(default="mantine_dark")
```


### Modifying Existing Plotly Templates
The `mantine_light` and `mantine_dark` templates can be customized like any other Plotly template. Refer to the
[Plotly templates documentation](https://plotly.com/python/templates/) for more info and examples.

```python
import plotly.io as pio
import plotly.express as px
import dash_mantine_components as dmc

dmc.add_figure_templates()

# Access the registered Mantine light template
template = pio.templates["mantine_light"]

# Reduce the margins in the template
template.layout.margin = dict(l=20, r=20, t=20, b=20)

fig = px.scatter(px.data.gapminder(), x="gdpPercap", y="lifeExp", template="mantine_light")



```

### Customizing `add_figure_templates` Function
The `add_figure_templates` function is available starting in DMC version 0.15.1.
If you are using an earlier version, or if you are using a custom Mantine theme, you can include your own `add_figure_templates` implementation in your project.

Example Project Structure:
```bash
my_project/  
├── app.py  
├── my_figure_templates.py  
```

In `my_figure_templates.py`:

Copy the `add_figure_templates` code from the [Dash Mantine Components GitHub](https://github.com/snehilvj/dash-mantine-components/blob/master/dash_mantine_components/figure_templates.py) 
repository and modify it to fit your project's requirements.

In `app.py`:
```python
from my_figure_templates import add_figure_templates

# Register custom templates
add_figure_templates()
```

In the [Help Center](https://github.com/snehilvj/dmc-docs/tree/main/help_center/theme_switch_figure_templates_custom) you'll find a complete minimal example of a custom figure template with a green primary color.

### Using a Theme Switcher

To update the figure when switching themes, you need to change the Plotly template in a callback.


> For more information on adding a theme switcher to your app, check the [Theme Switch Component](/theme-switch) section.

The example below uses this app's  `MantineProvider` in the callback.  Try it out by clicking the **theme icon** in the header!

See a complete minimal example in the [Help Center](https://github.com/snehilvj/dmc-docs/tree/main/help_center/theme_switch_figure_templates_simple)

.. exec::docs.figuretemplates.theme_switch

For better performance, you can update the figure template using [Partial Property Updates.](https://dash.plotly.com/partial-properties)

Here is the callback updated to use `Patch` to change the figure template.  Note that when using `Patch` you must use the template
object rather than just the string name.  

```python

from dash import  Input, Output, callback, Patch
import plotly.io as pio


@callback(
    Output("figure-templates-bar", "figure"),
    Input("mantine-provider", "forceColorScheme"),
)
def update_figure(theme):
    # template must be template object rather than just the template string name
    template = pio.templates["mantine_light"] if theme == "light" else pio.templates["mantine_dark"]
    patched_fig = Patch()
    patched_fig["layout"]["template"] = template
    return patched_fig
```

### Updating multiple figures

To update multiple figure when switching themes, you can use [Pattern Matching Callbacks.](https://dash.plotly.com/pattern-matching-callbacks)
 
The example below uses this app's  `MantineProvider` in the callback.  Try it out by clicking the **theme icon** in the header!

See a complete minimal example in the [Help Center](https://github.com/snehilvj/dmc-docs/tree/main/help_center/theme_switch_figure_templates)

.. exec::docs.figuretemplates.multiple_figures




================================================
File: docs/figuretemplates/theme_switch.py
================================================
import dash_mantine_components as dmc
from dash import dcc, Input, Output, callback
import plotly.express as px

df = px.data.gapminder()
dff = df[df.year == 2007]

dmc.add_figure_templates()

# used in the children prop of  MantinePovider([], id="m2d-mantine-provider)
component = dcc.Graph(id="figure-templates-histogram")

@callback(
    Output("figure-templates-histogram", "figure"),
    Input("m2d-mantine-provider", "forceColorScheme"),
)
def update_figure(theme):
    return px.bar(dff, x="continent", y="pop", title="Population by Continent", template=f"mantine_{theme}")



================================================
File: docs/flex/flex.md
================================================
---
name: Flex
description: Use the Flex component to compose elements in a flex container.
endpoint: /components/flex
package: dash_mantine_components
category: Layout
---

.. toc::

### Introduction

.. exec::docs.flex.interactive
   :code: false

### Supported Props

| Prop        | CSS Property     | Theme Key       |
|-------------|------------------|-----------------|
| gap         | gap              | theme.spacing   |
| rowGap      | rowGap           | theme.spacing   |
| columnGap   | columnGap        | theme.spacing   |
| align       | alignItems       | –               |
| justify     | justifyContent   | –               |
| wrap        | flexWrap         | –               |
| direction   | flexDirection    | –               |



### Responsive Props

Flex component props can have responsive values the same way as other style props:

.. exec::docs.flex.responsive


### Comparison: Group, Stack, and Flex

`Flex` component is an alternative to `Group` and `Stack`. 
`Flex` is more flexible, it allows creating both horizontal and vertical flexbox layouts, but requires more configuration.

| Feature                    | Group | Stack | Flex |
|----------------------------|-------|-------|------|
| Direction                  | horizontal | vertical | both |
| Equal width children       | ✅     | ❌    | ❌   |
| flex-wrap support          | ✅     | ❌    | ✅   |
| Responsive flexbox props   | ❌     | ❌    | ✅   |




### Browser support
`Flex` uses flexbox gap to add spacing between children. In older browsers, `Flex` children may not have spacing.




### Styles API

| Name | Static selector    | Description  |
|:-----|:-------------------|:-------------|
| root | .mantine-Flex-root | Root element |

### Keyword Arguments

#### Flex

.. kwargs::Flex



================================================
File: docs/flex/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.Flex(
    [
        dmc.Button("Button 1"),
        dmc.Button("Button 2"),
        dmc.Button("Button 3"),
    ],
    mih=50,
    bg="rgba(0, 0, 0, .3)",
    gap="md",
    justify="flex-start",
    align="flex-start",
    direction="row",
    wrap="wrap",
)

configurator = Configurator(target)
configurator.add_slider("gap", "md")
configurator.add_select("justify", ["flex-start", "center", "flex-end"], "center")
configurator.add_select("align", ["flex-start", "center", "flex-end"], "flex-start")
configurator.add_select(
    "direction", ["row", "column", "row-reverse", "column-reverse"], "row"
)
configurator.add_select("wrap", ["wrap", "nowrap", "wrap-reverse"], "wrap")

component = configurator.panel



================================================
File: docs/flex/responsive.py
================================================
import dash_mantine_components as dmc

component = dmc.Flex(
    [
        dmc.Button("Button 1"),
        dmc.Button("Button 2"),
        dmc.Button("Button 3"),
    ],
    direction={"base": "column", "sm": "row"},
    gap={"base": "sm", "sm": "lg"},
    justify={"sm": "center"},
)



================================================
File: docs/getting-started/getting-started.md
================================================
---
name: Getting Started
endpoint: /getting-started
description: Install dash-mantine-components using pip, poetry, or conda.
dmc: false
---

.. toc::

### PyPI

You can install `dash-mantine-components` from PyPI via pip or poetry.

```bash
pip install dash-mantine-components
```

```bash
poetry add dash-mantine-components
```

### Simple Usage

Using Dash Mantine Components is pretty much the same as using Dash Bootstrap Components or the official Dash 
components. 

.. admonition::Don't Forget MantineProvider!
   :icon: radix-icons:info-circled
   :color: red

   It's required that you wrap your app with a dmc.MantineProvider.

.. admonition::React 18 Issue
   :icon: radix-icons:info-circled
   :color: red

   Dash Mantine Components is based on REACT 18. You must set the env variable REACT_VERSION=18.2.0 before
   starting up the app when using dash < 3.0.


.. admonition::CSS Extensions
   :icon: radix-icons:info-circled
   :color: red

   Some components require additional CSS styles.
    

```python
import dash_mantine_components as dmc
from dash import Dash, _dash_renderer

# this is optional when using dash >3.0.0
_dash_renderer._set_react_version("18.2.0")

app = Dash(external_stylesheets=dmc.styles.ALL)

app.layout = dmc.MantineProvider(
    dmc.Alert(
       "Hi from Dash Mantine Components. You can create some great looking dashboards using me!",
       title="Welcome!",
       color="violet",
    )
)

if __name__ == "__main__":
    app.run(debug=True)
```

### CSS Extensions

Most of the necessary styling is already included with `dash-mantine-components`. However, for certain components like
`DatePicker`, `Carousel`, or `CodeHighlight`, you need to add their specific CSS files separately. You can also include 
all optional CSS stylesheets at once by using `dmc.styles.ALL`.

Starting from version 0.14.4, `dash-mantine-components` provides `dmc.styles` variables to ensure that the correct 
stylesheet version is used, matching the version of the library you have installed.

To include stylesheets in your Dash app, you can do something like this:

```python
from dash import Dash
import dash_mantine_components as dmc

# below covers all the stylesheets, you can pick as per your need.
stylesheets = [
    dmc.styles.DATES,
    dmc.styles.CODE_HIGHLIGHT,
    dmc.styles.CHARTS,
    dmc.styles.CAROUSEL,
    dmc.styles.NOTIFICATIONS,
    dmc.styles.NPROGRESS,
]
app = Dash(__name__, external_stylesheets=stylesheets)
```

Or, if you want to include all optional stylesheets:

```python
app = Dash(external_stylesheets=dmc.styles.ALL)
```

If you need to add other external stylesheets along with these, you can do it like this:

```python
app = Dash(external_stylesheets=[dbc.icons.FONT_AWESOME] + dmc.styles.ALL)
```


Note - to find the correct stylesheet link, you can print it out like this:
```
print(dmc.styles.DATES)
```
This will give you a link like:
```
https://unpkg.com/@mantine/dates@7.11.0/styles.css
```


### Documentation

This entire documentation has been created almost entirely using Dash Mantine Components. You can check out the source
code in the [dcm-docs GitHub](https://github.com/snehilvj/dmc-docs) for some inspiration.

While going through this documentation, you will come across interactive demos meant to show an overview as well as the overall effect of different combinations of a component's props.

.. exec::docs.getting-started.interactive
   :code: false

Note that this documentation has some additional styling applied to it. So when you actually use these components, they 
might look a bit different. You can check out [MantineProvider](/components/mantineprovider) for more details on
theming and customizations.

Here's how you can add the same styling to your apps:

```python
import dash_mantine_components as dmc
from dash import Dash, _dash_renderer
_dash_renderer._set_react_version("18.2.0")

app = Dash(external_stylesheets=dmc.styles.ALL)

app.layout = dmc.MantineProvider(
     forceColorScheme="light",
     theme={
         "primaryColor": "indigo",
         "fontFamily": "'Inter', sans-serif",
         "components": {
             "Button": {"defaultProps": {"fw": 400}},
             "Alert": {"styles": {"title": {"fontWeight": 500}}},
             "AvatarGroup": {"styles": {"truncated": {"fontWeight": 500}}},
             "Badge": {"styles": {"root": {"fontWeight": 500}}},
             "Progress": {"styles": {"label": {"fontWeight": 500}}},
             "RingProgress": {"styles": {"label": {"fontWeight": 500}}},
             "CodeHighlightTabs": {"styles": {"file": {"padding": 12}}},
             "Table": {
                 "defaultProps": {
                     "highlightOnHover": True,
                     "withTableBorder": True,
                     "verticalSpacing": "sm",
                     "horizontalSpacing": "md",
                 }
             },
         },
     },
     children=[
         # content
     ],
 )

if __name__ == "__main__":
    app.run(debug=True)
```

### Next Steps

Please read the [Mantine API Overview](/mantine-api) section Theming section before starting development to learn about all of the
available theming and styling features.





================================================
File: docs/getting-started/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "getting-started-button-interactive"

target = dmc.Center(dmc.Button("Settings", id=TARGET_ID))

configurator = Configurator(target, TARGET_ID)

configurator.add_select(
    "variant",
    ["link", "filled", "outline", "light", "gradient", "subtle", "default"],
    "filled",
)
configurator.add_colorpicker("color", "indigo")
configurator.add_switch("loading", False)

component = configurator.panel



================================================
File: docs/grid/auto.py
================================================
import dash_mantine_components as dmc
from dash import html

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

component = dmc.Grid(
    children=[
        dmc.GridCol(html.Div("span=auto", style=style), span="auto"),
        dmc.GridCol(html.Div("span=6", style=style), span=6),
        dmc.GridCol(html.Div("span=auto", style=style), span="auto"),
    ],
    gutter="xl",
)



================================================
File: docs/grid/columns.py
================================================
import dash_mantine_components as dmc
from dash import html

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

component = dmc.Grid(
    children=[
        dmc.GridCol(html.Div("1", style=style), span=12),
        dmc.GridCol(html.Div("2", style=style), span=6),
        dmc.GridCol(html.Div("3", style=style), span=6),
    ],
    columns=24
)



================================================
File: docs/grid/container.py
================================================
import dash_mantine_components as dmc
from dash import html

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

component = html.Div(
    # Wrapper div is added for demonstration purposes only,
    # it is not required in real projects
    dmc.Grid(
        children=[
            dmc.GridCol(html.Div("1", style=style), span={"base": 12, "md": 6, "lg": 3}),
            dmc.GridCol(html.Div("2", style=style), span={"base": 12, "md": 6, "lg": 3}),
            dmc.GridCol(html.Div("3", style=style), span={"base": 12, "md": 6, "lg": 3}),
            dmc.GridCol(html.Div("4", style=style), span={"base": 12, "md": 6, "lg": 3}),
        ],
        gutter="xl",
        type="container",
        breakpoints={
            "xs": "100px",
            "sm": "200px",
            "md": "300px",
            "lg": "400px",
            "xl": "500px",
        },
    ),
    style={"resize": 'horizontal', "overflow": 'hidden', "maxWidth": '100%', "margin": 24 },
)



================================================
File: docs/grid/fit.py
================================================
import dash_mantine_components as dmc
from dash import html

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

component = dmc.Grid(
    children=[
        dmc.GridCol(html.Div("content width", style=style), span="content"),
        dmc.GridCol(html.Div("2", style=style), span=6),
    ],
    gutter="xl",
)



================================================
File: docs/grid/grid.md
================================================
---
name: Grid
description: Use Grid component to create layouts with a flexbox grid system with variable amount of columns.
endpoint: /components/grid
package: dash_mantine_components
category: Layout
---

.. toc::

### Usage

Use Grid component to create layouts with a flexbox grid system.

.. exec::docs.grid.simple

### Columns span
`The GridCol` `span` prop controls the ratio of column width to the total width of the row. By default, grid uses 
12 columns layout, so `span` prop can be any number from 1 to 12.

Examples:
```python
dmc.GridCol(span=3)  # 3 / 12 = 25% of row width
dmc.GridCol(span=4)  # 4 / 12 = 33% of row width
dmc.GridCol(span=6)  # 6 / 12 = 50% of row width
dmc.GridCol(span=12) # 12 / 12 = 100% of row width
```
`span` prop also supports dictionary syntax to change column width based on viewport width, it accepts `xs`, `sm`, `md`,
`lg` and `xl` keys and values from 1 to 12. The syntax is the same as in `style` props.

In the following example `span={'base': 12, 'md': 6, 'lg': 3`:

- `base` – 12 / 12 = 100% of row width when viewport width is less than `md` breakpoint
- `md` – 6 / 12 = 50% of row width when viewport width is between md and `lg` breakpoints
- `lg` – 3 / 12 = 25% of row width when viewport width is greater than `lg` breakpoint


.. exec::docs.grid.span



### Gutter 

Set `gutter` prop to control spacing between columns. The prop works the same way as `style` props – you can reference
theme.spacing values with `xs`, `sm`, `md`, `lg` and `xl` strings and use dictionary syntax to change gutter based on
viewport width.  You can also set gutter to a number to set spacing in px.

.. exec::docs.grid.gutter

### Grow

Set `grow` prop on Grid to force last row to take 100% of container width.

.. exec::docs.grid.gutter-grow
    :code: false

### Column Offset

Set `offset` prop on `GridCol` component to add gaps to the grid. `offset` prop supports the same syntax as span
prop: a number from 1 to 12 or a dictionary with `xs`, `sm`, `md`, `lg` and `xl` keys and values from 1 to 12.

.. exec::docs.grid.offset

### Order
Set the `order` prop on `GridCol` component to change the order of columns. `order` prop supports the same syntax as
`span` prop: a number from 1 to 12 or a dictionary with `xs`, `sm`, `md`, `lg` and `xl` keys and values from 1 to 12.


.. exec::docs.grid.order


### Multiple rows

Once children columns span and offset sum exceeds `columns` prop (defaults to 12), columns are placed on next row.

.. exec::docs.grid.multiple

### Justify and Align

Since grid is a flexbox container, you can control justify-content and align-items properties by using `justify` and 
`align` props respectively. Note the minimum height set on column 2 and 3.

```python
import dash_mantine_components as dmc
from dash import html

dmc.Grid(
    children=[
        dmc.GridCol(html.Div("1"), span=4),
        dmc.GridCol(html.Div("2", style={"minHeight":80}), span=4),
        dmc.GridCol(html.Div("3", style={"minHeight":120}), span=4),
    ],
    justify="center",
    align="stretch",

)
```

.. exec::docs.grid.justify
    :code: false

### Auto Sized Columns

All columns in a row with `span` or a `breakpoint` of `auto` will have equal size, growing as much as they can to fill the row.
In this example, the second column takes up 50% of the row while the other two columns automatically resize to fill the remaining space.

.. exec::docs.grid.auto

### Fit Content

If you set `span` or a `breakpoint` to `content`, the column's size will automatically adjust to match the width of its content.

.. exec::docs.grid.fit

### Change columns count
By default, grids uses 12 columns layout, you can change it by setting `columns` prop on `Grid` component. Note that
in this case, columns span and offset will be calculated relative to this value.

In the following example, first column takes 50% with 12 span (12/24), second and third take 25% (6/24):


.. exec::docs.grid.columns

### Container queries
To use [container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries) instead 
of media queries, set `type='container'`. With container queries, all responsive values are adjusted based on the
container width, not the viewport width.

Note that, when using container queries, it is also required to set `breakpoints` prop to the exact container width values.

To see how the grid changes, resize the root element of the demo with the resize handle located at the bottom right
corner of the demo:

.. exec::docs.grid.container

### overflow: hidden
By default, `Grid` has `overflow: visible` style on the root element. In some cases you might want to change it to
`overflow: hidden` to prevent negative margins from overflowing the grid container. For example, if you use `Grid` 
without parent container which has padding.

```python
dmc.Grid([
    dmc.GridCol("1", span=6),
    dmc.GridCol("2", span=6),
], overflow="hidden")
```


### Styles API


This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.


#### Grid Selectors

| Selector   | Static selector            | Description                              |
|------------|-----------------------------|------------------------------------------|
| container  | .mantine-Grid-container     | Container element, only used with `type="container"` prop |
| root       | .mantine-Grid-root          | Root element                             |
| inner      | .mantine-Grid-inner         | Columns wrapper                          |
| col        | .mantine-Grid-col           | `Grid.Col` root element                  |

---

#### Grid CSS Variables

| Selector | Variable          | Description                      |
|----------|-------------------|----------------------------------|
| root     | --grid-overflow   | Controls `overflow` property     |
|          | --grid-align      | Controls `align-items` property  |
|          | --grid-justify    | Controls `justify-content` property |

### Keyword Arguments

#### Grid

.. kwargs::Grid

#### GridCol

.. kwargs::GridCol



================================================
File: docs/grid/gutter-grow.py
================================================
import dash_mantine_components as dmc
from dash import html
from lib.configurator import Configurator

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

target = dmc.Grid(
    children=[
        dmc.GridCol(html.Div("1", style=style), span=4),
        dmc.GridCol(html.Div("2", style=style), span=4),
        dmc.GridCol(html.Div("3", style=style), span=4),
        dmc.GridCol(html.Div("4", style=style), span=4),
        dmc.GridCol(html.Div("5", style=style), span=4),
    ],
    gutter="md",
)

configurator = Configurator(target)
configurator.add_switch("grow", False)
configurator.add_slider("gutter", "md")

component = configurator.panel



================================================
File: docs/grid/gutter.py
================================================
import dash_mantine_components as dmc
from dash import html

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

component = dmc.Grid(
    children=[
        dmc.GridCol(html.Div("1", style=style), span=4),
        dmc.GridCol(html.Div("2", style=style), span=4),
        dmc.GridCol(html.Div("3", style=style), span=4),
    ],
    gutter={ "base": 5, "xs": "md", "md": "xl", "xl": 50 },
)



================================================
File: docs/grid/justify.py
================================================
import dash_mantine_components as dmc
from lib.configurator import Configurator

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
    "margin": 2,
}

target = dmc.Grid(
    children=[
        dmc.GridCol("1", style=style, span=3),
        dmc.GridCol("2", style={**style, "minHeight": 80}, span=3),
        dmc.GridCol("3", style={**style, "minHeight": 120}, span=3),
    ],
)

configurator = Configurator(target)
configurator.add_select(
    "justify",
    ["space-between", "space-around", "center", "flex-end", "flex-start"],
    "flex-start",
)
configurator.add_select(
    "align", ["stretch", "center", "flex-end", "flex-start"], "stretch"
)

component = configurator.panel



================================================
File: docs/grid/multiple.py
================================================
import dash_mantine_components as dmc
from dash import html

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

component = dmc.Grid(
    children=[
        dmc.GridCol(html.Div("1", style=style), span=4),
        dmc.GridCol(html.Div("2", style=style), span=4),
        dmc.GridCol(html.Div("3", style=style), span=4),
        dmc.GridCol(html.Div("4", style=style), span=4),
    ],
    gutter="xl",
)



================================================
File: docs/grid/offset.py
================================================
import dash_mantine_components as dmc
from dash import html

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

component = dmc.Grid(
    children=[
        dmc.GridCol(html.Div("1", style=style), span=3),
        dmc.GridCol(html.Div("2", style=style), span=3),
        dmc.GridCol(html.Div("3", style=style), span=3, offset=3),
    ],
    gutter="xl",
)



================================================
File: docs/grid/order.py
================================================
import dash_mantine_components as dmc
from dash import html

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

component = dmc.Grid(
    children=[
        dmc.GridCol(html.Div("2", style=style), span=3, order={"base": 2, "sm": 1, "lg": 3}),
        dmc.GridCol(html.Div("3", style=style), span=3, order={"base": 3, "sm": 2, "lg": 2}),
        dmc.GridCol(html.Div("1", style=style), span=3, order={"base": 1, "sm": 3, "lg": 1}),
    ],
)



================================================
File: docs/grid/simple.py
================================================
import dash_mantine_components as dmc
from dash import html

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

component = dmc.Grid(
    children=[
        dmc.GridCol(html.Div("1", style=style), span=4),
        dmc.GridCol(html.Div("2", style=style), span=4),
        dmc.GridCol(html.Div("3", style=style), span=4),
    ],
    gutter="xl",
)



================================================
File: docs/grid/span.py
================================================
import dash_mantine_components as dmc
from dash import html

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

component = dmc.Grid(
    children=[
        dmc.GridCol(html.Div("1", style=style), span={"base": 12, "md": 6, "lg":3}),
        dmc.GridCol(html.Div("2", style=style), span={"base": 12, "md": 6, "lg":3}),
        dmc.GridCol(html.Div("3", style=style), span={"base": 12, "md": 6, "lg":3}),
        dmc.GridCol(html.Div("4", style=style), span={"base": 12, "md": 6, "lg":3}),
    ],
)



================================================
File: docs/group/group.md
================================================
---
name: Group
description: Use Group component to place components in a horizontal flex container.
endpoint: /components/group
package: dash_mantine_components
category: Layout
---

.. toc::

### Usage

.. exec::docs.group.interactive
    :code: false

### preventGrowOverflow
`preventGrowOverflow` prop allows you to control how `Group` children should behave when there is not enough space to
fit them all on one line. By default, children are not allowed to take more space than (1 / children.length) * 100%
of parent width (`preventGrowOverflow` is set to True). To change this behavior, set `preventGrowOverflow` to False and 
children will be allowed to grow and take as much space as they need.


.. exec::docs.group.preventgrowoverflow

### Group children
`Group` works correctly only with components. Strings, or numbers may have incorrect styles if `grow` prop is set:

```python
# don't do this
dmc.Group([
    "Some text",
    dmc.Text("Some more text"),
    20,
], grow=True)
```

### Browser support
`Group` uses flexbox `gap` to add spacing between children. In older browsers, `Group` children may not have spacing.

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### Group Selectors

| Selector | Static selector        | Description    |
|----------|-------------------------|----------------|
| root     | .mantine-Group-root     | Root element   |



#### Group CSS Variables

| Selector | Variable                 | Description                                                  |
|----------|--------------------------|--------------------------------------------------------------|
| root     | --group-align            | Controls `align-items` property                              |
|          | --group-justify          | Controls `justify-content` property                          |
|          | --group-gap              | Controls `gap` property                                      |
|          | --group-wrap             | Controls `flex-wrap` property                                |
|          | --group-child-width      | Controls max-width of child elements when `grow` and `preventGrowOverflow` are set |



#### Group Data Attributes

| Selector | Attribute   | Condition       |
|----------|-------------|-----------------|
| root     | data-grow   | `grow` prop is set |

### Keyword Arguments

#### Group

.. kwargs::Group



================================================
File: docs/group/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.Group(
    [dmc.Button(val, variant="outline") for val in ["1", "2", "3"]],
    justify="flex-start",
)

configurator = Configurator(target)
configurator.add_select(
    "justify", ["flex-start", "center", "flex-end", "space-around"], "center"
)
configurator.add_slider("gap", "md")
configurator.add_switch("grow", False)

component = configurator.panel



================================================
File: docs/group/preventgrowoverflow.py
================================================
import dash_mantine_components as dmc

component = dmc.Box(
    style={"overflow": "hidden"},
    children=[
        dmc.Box(
            maw=500,
            p="md",
            mx="auto",
            bg="var(--mantine-color-blue-light)",
            children=[
                dmc.Text(
                    size="sm",
                    mb=5,
                    children=(
                        "preventGrowOverflow: true – each child width is always limited "
                        "to 33% of parent width (since there are 3 children)"
                    ),
                ),
                dmc.Group(
                    grow=True,
                    wrap="nowrap",
                    children=[
                        dmc.Button("First button", variant="default"),
                        dmc.Button("Second button with large content", variant="default"),
                        dmc.Button("Third button", variant="default"),
                    ],
                ),
                dmc.Text(
                    size="sm",
                    mb=5,
                    mt="md",
                    children=(
                        "preventGrowOverflow: false – children will grow based on their "
                        "content, they can take more than 33% of parent width"
                    ),
                ),
                dmc.Group(
                    grow=True,
                    preventGrowOverflow=False,
                    wrap="nowrap",
                    children=[
                        dmc.Button("First button", variant="default"),
                        dmc.Button("Second button with large content", variant="default"),
                        dmc.Button("Third button", variant="default"),
                    ],
                ),
            ],
        )
    ],
)



================================================
File: docs/helpcenter/helpcenter.md
================================================
---
name: Help Center
endpoint: /help-center
description: Frequently asked questions and links to more examples
dmc: false
---

.. toc::


### Where can I find the roadmap?

Our [roadmap](https://github.com/snehilvj/dash-mantine-components/discussions/377) on GitHub outlines our development goals and priorities. It is updated regularly to reflect progress and
new plans  in DMC and changes in the upstream Mantine library.

### Where can I find release announcements?

[Release announcements](https://github.com/snehilvj/dash-mantine-components/discussions/categories/releases) are 
available in GitHub Discussions. They include detailed descriptions and examples of new features and updates to the documentation.  

### How can I help?

We welcome contributions!  
- Bug Reports: Please open or comment on [issues](https://github.com/snehilvj/dash-mantine-components/issues).  
- Feature Requests: Use [Discussions](https://github.com/snehilvj/dash-mantine-components/discussions/categories/ideas).  
- Pull Requests: See our [Contributing Guide](https://github.com/snehilvj/dash-mantine-components/blob/master/CONTRIBUTING.md).  
- Documentation: Updating the docs is a great starting point for first-time contributors since the project is a Dash app built with `dash-mantine-components`. For more details, check out the [dmc-docs GitHub](https://github.com/snehilvj/dmc-docs).  

### Where can I find more examples?

- [Dash Mantine Components PyCafe](https://py.cafe/dash.mantine.components): Browse dozens of complete, minimal examples you can run and edit in your browser.  
- The [help_center](https://github.com/snehilvj/dmc-docs/tree/main/help_center) folder in the dmc-docs GitHub for additional examples.  
- [DMC DBC Building Blocks](https://dash-building-blocks.com/) site for more minimal code blocks to add to your app.  
- [Tips and Tricks](https://github.com/snehilvj/dash-mantine-components/discussions/categories/tips-and-tricks) section of GitHub Discussions:  
  - Frequently asked questions  
  - Examples of using DMC components in Dash AG Grid  
  - KPI cards examples  
  - AppShell examples with responsive layouts for headers, navbars, footers, and aside  
  - Theme switch components  
  - Plotly figures with a Mantine theme  
  - ...and more!  Content is updated regularly

### Need more help?

- Join our [Discord](https://discord.gg/KuJkh4Pyq5) to connect with other contributors.  
- Visit the [Plotly Dash Community Forum](https://community.plotly.com/) for discussions and support.  
- Use [GitHub Discussions]() to ask questions and find more examples.  
- Check out the upstream [Mantine Help Center](https://help.mantine.dev/). The code snippets are in TypeScript, but we can help with those. There’s great content applicable to DMC as well.  




================================================
File: docs/highlight/highlight.md
================================================
---
name: Highlight
description: Use the Highlight component to highlight a substring in a given string with mark tag.
endpoint: /components/highlight
package: dash_mantine_components
category: Typography
---

.. toc::

### Simple Example

Use Highlight component to highlight a substring in a given string with a mark tag.

Pass the main string as children to Highlight component and string part that should be highlighted to `highlight` prop. 
If the main string does not include `highlight` part, it will be ignored. 
`Highlight` ignores trailing whitespace and highlights all matched characters sequences.

.. exec::docs.highlight.simple

### Change highlight styles

.. exec::docs.highlight.styles

### Colors

You can customize the highlight color with the `color` prop from one of colors in Mantine's theme.

```python
import dash_mantine_components as dmc

component = dmc.Highlight(
    "Highlight this, definitely this and also this!",
    highlight="this",
    color="lime",
)
```

.. exec::docs.highlight.interactive
    :code: false

### Highlight Multiple Strings

To highlight multiple substrings, provide an array of values.

.. exec::docs.highlight.multiple

### Text Props

Highlight component supports same props as Text component.

.. exec::docs.highlight.text

### Styles API

| Name | Static selector         | Description  |
|:-----|:------------------------|:-------------|
| root | .mantine-Highlight-root | Root element |

### Keyword Arguments

#### Highlight

.. kwargs::Highlight



================================================
File: docs/highlight/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.Highlight(
    "Highlight this, definitely this and also this!", highlight="this"
)

configurator = Configurator(target)
configurator.add_colorpicker("color", "lime")

component = configurator.panel



================================================
File: docs/highlight/multiple.py
================================================
import dash_mantine_components as dmc

component = dmc.Highlight(
    "Highlight this, definitely this and also that!", highlight=["this", "that"]
)



================================================
File: docs/highlight/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Highlight(
    "Highlight this, definitely this and also this!", highlight="this"
)



================================================
File: docs/highlight/styles.py
================================================
import dash_mantine_components as dmc

component = dmc.Highlight(
    "You can change styles of highlighted part if you do not like default styles",
    ta="center",
    highlight=["highlighted", "default"],
    highlightStyles={
        "backgroundImage": "linear-gradient(45deg, var(--mantine-color-cyan-5), var(--mantine-color-indigo-5))",
        "fontWeight": 500,
        "WebkitBackgroundClip": "text",
        "WebkitTextFillColor": "transparent",
    },
)



================================================
File: docs/highlight/text.py
================================================
import dash_mantine_components as dmc

component = dmc.Highlight(
    "Highlight this, definitely this and also this!",
    highlight="this",
    size="lg",
    c="green",
    color="yellow",
    ta="center",
)



================================================
File: docs/hovercard/delay.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    [
        dmc.HoverCard(
            shadow="md",
            openDelay=1000,
            children=[
                dmc.HoverCardTarget(dmc.Button("1000ms open delay")),
                dmc.HoverCardDropdown(dmc.Text("Opened with 1000ms delay", size="sm")),
            ],
        ),
        dmc.HoverCard(
            shadow="md",
            closeDelay=1000,
            children=[
                dmc.HoverCardTarget(dmc.Button("1000ms close delay")),
                dmc.HoverCardDropdown(dmc.Text("Closed with 1000ms delay", size="sm")),
            ],
        ),
    ]
)



================================================
File: docs/hovercard/hovercard.md
================================================
---
name: HoverCard
description: Use HoverCard component to show more information in a popover.
endpoint: /components/hovercard
package: dash_mantine_components
category: Overlay
---

.. toc::

### Simple Example

.. exec::docs.hovercard.simple

### Delays

Set open and close delays in ms with `openDelay` and `closeDelay` properties.

.. exec::docs.hovercard.delay

### With Interactive elements

HoverCard is displayed only when mouse is over target element or dropdown, you can use anchors and buttons within dropdowns, using inputs is not recommended.

.. exec::docs.hovercard.interactive

### HoverCard Target

Any component you specify in dmc.HoverCardTarget is wrapped by a dmc.Box component under the hood. So adding a margin
to your target component will also move the dropdown away. In order to prevent this, add margin to the wrapper component
using the prop `boxWrapperProps` in dmc.HoverCardTarget.

### Styles API

| Name     | Static selector             | Description      |
|:---------|:----------------------------|:-----------------|
| dropdown | .mantine-HoverCard-dropdown | Dropdown element |
| arrow    | .mantine-HoverCard-arrow    | Dropdown arrow   |

### Keyword Arguments

#### HoverCard

.. kwargs::HoverCard

#### HoverCardDropdown

.. kwargs::HoverCardDropdown

#### HoverCardTarget

.. kwargs::HoverCardTarget



================================================
File: docs/hovercard/interactive.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = (
    dmc.HoverCard(
        shadow="md",
        children=[
            dmc.HoverCardTarget(
                dmc.Avatar(
                    src="https://avatars.githubusercontent.com/u/91216500?v=4",
                    radius="xl",
                )
            ),
            dmc.HoverCardDropdown(
                [
                    dmc.Button(
                        "Snehil Vijay", fullWidth=True, mb=15, variant="outline"
                    ),
                    dmc.Group(
                        [
                            dmc.Anchor(
                                DashIconify(icon="logos:linkedin-icon", width=30),
                                href="https://www.linkedin.com/in/snehilvj/",
                                target="_blank",
                            ),
                            dmc.Anchor(
                                DashIconify(icon="logos:github-octocat", width=30),
                                href="https://www.github.com/snehilvj/",
                                target="_blank",
                            ),
                            dmc.Anchor(
                                DashIconify(icon="logos:twitter", width=30),
                                href="https://twitter.com/snehilvj",
                                target="_blank",
                            ),
                        ],
                        p=0,
                    ),
                ]
            ),
        ],
    ),
)



================================================
File: docs/hovercard/simple.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input

component = dmc.HoverCard(
    withArrow=True,
    width=200,
    shadow="md",
    children=[
        dmc.HoverCardTarget(dmc.Button("Hover to reveal the card")),
        dmc.HoverCardDropdown(
            dmc.Text(
                "Hover card is revealed when user hovers over target element, it will be hidden once mouse is not over",
                size="sm",
            )
        ),
    ],
)



================================================
File: docs/image/background.py
================================================
import dash_mantine_components as dmc
from dash import html

component = html.Div(
    style={"width": 300},
    children=dmc.BackgroundImage(
        src="https://images.unsplash.com/photo-1419242902214-272b3f66ee7a?ixlib=rb-1.2.1&ixid"
        "=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80",
        children=[
            dmc.Center(
                p="md",
                children=[
                    dmc.Text(
                        "BackgroundImage component can be used to add any content on image. It is used for cards, "
                        "hero headers and similar components",
                        c="yellow",
                    )
                ],
            )
        ],
    ),
)



================================================
File: docs/image/height.py
================================================
import dash_mantine_components as dmc

component = dmc.Image(
    radius="md",
    h=200,
    src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-10.png",
)



================================================
File: docs/image/image.md
================================================
---
name: Image
description: DMC alternative for html.Img with placeholder for loading and error states.
endpoint: /components/image
package: dash_mantine_components
category: Data Display
---

.. toc::

### Simple Example

Image component is a wrapper around img element with option to change object fit, radius and placeholder and provide
caption.

.. exec::docs.image.simple

### Image height

In most case, you will need to set image height to prevent layout jumps when image is loading. You can do so with `h` [style](/style-props) props.

.. exec::docs.image.height

### Placeholder

Set `fallbackSrc` prop to display fallback image when image fails to load:

.. exec::docs.image.placeholder

### Background Image

Use BackgroundImage component when you need to display image below any content. Component sets background-image to 
given `src`, background-size to cover and background-position to center.

.. exec::docs.image.background

### Styles API

| Name         | Static selector          | Description                               |
|:-------------|:-------------------------|:------------------------------------------|
| root         | .mantine-Image-root      | Root element                              |

| Name         | Static selector          | Description                               |
|:-------------|:-------------------------|:------------------------------------------|
| root         | .mantine-Background-root | Root element                              |

### Keyword Arguments

#### Image

.. kwargs::Image

#### BackgroundImage

.. kwargs::BackgroundImage



================================================
File: docs/image/placeholder.py
================================================
import dash_mantine_components as dmc

component = dmc.Image(
    radius="md",
    src=None,
    h=200,
    fallbackSrc="https://placehold.co/600x400?text=Placeholder",
)



================================================
File: docs/image/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Image(
    radius="md",
    src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/images/bg-7.png",
)



================================================
File: docs/indicator/indicator.md
================================================
---
name: Indicator
description: Use Indicator to display element at the corner of another element
endpoint: /components/indicator
package: dash_mantine_components
category: Data Display
---

.. toc::

### Introduction

Use Indicator to display element at the corner of another element.

.. exec::docs.indicator.interactive
    :code: false

### Inline

When the target element has a fixed width, set `inline` prop to add `display: inline-block;` styles to Indicator container.
Alternatively, you can set width and height with `style` prop if you still want the root element to keep `display: block`.

.. exec::docs.indicator.inline

### Offset

Set `offset` to change indicator position. It is useful when Indicator component is used with children that have border-radius:

.. exec::docs.indicator.offset

### Processing Animation

.. exec::docs.indicator.processing

### Styles API

| Name      | Static selector              | Description       |
|:----------|:-----------------------------|:------------------|
| root      | .mantine-Indicator-root      | Root element      |
| indicator | .mantine-Indicator-indicator | Indicator element |

### Keyword Arguments

#### Indicator

.. kwargs::Indicator



================================================
File: docs/indicator/inline.py
================================================
import dash_mantine_components as dmc

component = dmc.Indicator(
    dmc.Avatar(
        size="lg",
        radius="sm",
        src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-2.png",
    ),
    inline=True,
    size=16,
    label="New",
)



================================================
File: docs/indicator/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "indicator-interactive"

target = dmc.Center(
    dmc.Indicator(
        dmc.Avatar(
            size="lg",
            radius="sm",
            src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-1.png",
        ),
        id=TARGET_ID,
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_colorpicker("color", "indigo")
configurator.add_select(
    "position",
    [
        "bottom-end",
        "bottom-start",
        "top-end",
        "top-start",
        "bottom-center",
        "top-center",
        "middle-center",
        "middle-end",
        "middle-start",
    ],
    "top-end",
)
configurator.add_number_input("size", 10)
configurator.add_slider("radius", "xl")
configurator.add_switch("processing", False)
configurator.add_switch("withBorder", False)
configurator.add_switch("disabled", False)

component = configurator.panel



================================================
File: docs/indicator/offset.py
================================================
import dash_mantine_components as dmc

component = dmc.Indicator(
    dmc.Avatar(
        size="lg",
        radius="xl",
        src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-3.png",
    ),
    inline=True,
    offset=7,
    position="bottom-end",
    color="red",
    withBorder=True,
    size=16,
)



================================================
File: docs/indicator/processing.py
================================================
import dash_mantine_components as dmc

component = dmc.Indicator(
    dmc.Avatar(
        size="lg",
        radius="sm",
        src="https://raw.githubusercontent.com/mantinedev/mantine/master/.demo/avatars/avatar-4.png",
    ),
    inline=True,
    color="red",
    size=12,
    processing=True,
)



================================================
File: docs/inputwrapper/inputwrapper.md
================================================
---
name: InputWrapper
description: Use InputWrapper to add label, description and error fields to custom inputs.
endpoint: /components/inputwrapper
package: dash_mantine_components
category: Inputs
---

.. toc::


The `InputWrapper` component is built into all Dash Mantine input components, such as `TextInput`, `NumberInput`,
`Select`, `Chip`, and `Textarea`(and more!) **You do not need to wrap these components with `InputWrapper` as it’s already included.**  

Use `InputWrapper` when working with input components from other libraries, like `dash-core-components`, to ensure 
consistent styling of input components in your app.  

### Usage


.. exec::docs.inputwrapper.interactive
    :code: false


### Custom TreeInput component

Here is an example of adding an `InputWapper` to the `Tree` component.

.. exec::docs.inputwrapper.simple

###  Avoid Unnecessary `InputWrapper` Usage  

Most Mantine input components already include the `InputWrapper` internally, so you **should not** wrap them with `InputWrapper` yourself.  

Instead, check the reference section for built-in props like `label`, `description`, and `error`, and use these props directly.

**✅ Correct Usage: Use Component Props**
```python
dmc.Select(
    label="My label",
    description="My description"
)
```  

**❌ Incorrect Usage: Avoid Wrapping with `InputWrapper`**
```python
# don't do this
dmc.InputWrapper(
    label="My label",
    description="My description",
    children=dmc.Select(...)  
)
```  

### Accessibility

Note that DMC input components with built-in `InputWrapper` are more accessible. For example, their labels
are properly linked to inputs, making them screen-reader friendly and allowing users to focus the input by clicking
the label. This behavior does not apply when manually using `InputWrapper`.

It's possible to use the [htmlFor](https://developer.mozilla.org/en-US/docs/Web/API/HTMLLabelElement/htmlFor) prop to
link the `InputWrapper` `label` prop to the input in the `children` prop .  However, it works only in certain components
that are accessible.  

```python
from dash import dcc
import dash_mantine_components as dmc
# this is accessible  (but better to use a dmc input component instead)
dmc.InputWrapper(
    label="my-input",
    htmlFor="dcc-input",
    children=dcc.Input(id="dcc-input")
)

# the dcc.Dropdown is not accessible
dmc.InputWrapper(
    label="my-input",
    htmlFor="dcc-dropdown",
    children=dcc.Dropdown(id="dcc-dropdown")
)


```


### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.


#### Input Selectors

| Selector  | Static selector            | Description                    |
|-----------|---------------------------|--------------------------------|
| wrapper   | .mantine-Input-wrapper     | Root element of the Input      |
| input     | .mantine-Input-input       | Input element                  |
| section   | .mantine-Input-section     | Left and right sections        |

#### Input CSS Variables

| Selector | Variable                              | Description |
|----------|--------------------------------------|-------------|
| wrapper  | --input-fz                           | Font size of the input element |
|          | --input-height                       | Height or min-height of the input element (depends on multiline prop) |
|          | --input-left-section-width           | Width of the left section |
|          | --input-right-section-width          | Width of the right section |
|          | --input-margin-bottom                | Margin-bottom of the input element, usually controlled by Input.Wrapper |
|          | --input-margin-top                   | Margin-top of the input element, usually controlled by Input.Wrapper |
|          | --input-padding-y                    | Padding-top and padding-bottom of the input element |
|          | --input-radius                       | Border-radius of the input element |
|          | --input-left-section-pointer-events  | Controls pointer-events of the left section |
|          | --input-right-section-pointer-events | Controls pointer-events of the right section |

#### Input Data Attributes

| Selector       | Attribute               | Condition                           | Value  |
|---------------|-------------------------|-------------------------------------|--------|
| wrapper, input | data-error              | error prop is set                  | –      |
| input         | data-disabled            | disabled prop is set               | –      |
| wrapper       | data-with-right-section  | rightSection prop is set           | –      |
| wrapper       | data-with-left-section   | leftSection prop is set            | –      |
| wrapper       | data-multiline           | multiline prop is set              | –      |
| wrapper       | data-pointer             | pointer prop is set                | –      |
| section       | data-position            | –                                   | Section position: left or right |

#### InputWrapper Selectors

| Selector  | Static selector               | Description                                         |
|-----------|--------------------------------|-----------------------------------------------------|
| root      | .mantine-InputWrapper-root     | Root element                                       |
| label     | .mantine-InputWrapper-label    | Label element                                      |
| required  | .mantine-InputWrapper-required | Required asterisk element, rendered inside label   |
| description | .mantine-InputWrapper-description | Description element                              |
| error     | .mantine-InputWrapper-error    | Error element                                      |

#### InputWrapper CSS Variables

| Selector    | Variable                   | Description                           |
|------------|----------------------------|---------------------------------------|
| label      | --input-label-size         | Controls label font-size              |
|            | --input-asterisk-color     | Controls label asterisk text color    |
| error      | --input-error-size         | Controls error font-size              |
| description | --input-description-size  | Controls description font-size        |


### Keyword Arguments

#### InputWrapper

.. kwargs::InputWrapper



================================================
File: docs/inputwrapper/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-input-wrapper"

target = dmc.Center(
    dmc.InputWrapper(
        label="Your label",
        description="Your description",
        error="Your error message",
        w=300,
        required=True,
        id=TARGET_ID,
    )
)

configurator = Configurator(target, TARGET_ID)

configurator.add_text_input("label", "Your label", placeholder="Label")
configurator.add_text_input("description", "Your description", placeholder="Description")
configurator.add_text_input("error", "Your error message", placeholder="Error")
configurator.add_switch("withAsterisk", True)
component = configurator.panel



================================================
File: docs/inputwrapper/simple.py
================================================
import dash_mantine_components as dmc

from dash import Input, Output, callback


component =  dmc.InputWrapper(
    id="tree-wrapper",
    label="Tree input",
    description="This is a tree input",
    inputWrapperOrder=["label", "description", "error", "input"],
    withAsterisk=True,
    children=[
        dmc.Tree(
            id="tree",
            checkboxes=True,
            data=[
                {
                    "label": "root",
                    "value": "value",
                    "children": [
                        {"label": "child 1", "value": "child_1"},
                        {"label": "child 2", "value": "child_2"},
                    ],
                }
            ],
        )
    ],
)

@callback(
    Output("tree-wrapper", "error"),
    Input("tree", "checked"),
)
def validate(checked):
    tree_error = "Select at least one" if not checked else None
    return tree_error




================================================
File: docs/jsoninput/jsoninput.md
================================================
---
name: JsonInput
description: JsonInput is based on Textarea component, it includes json validation logic and option to format input value on blur.
endpoint: /components/jsoninput
package: dash_mantine_components
category: Inputs
---

.. toc::

### Simple Example

JsonInput is based on [Textarea](/components/textarea) component, it includes json validation logic and option to format input value on blur.

.. exec::docs.jsoninput.simple

### Styles API

| Name        | Static selector                | Description                                      |
|:------------|:-------------------------------|:-------------------------------------------------|
| wrapper     | .mantine-JsonInput-wrapper     | Root element of the Input                        |
| input       | .mantine-JsonInput-input       | Input element                                    |
| section     | .mantine-JsonInput-section     | Left and right sections                          |
| root        | .mantine-JsonInput-root        | Root element                                     |
| label       | .mantine-JsonInput-label       | Label element                                    |
| required    | .mantine-JsonInput-required    | Required asterisk element, rendered inside label |
| description | .mantine-JsonInput-description | Description element                              |
| error       | .mantine-JsonInput-error       | Error element                                    |

### Keyword Arguments

#### JsonInput

.. kwargs::JsonInput



================================================
File: docs/jsoninput/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.JsonInput(
    label="Your package.json",
    placeholder="Textarea will autosize to fit the content",
    validationError="Invalid JSON",
    formatOnBlur=True,
    autosize=True,
    minRows=4,
)



================================================
File: docs/kbd/kbd.md
================================================
---
name: Kbd
description: Use Kbd to show keyboard shortcuts, etc.
endpoint: /components/kbd
package: dash_mantine_components
category: Data Display
---

.. toc::

### Simple Example

.. exec::docs.kbd.simple

### Styles API

| Name        | Static selector   | Description                                      |
|:------------|:------------------|:-------------------------------------------------|
| root        | .mantine-Kbd-root | Root element                                     |

### Keyword Arguments

#### Kbd

.. kwargs::Kbd



================================================
File: docs/kbd/simple.py
================================================
import dash_mantine_components as dmc
from dash import html

component = html.Div([dmc.Kbd("⌘"), " + ", dmc.Kbd("shift"), " + ", dmc.Kbd("M")])



================================================
File: docs/linechart/axislabels.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    xAxisLabel="Date",
    yAxisLabel="Amount",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/linechart/clickdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data

component = dmc.Group(
    [
        dmc.LineChart(
            id="figure-linechart",
            h=300,
            dataKey="date",
            data=data,
            withLegend=True,
            series=[
                {"name": "Apples", "color": "indigo.6"},
                {"name": "Oranges", "color": "blue.6"},
                {"name": "Tomatoes", "color": "teal.6"},
            ],
            activeDotProps={"r": 8, "strokeWidth": 1, "fill": "#fff"},
            strokeWidth=4
        ),
        dmc.Text(id="clickdata-linechart1"),
        dmc.Text(id="clickdata-linechart2"),
    ]
)



@callback(
    Output("clickdata-linechart1", "children"),
    Output("clickdata-linechart2", "children"),
    Input("figure-linechart", "clickData"),
    Input("figure-linechart", "clickSeriesName"),
)
def update(data, name):
    return f"clickData:  {data}", f"clickSeriesName: {name}"




================================================
File: docs/linechart/connectnulls.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator


data = [
    {"date": "Mar 22", "Apples": 110},
    {"date": "Mar 23", "Apples": 60},
    {"date": "Mar 24", "Apples": -80},
    {"date": "Mar 25", "Apples": 40},
    {"date": "Mar 26", "Apples": None},
    {"date": "Mar 27", "Apples": 80},
]

target = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    connectNulls=True,
    series=[{"name": "Apples", "color": "indigo.6"}],
    curveType="linear",
)

configurator = Configurator(target)

configurator.add_select(
    "curveType",
    ["Bump", "Linear", "Natural", "Monotone", "Step", "StepBefore", "StepAfter"],
    "Linear",
)
configurator.add_switch("connectNulls", True)

component = configurator.panel



================================================
File: docs/linechart/customizedots.py
================================================
import dash_mantine_components as dmc
from .data import data


component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    dotProps={"r": 6, "strokeWidth": 2, "stroke": "#fff"},
    activeDotProps={"r": 8, "strokeWidth": 1, "fill": "#fff"},
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/linechart/dashedarealine.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    strokeWidth=1,
    dotProps={"r": 2},
    activeDotProps={"r": 3, "strokeWidth": 1},
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6", "strokeDasharray": "5 5"},
    ],
)



================================================
File: docs/linechart/data.py
================================================
data = [
    {"date": "Mar 22", "Apples": 2890, "Oranges": 2338, "Tomatoes": 2452},
    {"date": "Mar 23", "Apples": 2756, "Oranges": 2103, "Tomatoes": 2402},
    {"date": "Mar 24", "Apples": 3322, "Oranges": 986, "Tomatoes": 1821},
    {"date": "Mar 25", "Apples": 3470, "Oranges": 2108, "Tomatoes": 2809},
    {"date": "Mar 26", "Apples": 3129, "Oranges": 1726, "Tomatoes": 2290},
]



================================================
File: docs/linechart/gradient.py
================================================
import dash_mantine_components as dmc


data = [
    {"date": "Jan", "temperature": -25},
    {"date": "Feb", "temperature": -10},
    {"date": "Mar", "temperature": 5},
    {"date": "Apr", "temperature": 15},
    {"date": "May", "temperature": 30},
    {"date": "Jun", "temperature": 15},
    {"date": "Jul", "temperature": 30},
    {"date": "Aug", "temperature": 40},
    {"date": "Sep", "temperature": 15},
    {"date": "Oct", "temperature": 20},
    {"date": "Nov", "temperature": 0},
    {"date": "Dec", "temperature": -10},
]

component = dmc.LineChart(
    h=300,
    data=data,
    series=[{"name": "temperature", "label": "Avg. Temperature"}],
    dataKey="date",
    type="gradient",
    gradientStops=[
        {"offset": 0, "color": "red.6"},
        {"offset": 20, "color": "orange.6"},
        {"offset": 40, "color": "yellow.5"},
        {"offset": 70, "color": "lime.5"},
        {"offset": 80, "color": "cyan.5"},
        {"offset": 100, "color": "blue.5"},
    ],
    strokeWidth=5,
    curveType="natural",
    yAxisProps={"domain": [-25, 40]},
    p="lg"
)



================================================
File: docs/linechart/grid-text-color-light-dark.py
================================================
import dash_mantine_components as dmc
from .data import data



component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    className="chart-grid-text-colors",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)




================================================
File: docs/linechart/highlighthover.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
    withLegend=True,
    highlightHover=True,
    withTooltip=False,
    strokeWidth=4
)



================================================
File: docs/linechart/hoverdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data

import dash_mantine_components as dmc
from .data import data

component = dmc.Group(
    [
        dmc.LineChart(
            id="figure-linechart-hover",
            h=300,
            dataKey="date",
            data=data,
            series=[
                {"name": "Apples", "color": "indigo.6"},
                {"name": "Oranges", "color": "blue.6"},
                {"name": "Tomatoes", "color": "teal.6"},
            ],
            activeDotProps={"r": 8, "strokeWidth": 1, "fill": "#fff"},
            strokeWidth=4
        ),
        dmc.Text(id="hoverdata-linechart1"),
        dmc.Text(id="hoverdata-linechart2"),
    ]
)


@callback(
    Output("hoverdata-linechart1", "children"),
    Output("hoverdata-linechart2", "children"),
    Input("figure-linechart-hover", "hoverData"),
    Input("figure-linechart-hover", "hoverSeriesName"),
)
def update(data, name):
    return f"hoverData:  {data}", f"hoverSeriesName: {name}"




================================================
File: docs/linechart/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

data = [
    {
        "date": "Mar 22",
        "Apples": 2890,
        "Oranges": 2338,
        "Tomatoes": 2452,
    },
    {
        "date": "Mar 23",
        "Apples": 2756,
        "Oranges": 2103,
        "Tomatoes": 2402,
    },
    {
        "date": "Mar 24",
        "Apples": 3322,
        "Oranges": 986,
        "Tomatoes": 1821,
    },
    {
        "date": "Mar 25",
        "Apples": 3470,
        "Oranges": 2108,
        "Tomatoes": 2809,
    },
    {
        "date": "Mar 26",
        "Apples": 3129,
        "Oranges": 1726,
        "Tomatoes": 2290,
    },
]

target = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
    curveType="linear",
)

configurator = Configurator(target)

configurator.add_select(
    "curveType",
    ["Bump", "Linear", "Natural", "Monotone", "Step", "StepBefore", "StepAfter"],
    "Linear",
)

configurator.add_segmented_control("tickLine", ["x", "y", "xy", "none"], "y")
configurator.add_segmented_control("gridAxis", ["x", "y", "xy", "none"], "x")
configurator.add_switch("withXAxis", True)
configurator.add_switch("withYAxis", True)
configurator.add_switch("withDots", True)


component = configurator.panel



================================================
File: docs/linechart/legend.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    withLegend=True,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/linechart/legendposition.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    withLegend=True,
    legendProps={"verticalAlign": "bottom", "height": 50},
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/linechart/line-color-light-dark.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    series=[{"name": "Apples", "color": "var(--chart-color)"}],
)



================================================
File: docs/linechart/line.md
================================================
---
name: LineChart
description: Line chart component
endpoint: /components/linechart
package: dash_mantine_components
category: Charts
---

.. toc::

### Introduction

.. exec::docs.linechart.interactive
    :code: false


```python
import dash_mantine_components as dmc
from .data import data

dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    series = [
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"}
    ],
    curveType="linear",
    tickLine="xy",
    withXAxis=False,
    withDots=False,
)
```


### Data
Here is the data imported for the examples on this page:

```python

data = [
  {"date": "Mar 22", "Apples": 2890, "Oranges": 2338, "Tomatoes": 2452},
  {"date": "Mar 23", "Apples": 2756, "Oranges": 2103, "Tomatoes": 2402},
  {"date": "Mar 24", "Apples": 3322, "Oranges": 986, "Tomatoes": 1821},
  {"date": "Mar 25", "Apples": 3470, "Oranges": 2108, "Tomatoes": 2809},
  {"date": "Mar 26", "Apples": 3129, "Oranges": 1726, "Tomatoes": 2290}
]
```

### Gradient type
Set `type="gradient"` to render a line chart with gradient fill. To customize gradient colors, use `gradientStops` prop.
It accepts an array of objects with `offset` and `color` properties. `offset` is a number between 0 and 100 that defines
the position of the color in the gradient, `color` is a reference to `theme.colors` or any valid CSS color.

.. exec::docs.linechart.gradient

### Legend
To display chart legend, set `withLegend` prop. When one of the items in the legend is hovered, the corresponding data
series is highlighted in the chart.

.. exec::docs.linechart.legend

### Legend position
You can pass props down to recharts Legend component with `legendProps` prop. For example, setting the following will
render the legend at the bottom of the chart and set its height to 50px:
```python
legendProps={'verticalAlign': 'bottom', 'height': 50} 
```

.. exec::docs.linechart.legendposition

### Series labels
By default, series `name` is used as a label. To change it, set `label` property in `series` object:


.. exec::docs.linechart.serieslabels

### Connect nulls
Use `connectNulls` prop to specify whether to connect a data point across null points. By default, `connectNulls` is true.


.. exec::docs.linechart.connectnulls
    :code: false

```python
import dash_mantine_components as dmc

data = [
  {"date": "Mar 22", "Apples": 110},
  {"date": "Mar 23", "Apples": 60},
  {"date": "Mar 24", "Apples": -80},
  {"date": "Mar 25", "Apples": 40},
  {"date": "Mar 26", "Apples": None},
  {"date": "Mar 27", "Apples": 80}
]

dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    connectNulls=True,
    series=[{"name": "Apples", "color": "indigo.6"}],
    curveType="linear",
)

```

### X and Y axis props
Use `xAxisProps` and `yAxisProps` to pass props down to recharts `XAxis` and `YAxis` components. For example, these props can
be used to change orientation of axis:

.. exec::docs.linechart.xyaxis

### Axis labels
Use `xAxisLabel` and `yAxisLabel` props to display axis labels:

.. exec::docs.linechart.axislabels

### X axis offset
Use xAxisProps to set padding between the charts ends and the x-axis:

.. exec::docs.linechart.xaxisoffset

### Y axis scale
Use `yAxisProps` to change domain of the Y axis. For example, if you know that your data will always be in the range
of 0 to 100, you can set domain to `[0, 100]`:

.. exec::docs.linechart.yaxisscale

### Right Y axis
To display additional Y axis on the right side of the chart, set `withRightYAxis` prop. You can pass props down to
recharts `YAxis` component with `rightYAxisProps` prop and assign a label to the right Y axis with `rightYAxisLabel` prop.
Note that you need to bind data series to the right Y axis by setting `yAxisId` in the series object.


.. exec::docs.linechart.rightyaxis

### Rotate x-axis labels
To rotate x-axis labels, set `xAxisProps.angle` to a number of degrees to rotate:

.. exec::docs.linechart.rotatexaxislabels

### Line color
You can reference colors from theme the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. 
Any valid CSS color value is also accepted.


.. exec::docs.linechart.linecolor

### Change line color depending on color scheme
You can use CSS variables in color property. Learn more in the Theming section under [Colors.](/colors#colors-in-light-and-dark-mode)

Example of line color that is dark orange in light mode and lime in dark mode:


.. exec::docs.linechart.line-color-light-dark
    :code: false


.. sourcetabs::docs/linechart/line-color-light-dark.py, assets/examples/chart-color.css
    :defaultExpanded: true
    :withExpandedButton: true



### Stroke dash array
Set `strokeDasharray` prop to control the stroke dash array of the grid and cursor lines. The value represent the
lengths of alternating dashes and gaps. For example, strokeDasharray="10 5" will render a dashed line with 10px dashes
and 5px gaps.


.. exec::docs.linechart.strokedasharray



### Grid and text colors
Use `--chart-grid-color` and `--chart-text-color` to change colors of grid lines and text within the chart. 
With CSS , you can change colors depending on color scheme.  Learn more in the Theming section under [Colors.](/colors#colors-in-light-and-dark-mode)



.. exec::docs.linechart.grid-text-color-light-dark
    :code: false


.. sourcetabs::docs/linechart/grid-text-color-light-dark.py, assets/examples/chart-grid-text-colors.css
    :defaultExpanded: true
    :withExpandedButton: true

If your application has only one color scheme, you can use `gridColor` and `textColor` props instead of CSS variables:

```python
dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    gridColor="gray.5",
    textColor = "gray.9",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)

```

### Tooltip animation
By default, tooltip animation is disabled. To enable it, set `tooltipAnimationDuration` prop to a number of
milliseconds to animate the tooltip position change.

.. exec::docs.linechart.tooltipanimation

### Line animation
By default, the Recharts data animation is disabled. To enable and customize the animation, use `lineProps` to pass properties to the Recharts `Line` component.

.. exec::docs.linechart.line_animation

### Units
Set `unit` prop to render a unit label next to the y-axis ticks and tooltip values:

.. exec::docs.linechart.units

### Remove tooltip
To remove tooltip, set `withTooltip=False`. It also removes the cursor line and disables interactions with the chart.


.. exec::docs.linechart.removetooltip

### Customize dots
Use `dotProps` to pass props down to recharts dot in regular state and `activeDotProps` to pass props down to recharts dot in active state (when cursor is over the current series).

.. exec::docs.linechart.customizedots

### Stroke width
Use `strokeWidth` prop to control the stroke width of all areas:

.. exec::docs.linechart.strokewidth
    :code: false

```python
import dash_mantine_components as dmc
from .data import data

dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"}
    ],
    strokeWidth=2,
)

```

### Sync multiple LineCharts
You can pass props down to recharts LineChart component with `lineChartProps` prop. For example, setting the following 
will sync tooltip of multiple `LineChart` components with the same `syncId` prop.

```python
lineChartProps={"syncId": "any-id"}
```
.. exec::docs.linechart.sync

### Vertical orientation
Set orientation="vertical" to render a vertical area chart:


.. exec::docs.linechart.vertical

### Dashed area line
Set `strokeDasharray` property in series to change line style to dashed:

.. exec::docs.linechart.dashedarealine

### Reference lines
Use `referenceLines` prop to render reference lines. Reference lines are always rendered behind the chart.

.. exec::docs.linechart.referencelines


### clickData
Use the `clickData` property in a callback to retrieve data from the most recent click event.
To get the name of the clicked series, use the `clickSeriesName` property.

Note: To enable `clickSeriesName` when clicking on the dots,  set `withTooltip=True`.

.. exec::docs.linechart.clickdata


### hoverData
Use the `hoverData` property in a callback to retrieve data from the most recent hover event.
To get the name of the hovered series, use the `hoverSeriesName` property.

Note: To enable `hoverSeriesName` when hovering on the dots,  set `withTooltip=True`.

.. exec::docs.linechart.hoverdata

### highlightHover

Set `highlightHover=True` to highlight the series when hovered, mirroring the behavior of hovering over chart legend items.

.. exec::docs.linechart.highlighthover


### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### LineChart selectors

| Selector         | Static selector                    | Description                                      |
|:-----------------|:----------------------------------|:-------------------------------------------------|
| root             | .mantine-LineChart-root           | Root element                                    |
| line             | .mantine-LineChart-line           | Line of the chart                               |
| axis             | .mantine-LineChart-axis           | X and Y axis of the chart                       |
| container        | .mantine-LineChart-container      | Recharts ResponsiveContainer component          |
| grid             | .mantine-LineChart-grid           | Recharts CartesianGrid component                |
| legend           | .mantine-LineChart-legend         | Legend root element                             |
| legendItem       | .mantine-LineChart-legendItem     | Legend item representing data series            |
| legendItemColor  | .mantine-LineChart-legendItemColor| Legend item color                               |
| legendItemName   | .mantine-LineChart-legendItemName | Legend item name                                |
| tooltip          | .mantine-LineChart-tooltip        | Tooltip root element                            |
| tooltipBody      | .mantine-LineChart-tooltipBody    | Tooltip wrapper around all items                |
| tooltipItem      | .mantine-LineChart-tooltipItem    | Tooltip item representing data series           |
| tooltipItemBody  | .mantine-LineChart-tooltipItemBody| Tooltip item wrapper around item color and name|
| tooltipItemColor | .mantine-LineChart-tooltipItemColor| Tooltip item color                             |
| tooltipItemName  | .mantine-LineChart-tooltipItemName | Tooltip item name                              |
| tooltipItemData  | .mantine-LineChart-tooltipItemData | Tooltip item data                              |
| tooltipLabel     | .mantine-LineChart-tooltipLabel   | Label of the tooltip                            |
| referenceLine    | .mantine-LineChart-referenceLine  | Reference line                                  |
| axisLabel        | .mantine-LineChart-axisLabel      | X and Y axis labels                             |


#### LineChart CSS variables

| Selector         | Variable             | Description                                      |
|:-----------------|:---------------------|:-------------------------------------------------|
| root             | --chart-grid-color   | Controls color of the grid and cursor lines      |
|                  | --chart-text-color   | Controls color of the axis labels                |


### Keyword Arguments

#### LineChart

.. kwargs::LineChart



================================================
File: docs/linechart/line_animation.py
================================================
from random import randint
import dash_mantine_components as dmc
from dash import callback, Input, Output

component = dmc.Box(
    [
        dmc.Button("Update Chart", id="btn-linechart-animation"),
        dmc.LineChart(
            id="linechart-animation",
            h=300,
            dataKey="date",
            data=[{}],
            tooltipAnimationDuration=500,
            lineProps={
                "isAnimationActive": True,
                "animationDuration": 500,
                "animationEasing": "ease-in-out",
                "animationBegin": 500,
            },
            series=[
                {"name": "Apples", "color": "indigo.6"},
                {"name": "Oranges", "color": "blue.6"},
                {"name": "Tomatoes", "color": "teal.6"},
            ],
        ),
    ]
)


@callback(
    Output("linechart-animation", "data"), Input("btn-linechart-animation", "n_clicks")
)
def update(n):
    return [
        {
            "date": "Mar 22",
            "Apples": 2890,
            "Oranges": 2338,
            "Tomatoes": randint(1000, 4000),
        },
        {
            "date": "Mar 23",
            "Apples": 2756,
            "Oranges": 2103,
            "Tomatoes": randint(1000, 4000),
        },
        {
            "date": "Mar 24",
            "Apples": 3322,
            "Oranges": 986,
            "Tomatoes": randint(1000, 4000),
        },
        {
            "date": "Mar 25",
            "Apples": 3470,
            "Oranges": 2108,
            "Tomatoes": randint(1000, 4000),
        },
        {
            "date": "Mar 26",
            "Apples": 3129,
            "Oranges": 1726,
            "Tomatoes": randint(1000, 4000),
        },
    ]



================================================
File: docs/linechart/linecolor.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    series=[{"name": "Apples", "color": "orange.7"}],
)



================================================
File: docs/linechart/referencelines.py
================================================
import dash_mantine_components as dmc

data = [
    {"date": "Mar 22", "Apples": 50},
    {"date": "Mar 23", "Apples": 60},
    {"date": "Mar 24", "Apples": 40},
    {"date": "Mar 25", "Apples": 30},
    {"date": "Mar 26", "Apples": 0},
    {"date": "Mar 27", "Apples": 20},
    {"date": "Mar 28", "Apples": 20},
    {"date": "Mar 29", "Apples": 10},
]


component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    yAxisProps={"domain": [0, 100]},
    referenceLines=[
        {"y": 40, "label": "Average sales", "color": "red.6"},
        {"x": "Mar 25", "label": "Report out"},
    ],
    series=[{"name": "Apples", "color": "indigo.6"}],
)



================================================
File: docs/linechart/removetooltip.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    withTooltip=False,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/linechart/rightyaxis.py
================================================
import dash_mantine_components as dmc

data = biaxial_data = [
    {"name": "Page A", "uv": 4000, "pv": 2400},
    {"name": "Page B", "uv": 3000, "pv": 1398},
    {"name": "Page C", "uv": 2000, "pv": 9800},
    {"name": "Page D", "uv": 2780, "pv": 3908},
    {"name": "Page E", "uv": 1890, "pv": 4800},
    {"name": "Page F", "uv": 2390, "pv": 3800},
    {"name": "Page G", "uv": 3490, "pv": 4300},
]

component = dmc.LineChart(
    h=300,
    data=data,
    dataKey="name",
    withRightYAxis=True,
    yAxisLabel="uv",
    rightYAxisLabel="pv",
    series=[
        {"name": "uv", "color": "pink.6"},
        {"name": "pv", "color": "cyan.6", "yAxisId": "right"},
    ],
)



================================================
File: docs/linechart/rotatexaxislabels.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    tickLine="xy",
    xAxisProps={"angle": -20},
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/linechart/serieslabels.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    withLegend=True,
    legendProps={"verticalAlign": "bottom"},
    series=[
        {"name": "Apples", "label": "Apples sales", "color": "indigo.6"},
        {"name": "Oranges", "label": "Oranges sales", "color": "blue.6"},
        {"name": "Tomatoes", "label": "Tomatoes sales", "color": "teal.6"},
    ],
)



================================================
File: docs/linechart/strokedasharray.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    strokeDasharray="15 15",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/linechart/strokewidth.py
================================================
import dash_mantine_components as dmc
from .data import data
from lib.configurator import Configurator

target = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
    strokeWidth=2,
)

configurator = Configurator(target)

configurator.add_number_slider("strokeWidth", 2, min=0.5, max=5)

component = configurator.panel



================================================
File: docs/linechart/sync.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.Stack(
    [
        dmc.Text("Apples sales:"),
        dmc.LineChart(
            h=180,
            dataKey="date",
            data=data,
            series=[{"name": "Apples", "color": "indigo.6"}],
            lineChartProps={"syncId": "groceries"},
        ),
        dmc.Text("Tomatoes sales"),
        dmc.LineChart(
            h=180,
            dataKey="date",
            data=data,
            series=[{"name": "Tomatoes", "color": "teal.6"}],
            lineChartProps={"syncId": "groceries"},
        ),
    ]
)



================================================
File: docs/linechart/tooltipanimation.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    tooltipAnimationDuration=200,
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/linechart/units.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    unit="$",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/linechart/vertical.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    orientation="vertical",
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/linechart/xaxisoffset.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    xAxisProps={"padding": {"left": 30, "right": 30}},
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/linechart/xyaxis.py
================================================
import dash_mantine_components as dmc
from .data import data


component = dmc.LineChart(
    h=300,
    dataKey="date",
    data=data,
    tickLine="xy",
    yAxisProps={"tickMargin": 15, "orientation": "right"},
    xAxisProps={"tickMargin": 15, "orientation": "top"},
    series=[
        {"name": "Apples", "color": "indigo.6"},
        {"name": "Oranges", "color": "blue.6"},
        {"name": "Tomatoes", "color": "teal.6"},
    ],
)



================================================
File: docs/linechart/yaxisscale.py
================================================
import dash_mantine_components as dmc

data = [
    {"date": "Mar 22", "Apples": 50},
    {"date": "Mar 23", "Apples": 60},
    {"date": "Mar 24", "Apples": 40},
    {"date": "Mar 25", "Apples": 30},
    {"date": "Mar 26", "Apples": 0},
    {"date": "Mar 27", "Apples": 20},
    {"date": "Mar 28", "Apples": 20},
    {"date": "Mar 29", "Apples": 10},
]

component = dmc.LineChart(
    h=300,
    dataKey="date",
    yAxisProps={"domain": [0, 100]},
    data=data,
    connectNulls=True,
    series=[{"name": "Apples", "color": "indigo.6"}],
)



================================================
File: docs/list/icons.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.List(
    icon=dmc.ThemeIcon(
        DashIconify(icon="radix-icons:check-circled", width=16),
        radius="xl",
        color="teal",
        size=24,
    ),
    size="sm",
    spacing="sm",
    children=[
        dmc.ListItem("Join our Discord Community."),
        dmc.ListItem("Install python virtual environment."),
        dmc.ListItem(
            dmc.Text(["Install npm dependencies with ", dmc.Code("npm install")])
        ),
        dmc.ListItem(
            dmc.Text(["Add your new component in ", dmc.Code("src/lib/components.")])
        ),
        dmc.ListItem(
            "Raise a PR, including an example to reproduce the changes contributed by the PR.",
            icon=dmc.ThemeIcon(
                DashIconify(icon="radix-icons:pie-chart", width=16),
                radius="xl",
                color="blue",
                size=24,
            ),
        ),
    ],
)



================================================
File: docs/list/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.List(
    [
        dmc.ListItem("Join our Discord Community."),
        dmc.ListItem("Install python virtual environment."),
        dmc.ListItem(
            dmc.Text(["Install npm dependencies with ", dmc.Code("npm install")])
        ),
        dmc.ListItem(
            dmc.Text(["Add your new component in ", dmc.Code("src/lib/components.")])
        ),
        dmc.ListItem(
            "Raise a PR, including an example to reproduce the changes contributed by the PR."
        ),
    ],
    type="unordered",
)

configurator = Configurator(target)
configurator.add_segmented_control("type", ["unordered", "ordered"], "unordered")
configurator.add_slider("size", "md")
configurator.add_switch("withPadding", False)

component = configurator.panel



================================================
File: docs/list/list.md
================================================
---
name: List
description: Use List component to show ordered and unordered lists with icon support.
endpoint: /components/list
package: dash_mantine_components
category: Typography
---

.. toc::

### Simple Example

.. exec::docs.list.simple

### Interactive Demo

.. exec::docs.list.interactive
    :code: false

### With Icons

.. exec::docs.list.icons

### Nested Lists

.. exec::docs.list.nested

### Styles API

| Name        | Static selector           | Description                                           |
|:------------|:--------------------------|:------------------------------------------------------|
| root        | .mantine-List-root        | Root element                                          |
| item        | .mantine-List-item        | ListItem root element                                 |
| itemIcon    | .mantine-List-itemIcon    | ListItem icon                                         |
| itemLabel   | .mantine-List-itemLabel   | ListItem content                                      |
| itemWrapper | .mantine-List-itemWrapper | ListItem wrapper element, container, icon and content |

### Keyword Arguments

#### List

.. kwargs::List

#### ListItem

.. kwargs::ListItem



================================================
File: docs/list/nested.py
================================================
import dash_mantine_components as dmc

component = dmc.List(
    [
        dmc.ListItem("First order item"),
        dmc.ListItem("First order item"),
        dmc.ListItem(
            [
                "First order item with list",
                dmc.List(
                    withPadding=True,
                    listStyleType="disc",
                    children=[
                        dmc.ListItem("Nested Item"),
                        dmc.ListItem("Nested Item"),
                        dmc.ListItem(
                            [
                                "Nested item with list",
                                dmc.List(
                                    withPadding=True,
                                    listStyleType="disc",
                                    children=[
                                        dmc.ListItem("Even more nested"),
                                        dmc.ListItem("Even more nested"),
                                    ],
                                ),
                            ]
                        ),
                        dmc.ListItem("Nested Item"),
                    ],
                ),
            ]
        ),
        dmc.ListItem("First order item"),
    ]
)



================================================
File: docs/list/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.List(
    [
        dmc.ListItem(
            dmc.Text(
                [
                    "Join our ",
                    dmc.Anchor(
                        "Discord", href="https://discord.gg/KuJkh4Pyq5", underline=False
                    ),
                    " Community.",
                ]
            )
        ),
        dmc.ListItem("Install python virtual environment."),
    ]
)



================================================
File: docs/loader/button.py
================================================
import time

import dash_mantine_components as dmc
from dash import html, Input, Output, callback

component = html.Div([
    dmc.Button("Compute", id="load-btn", loaderProps={"type": "dots"} ),
    dmc.Text(id="load-output"),
])


@callback(
    Output("load-output", "children"),
    Input("load-btn", "n_clicks"),
    running=[(Output("load-btn", "loading"), True, False)],
)
def long_compute(n):
    time.sleep(2)
    return "Done " + str(time.time())



================================================
File: docs/loader/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-loader"

target = dmc.Center(dmc.Loader(id=TARGET_ID))

configurator = Configurator(target, TARGET_ID)

configurator.add_colorpicker("color", "red")
configurator.add_slider("size", "md")
configurator.add_segmented_control("type", ["oval", "bars", "dots"], "oval")

component = configurator.panel



================================================
File: docs/loader/loader.md
================================================
---
name: Loader
description: Use Loader component to show loading state to the user.
endpoint: /components/loader
package: dash_mantine_components
category: Feedback
---

.. toc::

### Introduction

.. exec::docs.loader.interactive
    :code: false

### Simple Usage
Loader component supports 3 types of loaders: `oval`, `bars` and `dots` by default. All loaders are animated with CSS for better performance.

By default, Loader will be rendered with theme.primaryColor. A Loader can be customized with `color`, `size`, and
`variant` props.

.. exec::docs.loader.simple

### Button Example
In this example, the loader is shown while the callback is running.   Note that the button is disabled automatically when `loading=True`
See more examples in the Button section.

This examples uses the [running](https://dash.plotly.com/advanced-callbacks#updating-component-properties-when-a-callback-is-running)
argument in a callback and requires dash>=2.16.


.. exec::docs.loader.button

### children prop

`Loader` supports children prop. If you pass anything to children, it will be rendered instead of the loader. This is 
useful when you want to control Loader representation in components that use loaderProps, for example `Button` or `LoadingOverlay`.

See an example in the [Loading Overlay](/components/loadingoverlay) section,


### Styles API


This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.


#### Loader selectors

| Name        | Static selector      | Description                                      |
|:------------|:---------------------|:-------------------------------------------------|
| root        | .mantine-Loader-root | Root element                                     |


#### Loader CSS Variables

| Selector | Variable         | Description                                                         |
|----------|------------------|---------------------------------------------------------------------|
| root     | --loader-size    | Controls loader size (usually width and height, in some cases only width) |
|          | --loader-color   | Controls loader color                                              |


### Keyword Arguments

#### Loader

.. kwargs::Loader



================================================
File: docs/loader/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Loader(color="red", size="md", variant="oval")



================================================
File: docs/loadingoverlay/customimageoverlay.py
================================================
import dash_mantine_components as dmc
import random

# Generate random data for the BarChart
data = [
    {
        "month": month,
        "Smartphones": random.randint(50, 300),
        "Laptops": random.randint(30, 200),
        "Tablets": random.randint(20, 150),
    }
    for month in ["January", "February", "March", "April", "May", "June"]
]

component = dmc.Box(
    children=[
        dmc.Stack(
            pos="relative",
            p=10,
            children=[
                dmc.LoadingOverlay(
                    visible=True,
                    id="custom-loading-overlay",
                    zIndex=10,
                    loaderProps={
                        "variant": "custom",
                        "children": dmc.Image(
                            h=150,
                            radius="md",
                            src="/assets/custom_loadingoverlay.gif",
                        ),
                    },
                    overlayProps={"radius": "sm", "blur": 2},
                ),
                dmc.BarChart(
                    h=300,
                    dataKey="month",
                    data=data,
                    type="stacked",
                    series=[
                        {"name": "Smartphones", "color": "violet.6"},
                        {"name": "Laptops", "color": "blue.6"},
                        {"name": "Tablets", "color": "teal.6"},
                    ],
                ),
            ],
        ),
    ]
)



================================================
File: docs/loadingoverlay/customize.py
================================================
import dash_mantine_components as dmc

component = dmc.Box(
    [
        dmc.LoadingOverlay(
            loaderProps={"type": "bars", "color": "red", "size": "lg"},
            overlayProps={"radius": "sm", "blur": 2},
            visible=True,
            zIndex=10,
        ),
        dmc.BackgroundImage(
            dmc.Box(h=200, w=100),
            src="https://images.unsplash.com/photo-1419242902214-272b3f66ee7a?ixlib=rb-1.2.1&ixid"
            "=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=720&q=80",
        ),
    ],
    pos="relative",
)



================================================
File: docs/loadingoverlay/loadingoverlay.md
================================================
---
name: LoadingOverlay
description: Use LoadingOverlay component to disable user interactions and indicate loading state.
endpoint: /components/loadingoverlay
package: dash_mantine_components
category: Feedback
---

.. toc::

### Simple Usage

`LoadingOverlay` renders an overlay with a loader over the parent element with relative position.
It is usually used to indicate loading state of forms.

`LoadingOverlay` rendering is controlled by `visible` prop:

.. exec::docs.loadingoverlay.simple

### Loader Props

.. exec::docs.loadingoverlay.customize

### Custom LoadingOverlay

`loaderProps` (dict) - Supports a key of "variant" with values of oval, bars, dots or custom as in this example, also custom supports a children key as in this dmc.Image with a custom .gif loading screen.

.. exec::docs.loadingoverlay.customimageoverlay

### Styles API

| Name    | Static selector                 | Description         |
|:--------|:--------------------------------|:--------------------|
| root    | .mantine-LoadingOverlay-root    | Root element        |
| overlay | .mantine-LoadingOverlay-overlay | `Overlay` component |
| loader  | .mantine-LoadingOverlay-loader  | `Loader` component  |

### Keyword Arguments

#### LoadingOverlay

.. kwargs::LoadingOverlay





================================================
File: docs/loadingoverlay/simple.py
================================================
import time

import dash_mantine_components as dmc
from dash import Output, Input, no_update, callback, clientside_callback
from dash_iconify import DashIconify

component = dmc.Box(
    children=[
        dmc.Stack(
            pos="relative",
            p=5,
            w=300,
            children=[
                dmc.LoadingOverlay(
                    visible=False,
                    id="loading-overlay",
                    overlayProps={"radius": "sm", "blur": 2},
                    zIndex=10,
                ),
                dmc.TextInput(
                    label="Username",
                    placeholder="Your username",
                    leftSection=DashIconify(icon="radix-icons:person"),
                    id="dummy-text-box",
                ),
                dmc.TextInput(
                    label="Password",
                    placeholder="Your password",
                    leftSection=DashIconify(icon="radix-icons:lock-closed"),
                ),
                dmc.Checkbox(
                    label="Remember me",
                    checked=True,
                ),
                dmc.Button(
                    "Login", id="load-button", variant="outline", fullWidth=True
                ),
            ],
        ),
    ]
)

clientside_callback(
    """
    function updateLoadingState(n_clicks) {
        return true
    }
    """,
    Output("loading-overlay", "visible", allow_duplicate=True),
    Input("load-button", "n_clicks"),
    prevent_initial_call=True,
)


@callback(
    Output("dummy-text-box", "children"),
    Output("loading-overlay", "visible"),
    Input("load-button", "n_clicks"),
    prevent_initial_call=True,
)
def update(n_clicks):
    time.sleep(3)
    return no_update, False



================================================
File: docs/mantine-api/colorswatch.py
================================================
import dash_mantine_components as dmc

colors = dmc.DEFAULT_THEME["colors"]
color_picker_value_mapping = {color: codes[6] for color, codes in colors.items()}
theme_name_mapping = {codes[6]: color for color, codes in colors.items()}
radius_name_mapping = {1: "xs", 2: "sm", 3: "md", 4: "lg", 5: "xl"}

component= dmc.SimpleGrid([
    dmc.Card([
        dmc.Box(h=100, w=100, bg=f"blue.{i}" ),
        dmc.Text(f"blue {i}", size="sm"),
        dmc.Text(f"{colors['blue'][i]}", size="sm", c="dimmed")
    ]) for i in range(10)

], cols={ "base": 5,  "lg": 10 }, spacing="xs")




================================================
File: docs/mantine-api/mantine.md
================================================
---
name: Mantine API Overview
endpoint: /mantine-api
head:  A guide to help you get familiar with core Mantine concepts.
description:  A guide to help you get familiar with core Mantine concepts.
dmc: false
---

.. toc::

### Styling: Dash Mantine vs. Other Libraries

Dash components typically provide `style` and `className` props for styling, and Dash Mantine Components (DMC) also 
supports these props in the same way as other libraries. For example:

#### style prop
You can use the `style` prop to define inline styles:
```python
dmc.Card(style={"backgroundColor": "blue", "color": "white"})
```

#### className prop
You can define custom CSS classes in a `.css` file located in the `/assets` folder. These can then be referenced 
using the `className` prop:

```python
dmc.Card(className="header-style")
```

```css
.header-style {
    background-color: blue;
    color: white;
}
```

Dash Mantine Components go beyond traditional Dash styling by offering additional tools for customization using 
[style props](/style-props) and the [Styles API](/styles-api).

#### Style Props
DMC includes [Style Props](/style-props), which let you set individual CSS variables directly via component props. For example, you
can set the background color with the `bg` prop and  text color with the `c` prop:
```python
dmc.Card(bg="blue", c="white")
```


#### styles and classNames props
DMC also supports the [Styles API](/styles-api), enabling deep customization of inner elements through `styles` and `classNames`
props. Note: These props are different from `style` and `className`:
- `styles`: Inline styles for specific elements inside a component.
- `classNames`: Custom class names for specific elements inside a component.


### MantineProvider

Your `app.layout` must be wrapped with a single `MantineProvider`. Only one `MantineProvider` should be used in an app. 
It is responsible for:  

1. Controls the overall theme of the app (for example, colors, spacing, fonts).  
2. Manages light or dark mode.
3. Adding CSS variables to the document


```python
import dash_mantine_components as dmc
from dash import Dash, _dash_renderer
_dash_renderer._set_react_version("18.2.0")

app = Dash(external_stylesheets=dmc.styles.ALL)

app.layout = dmc.MantineProvider(
    # children=[] your layout here
)

if __name__ == "__main__":
    app.run(debug=True)

```

### Theme object
The `theme` object is a  dictionary that stores design tokens, components default props, context styles and other data
that can be accessed by any Mantine component. Most of the theme values are exposed as CSS variables and can be accessed
both in component props and CSS.

To customize the theme, pass a theme dictionary to the `theme` prop of the `MantineProvider` component. The provided
theme will be deeply merged with Mantine's [default theme](/theme-object#default-theme).

```python
# Your theme configuration is merged with default theme
theme = {
    "fontFamily": "Montserrat, sans-serif",
    "defaultRadius": "md",    
}

app.layout = dmc.MantineProvider(
    # children=[] your layout here
    theme=theme
)
```



Accessing theme values in a .css file in the /assets folder:

```css
.demo {
  background: var(--mantine-color-red-1);
  color: var(--mantine-color-red-9);
  font-family: var(--mantine-font-family);
  border-radius: var(--mantine-radius-md);
}
```

Accessing CSS variables in the `style` or `styles` prop in a component

```python
dmc.Card(style={"backgroundColor":"var(--mantine-color-red-1)"})
```



### Colors

Colors are stored in `theme['colors']` dict and are exposed as CSS variables. Each color must have at least 10 shades.
You can generate new colors based on a single color value with the [Mantine colors generator](https://mantine.dev/colors-generator/).

Colors are numbered from 0 to 9 where 0 is the lightest and 9 is the darkest color. Example of blue color from the default theme:


.. exec::docs.mantine-api.colorswatch
    :code: false

To access colors in styles use CSS variables:

```css
.demo {
  background: var(--mantine-color-blue-9);
  color: var(--mantine-color-blue-0);
}
```

### CSS variables
Theme values are converted to CSS variables and are available to use in your styles. All Mantine CSS variables are
prefixed with `--mantine-`, for example:

- theme["fontFamily"] → --mantine-font-family
- theme["colors"]["blue"][9] → --mantine-color-blue-9
- theme["spacing"]["xl"] → --mantine-spacing-xl

### CSS Variables list

For a list of all Mantine CSS variables that are generated from default theme, see the [Mantine docs](https://mantine.dev/styles/css-variables-list/)

### Styles API

[Styles API](/styles-api) is a set of props and techniques that allows you to customize styles of any element inside
Mantine component inline or with theme object. All Mantine components that have styles support Styles API.

Every Mantine component has a set of elements names that can be used to apply styles to inner elements inside the
component. Example of Checkbox component selectors:


| Selector       | Static selector              | Description                                             |
|----------------|--------------------------------|---------------------------------------------------------|
| root           | .mantine-Checkbox-root         | Root element                                            |
| input          | .mantine-Checkbox-input        | Input element (input[type="checkbox"])                  |
| icon           | .mantine-Checkbox-icon         | Checkbox icon, used to display checkmark and indeterminate state icon |
| inner          | .mantine-Checkbox-inner        | Wrapper for icon and input                              |
| body           | .mantine-Checkbox-body         | Input body, contains all other elements                 |
| labelWrapper   | .mantine-Checkbox-labelWrapper | Contains label, description, and error                  |
| label          | .mantine-Checkbox-label        | Label element                                           |
| description    | .mantine-Checkbox-description  | Description displayed below the label                   |
| error          | .mantine-Checkbox-error        | Error message displayed below the label                 |

These selectors can be used to apply styles to inner elements with `classNames` or `styles` props:

Here's an example of styling a `Checkbox`

.. exec::docs.mantine-api.styles-api
   
The following is added to a `.css` file in the `/assets` folder
```css

.dmc-api-demo-root {
  border: 1px solid light-dark(var(--mantine-color-gray-3), var(--mantine-color-dark-4));
  padding: var(--mantine-spacing-xs) var(--mantine-spacing-sm);
  border-radius: var(--mantine-radius-md);
  font-weight: 500;
  cursor: pointer;

  &[data-checked] {
    background-color: var(--mantine-color-blue-filled);
    border-color: var(--mantine-color-blue-filled);
    color: var(--mantine-color-white);
  }
}

``` 


### Color scheme
All Mantine components support light, dark and auto color schemes. By default, the color scheme is light, it can be
changed by the user and will be persisted in localStorage.

You can configure the default color scheme on MantineProvider:

```python

app.layout = dmc.MantineProvider(
    # children=[] your layout here
    defaultColorScheme="dark"
)
```
or use:

```python
app.layout = dmc.MantineProvider(
    # children=[] your layout here
    forceColorScheme="dark",
)
```

See the Theming section for examples of a [Theme Switch Component](/theme-switch)




================================================
File: docs/mantine-api/styles-api.py
================================================
import dash_mantine_components as dmc

component =  dmc.Checkbox(
    classNames={"root": "dmc-api-demo-root"},
    label="Checkbox button",
    w=180
)


================================================
File: docs/mantineprovider/mantineprovider.md
================================================
---
name: MantineProvider
description: Use MantineProvider component to manage themes in your app globally.
endpoint: /components/mantineprovider
package: dash_mantine_components
category: Theming
order: 1  # sets order in navbar section
---

.. toc::


Your `app.layout` must be wrapped with a single `MantineProvider`. Only one `MantineProvider` should be used in an app. 
It is responsible for:  

1. Controls the overall theme of the app (for example, colors, spacing, fonts).  
2. Manages light or dark mode.
3. Adding CSS variables to the document


### Usage

Your app must be wrapped inside a MantineProvider, and it must be used only once.

```python
import dash_mantine_components as dmc

app.layout = dmc.MantineProvider(
    theme = {...},
    children={...}
)
```

### theme object

See the [Theme Object](/theme-object) section to learn how to customize the default Mantine theme`.


### Custom Colors

See the [Colors](/colors) section to learn how to customize the theme colors.

### Color Scheme
Mantine supports both light and dark color schemes.  The default color scheme is "light".
When the `MantineProvider` is added to your app, it automatically sets the `data-mantine-color-scheme` attribute at the 
top level of the app. This attribute controls whether the app uses light or dark mode. All components in the app 
reference this attribute to decide which colors to apply.

You can change the color scheme with the `forceColorScheme` prop.

In the [Theme Switch Componets](/theme-switch) section, learn how to add a component to allow users to select either light or dark mode.

```python
import dash_mantine_components as dmc

app.layout = dmc.MantineProvider(
    forceColorScheme="dark",
    theme = {...},
    children={...}
)
```

### Keyword Arguments

#### MantineProvider

.. kwargs::MantineProvider



================================================
File: docs/mark/color.py
================================================
import dash_mantine_components as dmc

component = dmc.Text(
    ["Highlight ", dmc.Mark("this section", color="cyan"), " of the text."]
)



================================================
File: docs/mark/mark.md
================================================
---
name: Mark
description: Use the Mark component to highlight part of the text.
endpoint: /components/mark
package: dash_mantine_components
category: Typography
---

.. toc::

### Introduction

.. exec::docs.mark.simple
  
### Change color

.. exec::docs.mark.color

### Styles API

| Name        | Static selector    | Description                                      |
|:------------|:-------------------|:-------------------------------------------------|
| root        | .mantine-Mark-root | Root element                                     |

### Keyword Arguments

#### Mark

.. kwargs::Mark



================================================
File: docs/mark/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Text(
    [
        "Thanks for checking out ",
        dmc.Mark("Dash Mantine Components."),
        " You are awesome!",
    ]
)



================================================
File: docs/menu/colors.py
================================================
from dash_iconify import DashIconify
import dash_mantine_components as dmc

component = dmc.Menu(
    [
        dmc.MenuTarget(dmc.Button("Hover for options!")),
        dmc.MenuDropdown(
            [
                dmc.MenuLabel("Application"),
                dmc.MenuItem(
                    "Settings", leftSection=DashIconify(icon="tabler:settings")
                ),
                dmc.MenuItem(
                    "Messages", leftSection=DashIconify(icon="tabler:message")
                ),
                dmc.MenuItem("Gallery", leftSection=DashIconify(icon="tabler:photo")),
                dmc.MenuItem("Search", leftSection=DashIconify(icon="tabler:search")),
                dmc.MenuDivider(),
                dmc.MenuLabel("Danger Zone"),
                dmc.MenuItem(
                    "Transfer my data",
                    leftSection=DashIconify(icon="tabler:arrows-left-right"),
                ),
                dmc.MenuItem(
                    "Delete my account",
                    leftSection=DashIconify(icon="tabler:trash"),
                    color="red",
                ),
            ]
        ),
    ],
    trigger="hover",
)



================================================
File: docs/menu/custom.py
================================================
from dash_iconify import DashIconify
import dash_mantine_components as dmc

component = dmc.Menu(
    [
        dmc.MenuTarget(dmc.ActionIcon(DashIconify(icon="tabler:user"))),
        dmc.MenuDropdown(
            [
                dmc.MenuItem(
                    "External Link",
                    href="https://www.github.com/snehilvj",
                    target="_blank",
                    leftSection=DashIconify(icon="radix-icons:external-link"),
                ),
                dmc.MenuItem("Useless Button", n_clicks=0),
            ]
        ),
    ]
)



================================================
File: docs/menu/menu.md
================================================
---
name: Menu
description: Use the Menu and MenuX components to show an interactive menu dropdown with links and buttons.
endpoint: /components/menu
package: dash_mantine_components
category: Overlay
---

.. toc::

### Simple Example

Menu is built using MenuItem(s), MenuDropdown and MenuTarget. You can use MenuItem as either a link or a button. Just passing the `href` property will make it a link otherwise it will act as a button.
When MenuItem is used as a button, you can write callbacks on it.

.. exec::docs.menu.simple

### Menu on Hover

Set `trigger` to `hover` to reveal dropdown when user hovers over menu target and dropdown. `closeDelay` and `openDelay` props can be used to control open and close delay in ms.
Note that:

* If you set `closeDelay=0` then menu will close before user will reach dropdown, so set `offset=0` to remove space between target element and dropdown.
* Menu with hover trigger is not accessible - users that navigate with keyboard will not be able to use it.

```python
import dash_mantine_components as dmc

component = dmc.Menu(trigger="hover", openDelay=100, closeDelay=400, children=[
  # menu target
  # menu dropdown
    # menu items
])
```

### Menu Target

Any component you specify in dmc.MenuTarget is wrapped by a dmc.Box component under the hood. So adding a margin
to your target component will also move the dropdown away. In order to prevent this, add margin to the wrapper component
using the prop `boxWrapperProps` in dmc.MenuTarget.

### Transitions

Menu dropdown can be animated with any of the ready-made transitions.

.. exec::docs.menu.transition

### Custom component as Target

.. exec::docs.menu.custom

### Icons, Right Section, and Colors

Menu component can be customised by changing icons, right section and even colors. Here's an example.

.. exec::docs.menu.colors

### Styles API

| Name        | Static selector           | Description                            |
|:------------|:--------------------------|:---------------------------------------|
| dropdown    | .mantine-Menu-dropdown    | Dropdown element                       |
| arrow       | .mantine-Menu-arrow       | Dropdown arrow                         |
| divider     | .mantine-Menu-divider     | `Menu.Divider` root element            |
| label       | .mantine-Menu-label       | `Menu.Label` root element              |
| item        | .mantine-Menu-item        | `Menu.Item` root element               |
| itemLabel   | .mantine-Menu-itemLabel   | Label of `Menu.Item`                   |
| itemSection | .mantine-Menu-itemSection | Left and right sections of `Menu.Item` |

### Keyword Arguments

#### Menu

.. kwargs::Menu

#### MenuTarget

.. kwargs::MenuTarget

#### MenuDropdown

.. kwargs::MenuDropdown

#### MenuItem

.. kwargs::MenuItem

#### MenuDivider

.. kwargs::MenuDivider

#### MenuLabel

.. kwargs::MenuLabel



================================================
File: docs/menu/simple.py
================================================
from dash_iconify import DashIconify
import dash_mantine_components as dmc
from dash import callback, html, Input, Output

component = html.Div(
    [
        dmc.Text(id="menu-text", mb="md"),
        dmc.Menu(
            [
                dmc.MenuTarget(dmc.Button("Click for options!")),
                dmc.MenuDropdown(
                    [
                        dmc.MenuItem(
                            "External Link",
                            href="https://www.github.com/snehilvj",
                            target="_blank",
                            leftSection=DashIconify(icon="radix-icons:external-link"),
                        ),
                        dmc.MenuItem("Useless Button", id="useless-button", n_clicks=0),
                    ]
                ),
            ]
        ),
    ]
)


@callback(Output("menu-text", "children"), Input("useless-button", "n_clicks"))
def click_menu(n_clicks):
    return f"Clicked {n_clicks} times."



================================================
File: docs/menu/transition.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Menu(
    [
        dmc.MenuTarget(dmc.Button("Click for options!")),
        dmc.MenuDropdown(
            [
                dmc.MenuItem(
                    "External Link",
                    href="https://www.github.com/snehilvj",
                    target="_blank",
                    leftSection=DashIconify(icon="radix-icons:external-link"),
                ),
                dmc.MenuItem("Useless Button", n_clicks=0),
            ]
        ),
    ],
    transitionProps={"transition": "rotate-right", "duration": 150},
)



================================================
File: docs/migration/button.py
================================================
import dash_mantine_components as dmc

from dash_iconify import DashIconify

component = dmc.Button(
    "GitHub",
    leftSection=DashIconify(icon="radix-icons:github-logo", width=20),
    rightSection=dmc.Badge("3", circle=True, color="gray"),
)



================================================
File: docs/migration/hidden.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    [
        dmc.Button("Hidden from sm", hiddenFrom="sm", color="orange"),
        dmc.Button("Visible from sm", visibleFrom="sm", color="cyan"),
        dmc.Button("Visible from md", visibleFrom="md", color="pink"),
    ],
    justify="center",
)



================================================
File: docs/migration/migration.md
================================================
---
name: Migration Guide
endpoint: /migration
description: This page helps you migrate from an old version to a newer version of Dash Mantine Components
dmc: false
---

.. toc::


## Version Compatibility  

Below is a list of Dash Mantine Components (DMC) versions, their corresponding Mantine versions, and required Dash versions:  

| Dash Mantine Components | Release Date | Mantine Version | Required Dash Version |
|----------------------|--------------|-----------------|----|
| **1.0.0**           | Mar 2025     | 7.17.0          | `dash>=2.0.0` |
| **0.15.0**          | Nov 2024     | 7.14.1          | `dash>=2.0.0,<3.0.0`|
| **0.14.0**          | Apr 2024     | 7.0             | `dash>=2.0.0,<3.0.0` |
| **0.13.0a1**        | Aug 2023     | 6.0             | `dash>=2.0.0,<3.0.0` |
| **0.12.0**          | Mar 2023     | 5.10.5          | `dash>=2.0.0,<3.0.0` |



## Migrating from 0.15 to 1.0.0

This release ensures dash-mantine-components V1 is fully compatible with both Dash 2 and Dash 3.
**If you are using dash-mantine-components<1.0.0rc1 you must  pin your dash version to < 3.0.0**

### Breaking Change: Carousel Props
The `draggable` and `speed` props have been removed from `Carousel` as they are no longer supported in Embla Carousel V8.
These props were functional until DMC 0.14.7, when Embla was upgraded to V8.



## Migrating from 0.14 to 0.15

The `DatePicker` component has been renamed to `DatePickerInput` to align with the component names of  the upstream
Mantine Library.  We plan to add the Mantine [`DatePicker`](https://mantine.dev/dates/date-picker/) component in a future release.

We still expect far fewer breaking changes going forward compared to what you may have experienced in the past. For more details, please see our [Roadmap](https://github.com/snehilvj/dash-mantine-components/discussions/377).


## Migrating from 0.12 to 0.14

### Backstory

There are many breaking changes going from DMC `v0.12` to DMC `v0.14`. The major reason behind this was we jumped from 
underlying Mantine `v5` to Mantine `v7` and DMC tries to be as aligned with Mantine as possible. 

This hard alignment ensures that I can continue developing and maintaining this library alongside my day job. However, 
as per the author of Mantine itself, Mantine is reaching maturity and 
Mantine `v8` is supposed to introduce a lot of new features without the cost of API change.

I'd recommend going through the [getting started](/getting-started) page as well.

### MantineProvider

It is now mandatory to wrap your app into [MantineProvider](/components/mantineprovider) (of which only one can be there in the app).
This component is responsible for providing theme to all DMC components.

Dark theme is changed like this now:

  ```python
import dash_mantine_components as dmc

dmc.MantineProvider(
        forceColorScheme="dark",
        theme={...}
)
```

Mantine provides some better way to manage color themes in your app, but they are yet to be made available in DMC.

### React 18+ only

Starting with `v0.14`, DMC will need REACT 18. You can ensure that in two ways:

#### In the app settings

```python
import dash

# add this before creating app object
dash._dash_renderer._set_react_version('18.2.0')

app = Dash(__name__)
```

#### Environment variable

```bash
REACT_VERSION=18.2.0 python app.py
```

### Required StyleSheets

Except styling for core elements, the styling for components like `CodeHighlight`, `DatePicker`, `Carousel`, etc. have to be 
included by the user.

```python
from dash import Dash
import dash_mantine_components as dmc

# below covers all the stylesheets, you can pick as per your need.
stylesheets = [
    dmc.styles.DATES,
    dmc.styles.CODE_HIGHLIGHT,
    dmc.styles.CHARTS,
    dmc.styles.CAROUSEL,
    dmc.styles.NOTIFICATIONS,
    dmc.styles.NPROGRESS,
]

app = Dash(__name__, external_stylesheets=stylesheets)
```
Or, include all the stylesheets like this:

```python
app = Dash(__name__, external_stylesheets=dmc.styles.ALL)
```

### Missing components

- `Chip` and `ChipGroup` components are not working as expected when ported over in dash. It will be worked on as part of subsequent releases.
- `TransferList` is no longer available. You might benefit from [AIO based TransferList component](https://community.plotly.com/t/dash-mantine-components-0-14-1/83865/18?u=snehilvj) created by a community member.
**update** `Chip` and `ChipGroup` are available as of 0.14.6

### Creatable option in Select and MultiSelect

`creatable` prop has been removed from `Select` and `MultiSelect`. However, [TagsInput](/components/tagsinput) can be used to emulate
the same functionality as `MultiSelect` with `creatable` prop.

### Left and Right section

Components that previously had `rightSection` and `icon` props, now use `leftSection` instead of `icon`. Example of Button sections:

.. exec::docs.migration.button

### Title

[Title](/components/title) doesn't accept other [Text](/components/text) props like gradient etc. anymore.

### Progress

[Progress](/components/progress) component now supports compound components pattern. Advanced features that were previously implemented in Progress
are now supposed to be implemented with compound components instead.

.. exec::docs.progress.sections

.. admonition:: Tooltips
    :color: red
    :icon: radix-icons:info-circled

     Tooltips on Progress are not working as expected for now. Will have to tackle this in the subsequent releases.

### Table

[Table](/components/table) component changes:

- [Styles API](/styles-api) support
- It is now required to use `dmc` compound components instead of `html` table ones: `dmc.TableTr`, `dmc.TableTd`, etc.
- New props: `borderColor`, `withRowBorders`, `stripedColor`, `highlightOnHoverColor`
- `withBorder` prop was renamed to `withTableBorder`
- `fontSize` prop was removed, use `fz` [style prop](/style-props) instead

.. exec::docs.table.simple

### Group

[Group](/components/group) component changes:

- `position` prop was renamed to `justify` – it now supports all `justify-content` values
- `spacing` prop was renamed to `gap`

.. exec::docs.group.interactive
    :code: false

### Button

[Button](/components/button) changes

- `compact` prop was removed, use `size='compact-xx'` instead
- `leftIcon` and `rightIcon` props were renamed to `leftSection` and `rightSection`
- `uppercase` prop was removed, use `tt` [style prop](/style-props) instead
- `loaderPosition` prop was removed, Loader is now always rendered in the center to prevent layout shifts

### AppShell

[AppShell](/components/appshell) component is more feature rich now and has undergone following changes:

- `AppShell` now uses compound components pattern: `dmc.AppShellNavbar`, `dmc.AppShellAside`, `dmc.AppShellHeader`, `dmc.AppShellFooter`, and `dmc.AppShellMain`.
- `AppShell` now supports animations when navbar/aside are opened/closed
- `AppShell` no longer supports `fixed` prop – all components have `position: fixed` styles, static positioning is no longer supported

### SimpleGrid

[SimpleGrid](/components/simplegrid) now uses object format to define grid breakpoints and spacing, it works the same way as [style props](/style-props).

.. exec::docs.simplegrid.responsive

### Grid

[Grid](/components/grid) now uses object format in `gutter`, `offset`, `span` and `order` props, all props now work the same way as [style props](/style-props).

- `Col` component has been renamed to `GridCol`

### Image

[Image](/components/image) component changes:

- `caption` prop is no longer available 
- `width` and `height` props are replaced with `w` and `h` [style props](/style-props)
- Placeholder functionality was replaced with fallback image

.. exec::docs.image.placeholder

### Notification

`NotificationsProvider` has been renamed to `NotificationProvider`.
`disallowClose` is no longer available.  Use `withCloseButton`

### Prism

`Prism` has been replaced by [CodeHighlight](/components/code-highlight).

### MediaQuery

MediaQuery has been removed. You can use CSS or `visibleFrom` and `hiddenFrom` props.

All DMC components now support `hiddenFrom` and `visibleFrom` props. These props accept breakpoint (`xs`, `sm`, `md`, `lg`, `xl`) 
and hide the component when viewport width is less than or greater than the specified breakpoint.

.. exec::docs.migration.hidden



================================================
File: docs/modal/modal.md
================================================
---
name: Modal
description: Use Modal component to show a dialog box or a popup window on the top of the current page.
endpoint: /components/modal
package: dash_mantine_components
category: Overlay
---

.. toc::

### Simple Example

This is a basic example of dmc.Modal. You can also customize it by setting the desired `radius` or `padding`.

.. exec::docs.modal.simple

### Different Sizes

Set the size of the modal using the `size` prop.

.. exec::docs.modal.sizes

### Vertically Centered Modal

To vertically center the modal, set `centered=True`.

.. exec::docs.modal.vertical

### Modal With Scroll

.. exec::docs.modal.scroll

### Styles API

| Name    | Static selector        | Description                                                           |
|:--------|:-----------------------|:----------------------------------------------------------------------|
| root    | .mantine-Modal-root    | Root element                                                          |
| inner   | .mantine-Modal-inner   | Element used to center modal, has fixed position, takes entire screen |
| content | .mantine-Modal-content | `Modal.Content` root element                                          |
| header  | .mantine-Modal-header  | Contains title and close button                                       |
| overlay | .mantine-Modal-overlay | Overlay displayed under the `Modal.Content`                           |
| title   | .mantine-Modal-title   | Modal title (h2 tag), displayed in the header                         |
| body    | .mantine-Modal-body    | Modal body, displayed after header                                    |
| close   | .mantine-Modal-close   | Close button                                                          |

### Keyword Arguments

#### Modal

.. kwargs::Modal



================================================
File: docs/modal/scroll.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, State, callback

paragraph = (
    """Dash apps give a point-&-click interface to models written in Python, vastly expanding the notion of what's 
        possible in a traditional 'dashboard.' With Dash apps, data scientists and engineers put complex Python analytics 
        in the hands of business decision-makers and operators. """
    * 10
)

component = html.Div(
    [
        dmc.Modal(
            id="modal-scroll",
            title="Modal with Scroll",
            children=[dmc.Text(paragraph)],
        ),
        dmc.Button("Modal with Scroll", id="modal-scroll-button"),
    ]
)


@callback(
    Output("modal-scroll", "opened"),
    Input("modal-scroll-button", "n_clicks"),
    State("modal-scroll", "opened"),
    prevent_initial_call=True,
)
def toggle_modal(n_clicks, opened):
    return not opened



================================================
File: docs/modal/simple.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, State, callback

component = html.Div(
    [
        dmc.Button("Open Modal", id="modal-demo-button"),
        dmc.Modal(
            title="New Modal",
            id="modal-simple",
            children=[
                dmc.Text("I am in a modal component."),
                dmc.Space(h=20),
                dmc.Group(
                    [
                        dmc.Button("Submit", id="modal-submit-button"),
                        dmc.Button(
                            "Close",
                            color="red",
                            variant="outline",
                            id="modal-close-button",
                        ),
                    ],
                    justify="flex-end",
                ),
            ],
        ),
    ]
)


@callback(
    Output("modal-simple", "opened"),
    Input("modal-demo-button", "n_clicks"),
    Input("modal-close-button", "n_clicks"),
    Input("modal-submit-button", "n_clicks"),
    State("modal-simple", "opened"),
    prevent_initial_call=True,
)
def modal_demo(nc1, nc2, nc3, opened):
    return not opened



================================================
File: docs/modal/sizes.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, State, callback

component = html.Div(
    [
        dmc.Modal(title="Size: lg", id="modal-size-lg", size="lg"),
        dmc.Modal(title="Size: 378px", id="modal-size-378", size=378),
        dmc.Modal(title="Size: 55%", id="modal-size-55", size="55%"),
        dmc.Modal(title="Size: full", id="modal-size-full", fullScreen=True),
        dmc.Group(
            [
                dmc.Button("lg", id="lg-modal-button"),
                dmc.Button("378px", id="378-modal-button"),
                dmc.Button("55%", id="55-modal-button"),
                dmc.Button("full", id="full-modal-button"),
            ]
        ),
    ]
)


def toggle_modal(n_clicks, opened):
    return not opened


for size in ["lg", "378", "55", "full"]:
    callback(
        Output(f"modal-size-{size}", "opened"),
        Input(f"{size}-modal-button", "n_clicks"),
        State(f"modal-size-{size}", "opened"),
        prevent_initial_call=True,
    )(toggle_modal)



================================================
File: docs/modal/vertical.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, State, callback

component = html.Div(
    [
        dmc.Modal(
            title="Centered Modal",
            id="modal-centered",
            centered=True,
            children=[dmc.Text("This is a vertically centered modal.")],
        ),
        dmc.Button("Open modal", id="modal-centered-button"),
    ]
)


@callback(
    Output("modal-centered", "opened"),
    Input("modal-centered-button", "n_clicks"),
    State("modal-centered", "opened"),
    prevent_initial_call=True,
)
def toggle_modal(n_clicks, opened):
    return not opened



================================================
File: docs/monthpickerinput/clearable.py
================================================
from datetime import datetime

import dash_mantine_components as dmc

component = dmc.MonthPickerInput(
    clearable=True,
    value=datetime.now(),
    label="Pick date (clearable)",
    placeholder="Pick Date",
)



================================================
File: docs/monthpickerinput/columns.py
================================================
import dash_mantine_components as dmc

component = dmc.MonthPickerInput(
    label="Pick date", placeholder="Pick date", numberOfColumns=2
)



================================================
File: docs/monthpickerinput/disabled.py
================================================
import dash_mantine_components as dmc

component = dmc.MonthPickerInput(
    disabled=True,
    valueFormat="YYYY MMM",
    type="multiple",
    label="Pick month (Disabled)",
    placeholder="Pick month",
)



================================================
File: docs/monthpickerinput/icon.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.MonthPickerInput(
    leftSection=DashIconify(icon="fa:calendar"),
    leftSectionPointerEvents="none",
    label="Pick date",
    placeholder="Pick date",
)



================================================
File: docs/monthpickerinput/minmax.py
================================================
from datetime import datetime, timedelta

import dash_mantine_components as dmc

component = dmc.MonthPickerInput(
    minDate=datetime(2022, 1, 1),
    maxDate=datetime(2022, 8, 1),
    value=datetime(2022, 1, 1),
    placeholder="Date input",
    label="Select valid date",
    w=250,
)



================================================
File: docs/monthpickerinput/modal.py
================================================
import dash_mantine_components as dmc

component = dmc.MonthPickerInput(
    dropdownType="modal",
    label="Pick date (picker in modal)",
    placeholder="Pick date",
)



================================================
File: docs/monthpickerinput/monthpickerinput.md
================================================
---
name: MonthPickerInput
description: Month, multiple months and months range picker input
endpoint: /components/monthpickerinput
package: dash_mantine_components
category: Date Pickers
---

.. toc::



### CSS Extensions

.. admonition::CSS Extensions
   :icon: radix-icons:info-circled
   :color: red

   Date components require additional CSS styles.

The Date components require an additional CSS stylesheet.  See the [Getting Started](/getting-started) section for more information.

Be sure to include:
```python
app = Dash(external_stylesheets=[dmc.styles.DATES])
```
Or, if you want to include all optional stylesheets:
```python
app = Dash(external_stylesheets=dmc.styles.ALL)
```


### Simple Example

.. exec::docs.monthpickerinput.simple

### Multiple dates

Set type="multiple" to allow user to pick multiple months.  Note that `value` is a list.

.. exec::docs.monthpickerinput.multiple

### Dates range

Set type="range" to allow user to pick dates range. Note that `value` is a list.

.. exec::docs.monthpickerinput.range

### Open picker in modal

By default, MonthPickerInput is rendered inside Popover. You can change that to Modal by setting dropdownType="modal"

.. exec::docs.monthpickerinput.modal

### Number of columns

.. exec::docs.monthpickerinput.columns

### Value format

Use `valueFormat` prop to change [dayjs format](https://day.js.org/docs/en/display/format) of value label.

.. exec::docs.monthpickerinput.valueformat


### Clearable

Set `clearable=True` prop to display clear button in the right section. Note that if you set `rightSection` prop, clear button will not be displayed.

.. exec::docs.monthpickerinput.clearable


### With Icon

.. exec::docs.monthpickerinput.icon


### Min and Max Date

.. exec::docs.monthpickerinput.minmax



### Styles API

| Selector                   | Static selector                                        | Description                                                           |
| ---------------------------| ------------------------------------------------------ | --------------------------------------------------------------------- |
| `wrapper`                  | `.mantine-MonthPickerInput-wrapper`                    | Root element of the Input                                              |
| `input`                    | `.mantine-MonthPickerInput-input`                      | Input element                                                         |
| `section`                  | `.mantine-MonthPickerInput-section`                    | Left and right sections                                                |
| `root`                     | `.mantine-MonthPickerInput-root`                       | Root element                                                          |
| `label`                    | `.mantine-MonthPickerInput-label`                      | Label element                                                         |
| `required`                 | `.mantine-MonthPickerInput-required`                   | Required asterisk element, rendered inside label                       |
| `description`              | `.mantine-MonthPickerInput-description`                | Description element                                                    |
| `error`                    | `.mantine-MonthPickerInput-error`                      | Error element                                                         |
| `calendarHeader`           | `.mantine-MonthPickerInput-calendarHeader`             | Calendar header root element                                           |
| `calendarHeaderControl`     | `.mantine-MonthPickerInput-calendarHeaderControl`      | Previous/next calendar header controls                                 |
| `calendarHeaderControlIcon` | `.mantine-MonthPickerInput-calendarHeaderControlIcon`  | Icon of previous/next calendar header controls                         |
| `calendarHeaderLevel`       | `.mantine-MonthPickerInput-calendarHeaderLevel`        | Level control (changes levels when clicked, month -> year -> decade)   |
| `levelsGroup`              | `.mantine-MonthPickerInput-levelsGroup`                | Group of decades levels                                                |
| `yearsList`                | `.mantine-MonthPickerInput-yearsList`                  | Years list table element                                               |
| `yearsListRow`             | `.mantine-MonthPickerInput-yearsListRow`               | Years list row element                                                 |
| `yearsListCell`            | `.mantine-MonthPickerInput-yearsListCell`              | Years list cell element                                                |
| `yearsListControl`         | `.mantine-MonthPickerInput-yearsListControl`           | Button used to pick months and years                                   |
| `monthsList`               | `.mantine-MonthPickerInput-monthsList`                 | Years list table element                                               |
| `monthsListRow`            | `.mantine-MonthPickerInput-monthsListRow`              | Years list row element                                                 |
| `monthsListCell`           | `.mantine-MonthPickerInput-monthsListCell`             | Years list cell element                                                |
| `monthsListControl`        | `.mantine-MonthPickerInput-monthsListControl`          | Button used to pick months and years                                   |
| `placeholder`              | `.mantine-MonthPickerInput-placeholder`                | Placeholder element                                                    |

### MonthPickerInput data attributes

| Selector              | Attribute      | Condition                           | Value                              |
| --------------------- | -------------- | ----------------------------------- | ---------------------------------- |
| `calendarHeaderControl`| `data-direction`| –                                   | "previous" or "next" depending on the control type |
| `calendarHeaderControl`| `data-disabled`| Control is disabled for any reason  | –                                  |

### Keyword Arguments

#### MonthPickerInput

.. kwargs::MonthPickerInput



================================================
File: docs/monthpickerinput/multiple.py
================================================
import dash_mantine_components as dmc

component = dmc.MonthPickerInput(
    type="multiple",
    label="Pick multiple dates",
    placeholder="Pick dates",
)



================================================
File: docs/monthpickerinput/range.py
================================================
import dash_mantine_components as dmc

component = dmc.MonthPickerInput(
    type="range",
    label="Pick dates range",
    placeholder="Pick dates range",
)



================================================
File: docs/monthpickerinput/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.MonthPickerInput(
    label="Pick date",
    placeholder="Pick date",
)



================================================
File: docs/monthpickerinput/valueformat.py
================================================
import dash_mantine_components as dmc

component = dmc.MonthPickerInput(
    valueFormat="YYYY MMM",
    type="multiple",
    label="Pick month (Value Formatter)",
    placeholder="Pick month",
)



================================================
File: docs/multiselect/check.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    label="Control check icon",
    placeholder="Select all you like!",
    value=["Pandas", "TensorFlow"],
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    w=400,
    mb=180,
    dropdownOpened=True,
    checkIconPosition="right",
)



================================================
File: docs/multiselect/check_option.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    label="Control check icon",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    value=["Pandas", "NumPy"],
    checkIconPosition="right",
    dropdownOpened=True,
    w=200,
    pb=150,
    id="multi-select-check-icon",
)



================================================
File: docs/multiselect/clearable.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    label="Select your favorite library",
    placeholder="Select all you like!",
    value=["Pandas", "TensorFlow"],
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    clearable=True,
    w=400,
    mb=180,
)



================================================
File: docs/multiselect/dropdown_animation.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    label="Your favorite libraries",
    placeholder="Pick values",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={"transitionProps": {"transition": "pop", "duration": 200}},
)



================================================
File: docs/multiselect/dropdown_offset.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    label="Your favorite libraries",
    placeholder="Pick values",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={
        "position": "bottom",
        "middlewares": {"flip": False, "shift": False},
        "offset": 0,
    },
)



================================================
File: docs/multiselect/dropdown_padding.py
================================================
import dash_mantine_components as dmc

component = dmc.Paper(
    [
        dmc.MultiSelect(
            label="Zero padding",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick value",
            comboboxProps={"dropdownPadding": 0},
            w=400,
        ),
        dmc.MultiSelect(
            label="10px padding",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick value",
            comboboxProps={"dropdownPadding": 10},
            w=400,
            mt="md",
        ),
    ]
)



================================================
File: docs/multiselect/dropdown_position.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    label="Your favorite libraries",
    placeholder="Pick values",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={"position": "top", "middlewares": {"flip": False, "shift": False}},
)



================================================
File: docs/multiselect/dropdown_shadow.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    label="Your favorite libraries",
    placeholder="Pick values",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={"shadow": "md"},
)



================================================
File: docs/multiselect/dropdown_width.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    label="Your favorite libraries",
    placeholder="Pick values",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={"position": "bottom-start", "width": 200},
)



================================================
File: docs/multiselect/error.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, callback

component = dmc.MultiSelect(
    data=["USDINR", "EURUSD", "USDTWD", "USDJPY"],
    id="multi-select-error",
    value=["USDJPY"],
    w=400,
)


@callback(Output("multi-select-error", "error"), Input("multi-select-error", "value"))
def select_value(value):
    return "Select at least 2." if len(value) < 2 else ""



================================================
File: docs/multiselect/grouping.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    data=[
        {
            "group": "Data Analysis",
            "items": [
                {"value": "Pandas", "label": "Pandas"},
                {"value": "NumPy", "label": "NumPy"},
            ],
        },
        {
            "group": "Deep Learning",
            "items": [
                {"value": "TensorFlow", "label": "TensorFlow"},
                {"value": "PyTorch", "label": "PyTorch"},
            ],
        },
    ],
    w=400,
)



================================================
File: docs/multiselect/hide.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    label="Select your favorite libraries",
    placeholder="Select all you like!",
    hidePickedOptions=True,
    value=["Pandas", "TensorFlow"],
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    w=400,
    mb=140,
    dropdownOpened=True,
)



================================================
File: docs/multiselect/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-multi-select-input"
target = dmc.Center(
    dmc.MultiSelect(
        label="",
        placeholder="placeholder",
        data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
        w=250,
        id=TARGET_ID,
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_text_input(
    "placeholder", "MultiSelect placeholder", **{"placeholder": "Placeholder"}
)
configurator.add_text_input("label", "Input Label", **{"placeholder": "Label"})
configurator.add_text_input("description", "", **{"placeholder": "Description"})
configurator.add_text_input("error", "", **{"placeholder": "Error"})
configurator.add_select("variant", ["default", "filled", "unstyled"], "default")
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "sm")
configurator.add_switch("withAsterisk", True)
configurator.add_switch("disabled", False)
configurator.add_switch("clearable", True)


component = configurator.panel



================================================
File: docs/multiselect/large_data_sets.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    label="100,000 options",
    data=[f"Option {i}" for i in range(100000)],
    placeholder="use limit to optimize performance",
    limit=10,
    searchable=True,
    w=400,
)



================================================
File: docs/multiselect/left_right.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Paper(
    [
        dmc.MultiSelect(
            label="Your favorite libraries",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick values",
            leftSectionPointerEvents="none",
            leftSection=DashIconify(icon="bi-book"),
            w=400,
        ),
        dmc.MultiSelect(
            label="Your favorite libraries",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick values",
            rightSectionPointerEvents="none",
            rightSection=DashIconify(icon="bi-book"),
            w=400,
            mt="md",
        ),
    ]
)



================================================
File: docs/multiselect/max-selected.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    label="Select your favorite",
    description="You can select a maximum of 3 frameworks.",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    maxValues=3,
    w=400,
)



================================================
File: docs/multiselect/multiselect.md
================================================
---
name: MultiSelect
description: MultiSelect enables users to select multiple options in a dropdown.
endpoint: /components/multiselect
package: dash_mantine_components
category: Combobox
---

.. toc::

### Simple Example

MultiSelect component allows user to pick any number of option from the given data.
I you would like users to be able to enter custom values, see `TagsInput`.

.. exec::docs.multiselect.simple

### Data Format

The data can be provided as either:
* an array of strings - use when label and value are same.
* an array of dicts with `label` and `value` properties.
* an array of dict with `group` and `items` as keys where items are one of the previous two types.

```python
data = ["Pandas", "NumPy", "TensorFlow", "PyTorch"]

# or

data = [
    {"value": "Pandas", "label": "Pandas"},
    {"value": "NumPy", "label": "NumPy"},
    {"value": "TensorFlow", "label": "TensorFlow"},
    {"value": "PyTorch", "label": "PyTorch"},
]

# or

data = [
    {"group": "Data Analysis", "items": ["Pandas", "NumPy"]},
    {"group": "Deep Learning", "items": ["TensorFlow", "Pytorch"]}
]

# or

data = [
    {
        "group": "Data Analysis",
        "items": [
            {"value": "Pandas", "label": "Pandas"},
            {"value": "NumPy", "label": "NumPy"},
        ],
    },
    {
        "group": "Deep Learning",
        "items": [
            {"value": "TensorFlow", "label": "TensorFlow"},
            {"value": "PyTorch", "label": "PyTorch"},
        ],
    },
]
```

### Clearable

Set `clearable` prop to display the clear button in the right section. The button is not displayed when:

- The component does not have a value
- The component is disabled
- The component is read only


.. exec::docs.multiselect.clearable


### Searchable

Set `searchable` prop to allow filtering options by user input.

.. exec::docs.multiselect.searchable


### Nothing Found

Set the `nothingFoundMessage` prop to display a given message when no options match the search query or there is 
no data available. If the `nothingFoundMessage` prop is not set, the `MultiSelect` dropdown will be hidden.

.. exec::docs.multiselect.nothing_found


### Checked option icon

Set `checkIconPosition` prop to `left` or `right` to control position of check icon in active option.
To remove the check icon, set `withCheckIcon=False`.

.. exec::docs.multiselect.check


### Max Selected Values

You can limit the number of selected values with `maxValues` prop. This will not allow adding more values
once the limit is reached.

.. exec::docs.multiselect.max-selected

### Hide selected options

To remove selected options from the list of available options, set `hidePickedOptions` prop:

.. exec::docs.multiselect.hide

### Large Data Sets

The best strategy for large data sets is to limit the number of options that are rendered at the same time. You can
do it with limit prop. 

Example of `MultiSelect` with 100 000 options, 10 options are rendered at the same time:

.. exec::docs.multiselect.large_data_sets

### Scrollable dropdown

By default, the options list is wrapped with `ScrollArea.Autosize`. You can control dropdown max-height with 
`maxDropdownHeight` prop if you do not change the default settings.

If you want to use native scrollbars, set `withScrollArea=False`. Note that in this case, you will need to change 
dropdown styles with `Styles API`.


.. exec::docs.multiselect.scrollable

### Grouping

.. exec::docs.multiselect.grouping

### Combobox props
You can override `Combobox` props with `comboboxProps`. It is useful when you need to change some of the props that are
not exposed by `MultiSelect`, for example `withinPortal`:

```python
dmc.MultiSelect(comboboxProps={"withinPortal": False})
```


### Change dropdown z-index


```python
dmc.MultiSelect(comboboxProps={"zIndex": 1000})
```


### Inside Popover

To use MultiSelect inside popover, you need to set `withinPortal=False`:

.. exec::docs.multiselect.popover


### Dropdown open in a callback

.. exec::docs.multiselect.opened

### Dropdown position

By default, the dropdown is displayed below the input if there is enough space; otherwise it is displayed above the
input. You can change this behavior by setting `position` and `middlewares` props, which are passed down to the
underlying `Popover` component.

Example of dropdown that is always displayed above the input:

.. exec::docs.multiselect.dropdown_position

### Dropdown width

To change dropdown width, set `width` prop in `comboboxProps`. By default, dropdown width is equal to the input width.

.. exec::docs.multiselect.dropdown_width


### Dropdown offset

To change dropdown offset, set `offset` prop in `comboboxProps`:  

.. exec::docs.multiselect.dropdown_offset

### Dropdown animation
By default, dropdown animations are disabled. To enable them, you can set `transitionProps`, which will be passed
down to the underlying `Transition` component.

.. exec::docs.multiselect.dropdown_animation

### Dropdown padding

.. exec::docs.multiselect.dropdown_padding


### Dropdown shadow

.. exec::docs.multiselect.dropdown_shadow

### Left and right sections

`MultiSelect` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position
inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

- `rightSection`/`leftSection` – component to render on the corresponding side of input
- `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component size prop.
- `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls pointer-events property of the section. If you want to render a non-interactive element, set it to none to pass clicks through to the input.

.. exec::docs.multiselect.left_right



### Invalid State And Error

You can let the user know if the selected value is invalid. In the example below, you will get an error message if you
select less than 2 currency pairs.

.. exec::docs.multiselect.error

### Input Props
`MultiSelect` component supports `Input` and Input Wrapper components features and all input element props.
`MultiSelect` documentation does not include all features supported by the component – see Input documentation to learn about all available features.

 
.. exec::docs.multiselect.interactive
   :code: false

### Styles API

| Name        | Static selector                  | Description                                      |
|:------------|:---------------------------------|:-------------------------------------------------|
| wrapper     | .mantine-MultiSelect-wrapper     | Root element of the Input                        |
| input       | .mantine-MultiSelect-input       | Input element                                    |
| section     | .mantine-MultiSelect-section     | Left and right sections                          |
| root        | .mantine-MultiSelect-root        | Root element                                     |
| label       | .mantine-MultiSelect-label       | Label element                                    |
| required    | .mantine-MultiSelect-required    | Required asterisk element, rendered inside label |
| description | .mantine-MultiSelect-description | Description element                              |
| error       | .mantine-MultiSelect-error       | Error element                                    |
| dropdown    | .mantine-MultiSelect-dropdown    | Dropdown root element                            |
| options     | .mantine-MultiSelect-options     | Options wrapper                                  |
| option      | .mantine-MultiSelect-option      | Option                                           |
| empty       | .mantine-MultiSelect-empty       | Nothing found message                            |
| group       | .mantine-MultiSelect-group       | Options group wrapper                            |
| groupLabel  | .mantine-MultiSelect-groupLabel  | Options group label                              |
| pill        | .mantine-MultiSelect-pill        | Value pill                                       |
| inputField  | .mantine-MultiSelect-inputField  | Input field                                      |
| pillsList   | .mantine-MultiSelect-pillsList   | List of pills, also contains input field         |

### Keyword Arguments

#### MultiSelect

.. kwargs::MultiSelect



================================================
File: docs/multiselect/nothing_found.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    label="Pick your favorite libraries",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    searchable=True,
    nothingFoundMessage="Nothing found...",
    w=400,
)



================================================
File: docs/multiselect/opened.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback

component = html.Div(
    [
        dmc.Button("Toggle dropdown", id="btn-multi-select-opened", n_clicks=0),
        dmc.MultiSelect(
            label="Select your favorite libraries",
            placeholder="Select all you like!",
            id="multi-select-opened",
            value=["pd", "torch"],
            data=[
                {"value": "pd", "label": "Pandas"},
                {"value": "np", "label": "NumPy"},
                {"value": "tf", "label": "TensorFlow"},
                {"value": "torch", "label": "PyTorch"},
            ],
            w=400,
            mb=10,
        ),
    ]
)


@callback(
    Output("multi-select-opened", "dropdownOpened"),
    Input("btn-multi-select-opened", "n_clicks"),
)
def select_value(n):
    if n % 2 == 0:
        return False
    return True



================================================
File: docs/multiselect/popover.py
================================================
import dash_mantine_components as dmc

component = dmc.Popover(
    width=300,
    position="bottom",
    withArrow=True,
    shadow="md",
    children=[
        dmc.PopoverTarget(dmc.Button("Toggle Popover")),
        dmc.PopoverDropdown(
            dmc.MultiSelect(
                label="Your favorite libraries",
                placeholder="Pick values",
                data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
                comboboxProps={"withinPortal": False},
            )
        ),
    ],
)



================================================
File: docs/multiselect/scrollable.py
================================================
import dash_mantine_components as dmc

component = dmc.Paper(
    [
        dmc.MultiSelect(
            label="Scrollable dropdown",
            data=[f"Option {i}" for i in range(100)],
            placeholder="Pick value",
            maxDropdownHeight=300,
            w=400,
        ),
        dmc.MultiSelect(
            label="With native scroll",
            data=[f"Option {i}" for i in range(100)],
            placeholder="Pick value",
            withScrollArea=False,
            styles={"dropdown": {"maxHeight": 200, "overflowY": "auto"}},
            w=400,
            mt="md",
        ),
    ]
)



================================================
File: docs/multiselect/searchable.py
================================================
import dash_mantine_components as dmc

component = dmc.MultiSelect(
    label="Pick your favorite libraries",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    searchable=True,
    w=400,
)



================================================
File: docs/multiselect/simple.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback

component = html.Div(
    [
        dmc.MultiSelect(
            label="Select your favorite libraries",
            placeholder="Select all you like!",
            id="framework-multi-select",
            value=["pd", "torch"],
            data=[
                {"value": "pd", "label": "Pandas"},
                {"value": "np", "label": "NumPy"},
                {"value": "tf", "label": "TensorFlow"},
                {"value": "torch", "label": "PyTorch"},
            ],
            w=400,
            mb=10,
        ),
        dmc.Text(id="multi-selected-value"),
    ]
)


@callback(
    Output("multi-selected-value", "children"), Input("framework-multi-select", "value")
)
def select_value(value):
    return ", ".join(value)



================================================
File: docs/navlink/active.py
================================================
import dash_mantine_components as dmc
from dash import html
from dash_iconify import DashIconify

from lib.configurator import Configurator

TARGET_ID = "interactive-navlink"


def get_icon(icon):
    return DashIconify(icon=icon, height=20)


target = html.Div(
    [
        dmc.NavLink(
            label="With icon",
            leftSection=get_icon(icon="bi:house-door-fill"),
        ),
        dmc.NavLink(
            label="With right section",
            leftSection=get_icon(icon="tabler:gauge"),
            active=True,
            id=TARGET_ID,
            rightSection=get_icon(icon="tabler-chevron-right"),
        ),
    ],
    style={"width": 240},
)

configurator = Configurator(target, TARGET_ID)
configurator.add_segmented_control("variant", ["filled", "light", "subtle"], "filled")
configurator.add_colorpicker("color", "indigo")

component = configurator.panel



================================================
File: docs/navlink/basic.py
================================================
import dash_mantine_components as dmc
from dash import html
from dash_iconify import DashIconify


def get_icon(icon):
    return DashIconify(icon=icon, height=16)


component = html.Div(
    [
        dmc.NavLink(
            label="With icon",
            leftSection=get_icon(icon="bi:house-door-fill"),
        ),
        dmc.NavLink(
            label="With right section",
            leftSection=get_icon(icon="tabler:gauge"),
            rightSection=get_icon(icon="tabler-chevron-right"),
        ),
        dmc.NavLink(
            label="Disabled",
            leftSection=get_icon(icon="tabler:circle-off"),
            disabled=True,
        ),
        dmc.NavLink(
            label="With description",
            description="Additional information",
            leftSection=dmc.Badge(
                "3", size="xs", variant="filled", color="red", w=16, h=16, p=0
            ),
        ),
        dmc.NavLink(
            label="Active subtle",
            leftSection=get_icon(icon="tabler:activity"),
            rightSection=get_icon(icon="tabler-chevron-right"),
            variant="subtle",
            active=True,
        ),
        dmc.NavLink(
            label="Active light",
            leftSection=get_icon(icon="tabler:activity"),
            rightSection=get_icon(icon="tabler-chevron-right"),
            active=True,
        ),
        dmc.NavLink(
            label="Active filled",
            leftSection=get_icon(icon="tabler:activity"),
            rightSection=get_icon(icon="tabler-chevron-right"),
            variant="filled",
            active=True,
        ),
    ],
    style={"width": 240},
)



================================================
File: docs/navlink/navlink.md
================================================
---
name: NavLink
description: A Navlink component.
endpoint: /components/navlink
package: dash_mantine_components
category: Navigation
---

.. toc::

### Basic usage

Use `NavLink`'s `n_clicks` property in callbacks, or you can set `href` to make it a link.

.. exec::docs.navlink.basic

### Active styles

Set `active` prop to add active styles to `NavLink`. You can customize active styles with `color` and `variant` properties.

.. exec::docs.navlink.active
    :code: false

```python
import dash_mantine_components as dmc
from dash_iconify import DashIconify

dmc.NavLink(
    label="With right section",
    leftSection=DashIconify(icon="tabler:gauge"),
    active=True,
    variant="filled",
    color="orange",
    id="navlink-interactive",
    rightSection=DashIconify(icon="tabler-chevron-right"),
),
```

### Setting Active prop based on URL

The `active` prop in `NavLink` controls whether a link is highlighted as active. It can be set manually (`True`/`False`)
or automatically based on the current URL.  

*New in dash-mantine-components > = 1.0.0*  

Now, `active` can be set dynamically:  
- `"exact"` → Active when the current pathname matches `href`.  
- `"partial"` → Active when the current pathname starts with `href` (includes subpages).  

Example:
- User on `/page-1/subject-1` → The second and third links are active (since `"partial"` includes subpages).  
- User on `/page-1` → Only the second link is active.  


```python
html.Div([
    dmc.NavLink(label="Home", href="/home", active="exact"),
    dmc.NavLink(label="Page 1", href="/page-1", active="partial"),
    dmc.NavLink(label="Subject 1", href="/page-1/subject-1", active="exact"),
])
```
See a complete example in Multi-Page App Example with Active Links section.  


### Setting active prop in a callback

Use a callback to set `active` prop if you are using dash-mantine-components<1.0.0

This example demonstrates how to use a callback to set the `active` prop of the `NavLink` when the user navigates to a different page. It uses the "Dash Pages" feature but can be adapted to any other page navigation system.

```python
# Create Navlinks (using dash.page_registry)
[
    dmc.NavLink(
        label=f"{page['name']}",
        href=page["relative_path"],
        id={"type": "navlink", "index": page["relative_path"]},
    )
    for page in page_registry.values()
]

# ...

# Callback (using the dcc.location provided by Dash Pages)
@app.callback(Output({"type": "navlink", "index": ALL}, "active"), Input("_pages_location", "pathname"))
def update_navlinks(pathname):
    return [control["id"]["index"] == pathname for control in callback_context.outputs_list]

```

### Nested NavLinks

To create nested links put dmc.NavLink as children of another dmc.NavLink.

.. exec::docs.navlink.nested


### Multi-Page App Example with Active Links
Here's a minimal multi-page app example using Pages. It demonstrates how `active="exact"` and `active="partial"`
automatically apply active styles based on the current URL

```python
import dash
import dash_mantine_components as dmc
from dash import Dash, _dash_renderer, html
_dash_renderer._set_react_version("18.2.0")

app = Dash(external_stylesheets=dmc.styles.ALL, use_pages=True, pages_folder="")

dash.register_page("home", path="/", layout=html.Div("I'm home"))
dash.register_page("page1", path="/page-1", layout=html.Div("Info about page 1 subjects"))
dash.register_page("page1s1", path="/page-1/sub-1", layout=html.Div("page 1 subject 1"))
dash.register_page("page1s2", path="/page-1/sub-2", layout=html.Div("page 1 subject 2"))

component = dmc.Box([
    dmc.NavLink(label="home", href="/", active='exact'),
    dmc.NavLink(
            label="Page 1",
            childrenOffset=28,
            href="/page-1",
            active='partial',
            children=[
                dmc.NavLink(label="Subject 1", href="/page-1/sub-1", active="exact"),
                dmc.NavLink(label="Subject 2", href="/page-1/sub-2", active="exact"),
            ],
    ),
    dmc.Divider(mb="lg"),
    dash.page_container
])


app.layout = dmc.MantineProvider([component])

if __name__ == "__main__":
    app.run(debug=True)

```

Here is a complete example using 

### Styles API

| Name        | Static selector              | Description                                  |
|:------------|:-----------------------------|:---------------------------------------------|
| root        | .mantine-NavLink-root        | Root element                                 |
| body        | .mantine-NavLink-body        | Contains label and description               |
| section     | .mantine-NavLink-section     | Left and right sections                      |
| label       | .mantine-NavLink-label       | NavLink label                                |
| description | .mantine-NavLink-description | Dimmed description displayed below the label |
| children    | .mantine-NavLink-children    | Wrapper around nested links                  |
| chevron     | .mantine-NavLink-chevron     | Default chevron icon                         |
| collapse    | .mantine-NavLink-collapse    | Nested links Collapse container              |

### Keyword Arguments

#### NavLink

.. kwargs::NavLink



================================================
File: docs/navlink/nested.py
================================================
import dash_mantine_components as dmc
from dash import html
from dash_iconify import DashIconify


def get_icon(icon):
    return DashIconify(icon=icon, height=16)


component = html.Div(
    style={"width": 240},
    children=[
        dmc.NavLink(
            label="First parent link",
            leftSection=get_icon(icon="tabler:gauge"),
            childrenOffset=28,
            children=[
                dmc.NavLink(label="First child link"),
                dmc.NavLink(label="Second child link"),
                dmc.NavLink(
                    label="Nested parent link",
                    childrenOffset=28,
                    children=[
                        dmc.NavLink(label="First child link"),
                        dmc.NavLink(label="Second child link"),
                        dmc.NavLink(label="Third child link"),
                    ],
                ),
            ],
        ),
        dmc.NavLink(
            label="Second parent link",
            leftSection=get_icon(icon="tabler:fingerprint"),
            childrenOffset=28,
            opened=True,
            children=[
                dmc.NavLink(label="First child link"),
                dmc.NavLink(label="Second child link"),
                dmc.NavLink(label="Third child link"),
            ],
        ),
    ],
)



================================================
File: docs/notification/notification.md
================================================
---
name: Notification
description: DMC has an excellent Notifications System, which can be used to generate client side notifications.
endpoint: /components/notification
package: dash_mantine_components
category: Feedback
---

.. toc::

.. admonition::Note
    :color: red
    :icon: radix-icons:info-circled
    In order to show notifications in your apps, you need to add dmc.NotificationProvider() to your app layout.


### CSS Extensions

.. admonition::CSS Extensions
   :icon: radix-icons:info-circled
   :color: red

   Notifications require additional CSS styles.

The Chart components require an additional CSS stylesheet.  See the [Getting Started](/getting-started) section for more information.

Be sure to include:

```python
app = Dash(external_stylesheets=[dmc.styles.NOTIFICATIONS])
```

Or, if you want to include all optional stylesheets:
```python
app = Dash(external_stylesheets=dmc.styles.ALL)
```


### Simple Example

To enable the Notifications System, include the `dmc.NotificationProvider()` component anywhere in your app layout. 

The `dmc.Notification` is not like your conventional dash components. They are more like "instructions" than components. 
In order to show notifications in your app, just send these instructions as children to any div in your callbacks.

.. exec::docs.notification.simple

### Customizing Notifications

Use NotificationProvider to customize the positioning of your notification, auto close duration, etc.  In the example below, the
notification will display on the bottom left side of the screen rather than the default of bottom right.

```python
import dash_mantine_components as dmc

layout = dmc.MantineProvider(
    html.Div([
        dmc.NotificationProvider(position="bottom-left"),
        # children
    ])
)
```

### Updating Notifications

Each notification is identified with an `id`. In order to update/hide a notification, use this `id` along with the 
`action` prop.

.. exec::docs.notification.update

### Styles API

| Name        | Static selector                   | Description                                                |
|:------------|:----------------------------------|:-----------------------------------------------------------|
| root        | .mantine-Notification-root        | Root element                                               |
| loader      | .mantine-Notification-loader      | Loader component, displayed only when `loading`prop is set |
| icon        | .mantine-Notification-icon        | Icon component, displayed only when `icon` prop is set     |
| body        | .mantine-Notification-body        | Notification body, contains all other elements             |
| title       | .mantine-Notification-title       | Title element, displayed only when `title` prop is set     |
| description | .mantine-Notification-description | Description displayed below the title                      |
| closeButton | .mantine-Notification-closeButton | Close button element                                       |

### Keyword Arguments

#### NotificationProvider

.. kwargs::NotificationProvider

#### Notification

.. kwargs::Notification



================================================
File: docs/notification/simple.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback
from dash_iconify import DashIconify

"""
Add Notifications to your app layout.

app.layout = html.Div(
    [
        dmc.NotificationProvider(),
        html.Div(id="notifications-container"),
        dmc.Button("Show Notification", id="notify"),
    ]
)

"""

component = html.Div(
    [
        html.Div(id="notifications-container"),
        dmc.Button("Show Notification", id="notify"),
    ]
)


@callback(
    Output("notifications-container", "children"),
    Input("notify", "n_clicks"),
    prevent_initial_call=True,
)
def show(n_clicks):
    return dmc.Notification(
        title="Hey there!",
        id="simple-notify",
        action="show",
        message="Notifications in Dash, Awesome!",
        icon=DashIconify(icon="ic:round-celebration"),
    )



================================================
File: docs/notification/update.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback_context as ctx, callback
from dash.exceptions import PreventUpdate
from dash_iconify import DashIconify

component = html.Div(
    [
        html.Div(id="notify-container"),
        dmc.Group(
            children=[
                dmc.Button(
                    "Load Data",
                    id="show-notification",
                ),
                dmc.Button(
                    "Update",
                    id="update-notification",
                ),
            ],
        ),
    ],
)


@callback(
    Output("notify-container", "children"),
    Input("show-notification", "n_clicks"),
    Input("update-notification", "n_clicks"),
    prevent_initial_call=True,
)
def notify(nc1, nc2):
    if not ctx.triggered:
        raise PreventUpdate
    else:
        button_id = ctx.triggered_id
        if "show" in button_id:
            return dmc.Notification(
                id="my-notification",
                title="Process initiated",
                message="The process has started.",
                loading=True,
                color="orange",
                action="show",
                autoClose=False,
            )
        else:
            return dmc.Notification(
                id="my-notification",
                title="Data loaded",
                message="Notification closing in 2 seconds",
                color="green",
                loading=False,
                action="update",
                autoClose=2000,
                icon=DashIconify(icon="akar-icons:circle-check"),
            )



================================================
File: docs/numberformatter/numberformatter.md
================================================
---
name: NumberFormatter
description: Use the NumberFormatter component to format number with thousands/decimal separators and suffix/prefix
endpoint: /components/number-formatter
package: dash_mantine_components
category:  Data Display
---

.. toc::

### Simple Example

Use `NumberFormatter` to format numbers. It supports the same formatting related props as `NumberInput` component.

.. exec::docs.numberformatter.simple

### Prefix and suffix

Set `prefix` and `suffix` props to add given string to the start or end of the value:

.. exec::docs.numberformatter.prefix_suffix

### Keyword Arguments

#### NumberFormatter

.. kwargs::NumberFormatter



================================================
File: docs/numberformatter/prefix_suffix.py
================================================
from dash import html
import dash_mantine_components as dmc

component = html.Div([
    html.Div(["With prefix: ", dmc.NumberFormatter(value=100, prefix="$")]),
    html.Div(["With suffix: ", dmc.NumberFormatter(value=100, suffix=" RUB")]),
])



================================================
File: docs/numberformatter/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.NumberFormatter(prefix="$ ", value=1000000, thousandSeparator=True)



================================================
File: docs/numberinput/clamp.py
================================================
import dash_mantine_components as dmc

component = dmc.NumberInput(
    label="You cannot enter number less than 0 or greater than 100",
    placeholder="You cannot enter number less than 0 or greater than 100",
    clampBehavior="strict",
    min=0,
    max=100,
    w=450,
)



================================================
File: docs/numberinput/controls.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    [
        dmc.NumberInput(label="By default controls are visible", w=250),
        dmc.NumberInput(
            label="Hide controls", hideControls=True, w=250
        ),
        dmc.NumberInput(
            label="Disabled and hide controls",
            disabled=True,
            hideControls=True,
            w=250,
        ),
    ]
)



================================================
File: docs/numberinput/decimal_numbers.py
================================================
import dash_mantine_components as dmc

component = dmc.NumberInput(
    label="Decimal numbers are not allowed",
    placeholder="Do not enter decimal numbers",
    allowDecimal=False,
    w=250,
)



================================================
File: docs/numberinput/decimal_scale.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack([
    dmc.NumberInput(
        label="You can enter only 2 digits after decimal point",
        placeholder="Do not enter more than 2 decimals",
        decimalScale=2,
        w=250,
        mb="md"
    ),
    dmc.NumberInput(
        label="Number input with decimal steps",
        value=0.05,
        decimalScale=2,
        min=-1,
        step=0.05,
        max=1,
        w=250,
        mt="md"
    )
])




================================================
File: docs/numberinput/decimal_separator.py
================================================
import dash_mantine_components as dmc

component = dmc.NumberInput(
    label="Custom decimal separator",
    decimalSeparator=",",
    value=20.234,
    w=250,
)



================================================
File: docs/numberinput/disabled.py
================================================
import dash_mantine_components as dmc

component = dmc.NumberInput(disabled=True, label="Disabled input", placeholder="Disabled input", p="lg"),




================================================
File: docs/numberinput/fixed_decimal_scale.py
================================================
import dash_mantine_components as dmc

component = dmc.NumberInput(
    label="Always show 2 digits after decimal point",
    placeholder="Do not enter more than 2",
    decimalScale=2,
    fixedDecimalScale=True,
    value=2.2,
    w=250,
)



================================================
File: docs/numberinput/hold.py
================================================
import dash_mantine_components as dmc

component = dmc.NumberInput(
    label="Step on hold",
    description="Step the value when clicking and holding the arrows",
    stepHoldDelay=500,
    stepHoldInterval=100,
    value=0,
    w=250,
)



================================================
File: docs/numberinput/icon.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Stack([
    dmc.NumberInput(
        label="With left section",
        description="From 0 to infinity, in steps of 5",
        value=5,
        min=0,
        step=5,
        leftSection=DashIconify(icon="fa6-solid:weight-scale"),
        w=250,
    ),
    dmc.NumberInput(
        label="With right section",
        description="From 0 to infinity, in steps of 5",
        value=5,
        min=0,
        step=5,
        rightSection=DashIconify(icon="fa6-solid:weight-scale"),
        w=250,
    )
])




================================================
File: docs/numberinput/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-numberinput"

target = dmc.Center(
    dmc.NumberInput(
        label="Your age",
        placeholder="Your age",
        w=300,
        required=True,
        id=TARGET_ID,
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_text_input("placeholder", "Your age", placeholder="Placeholder")
configurator.add_text_input("label", "Your age", placeholder="Label")
configurator.add_text_input("description", "", placeholder="Description")
configurator.add_text_input("error", "", placeholder="Error")
configurator.add_select("variant", ["default", "filled", "unstyled"], "default")
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "sm")
configurator.add_switch("withAsterisk", True)
configurator.add_switch("disabled", False)
configurator.add_switch("hideControls", False)

component = configurator.panel



================================================
File: docs/numberinput/minmax.py
================================================
import dash_mantine_components as dmc

component = dmc.NumberInput(
    label="Enter value between 10 and 20",
    min=10,
    max=20,
    w=250,
)



================================================
File: docs/numberinput/negative.py
================================================
import dash_mantine_components as dmc

component = dmc.NumberInput(
    label="Negative numbers are not allowed",
    placeholder="Do not enter negative numbers",
    allowNegative=False,
    w=300,
)



================================================
File: docs/numberinput/numberinput.md
================================================
---
name: NumberInput
description: Use NumberInput to provide a field for entering numbers in your app with ability to set min, max and step.
endpoint: /components/numberinput
package: dash_mantine_components
category: Inputs
---

.. toc::

### Introduction

.. exec::docs.numberinput.interactive
    :code: false


### Value Type

The `value` prop in `NumberInput` can be either a string or a number. Generally, if the `value` can be represented as 
a number (e.g., 55, 1.28, -100), it will be treated as a number. However, there are specific cases where the value 
cannot be represented as a number and is instead treated as a string:

 - Empty State: An empty state is represented as an empty string (`''`). **To clear the value in a callback, use `''` instead of `None`.**
- Exceeding Safe Integer Limits: If the number is larger than [Number.MAX_SAFE_INTEGER](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER) 
or smaller than [Number.MIN_SAFE_INTEGER](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER),
it will be represented as a string (e.g., '90071992547409910').
- Multiple Zeros: Numbers that consist only of zeros or have trailing zeros are represented as strings (e.g., '0.', '0.0', '-0.00', etc.).


### min and max

Set `min` and `max` props to limit the input value:


.. exec::docs.numberinput.minmax

### Clamp behavior
By default, the `value` is clamped when the input is blurred. If you set `clampBehavior="strict"`, it will not be
possible to enter value outside of min/max range. Note that this option may cause issues if you have tight
`min` and `max`, for example `min=10` and `max=20`. If you need to disable value clamping entirely, set `clampBehavior="none"`.

.. exec::docs.numberinput.clamp

### Prefix and suffix
Set `prefix` and `suffix` props to add given string to the start or end of the input value:


.. exec::docs.numberinput.prefix_suffix

### Negative numbers
By default, negative numbers are allowed. Set `allowNegative=False` to allow only positive numbers.

.. exec::docs.numberinput.negative


### Decimal numbers
By default, decimal numbers are allowed. Set `allowDecimal=False` to allow only integers.

.. exec::docs.numberinput.decimal_numbers

### Decimal scale
`decimalScale` controls how many decimal places are allowed:

.. exec::docs.numberinput.decimal_scale

### Fixed decimal scale
Set `fixedDecimalScale=True` to always display fixed number of decimal places:


.. exec::docs.numberinput.fixed_decimal_scale

### Decimal separator
Set `decimalSeparator` to change decimal separator character:

.. exec::docs.numberinput.decimal_separator


### Thousand separator
Set `thousandSeparator` prop to separate thousands with a character. You can control
grouping logic with `thousandsGroupStyle`, it accepts: `thousand`, `lakh`, `wan`, `none` values.

.. exec::docs.numberinput.thousand_separator



### Left and right sections

You can use DashIconify to add icon to the NumberInput.

`NumberInput` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position 
inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

- `rightSection/leftSection` – components to render on the corresponding side of input
- `rightSectionWidth/leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component size prop.
- `rightSectionPointerEvents/leftSectionPointerEvents` – controls pointer-events property of the section. If you want to render a non-interactive element, set it to none to pass clicks through to the input.

.. exec::docs.numberinput.icon


### Increment/decrement on hold

Set `stepHoldDelay` and `stepHoldInterval` props to define behavior when increment/decrement controls are clicked and 
held.

.. exec::docs.numberinput.hold


### Remove controls

Controls are not rendered in these cases:

- `hideControls` prop is set to `True`
- Input is disabled
- `variant` prop is set to "unstyled"

.. exec::docs.numberinput.controls

### Disabled state

.. exec::docs.numberinput.disabled

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### NumberInput Selectors

| Selector    | Static selector                | Description                                      |
|-------------|--------------------------------|--------------------------------------------------|
| wrapper     | .mantine-NumberInput-wrapper   | Root element of the Input                        |
| input       | .mantine-NumberInput-input     | Input element                                    |
| section     | .mantine-NumberInput-section   | Left and right sections                          |
| root        | .mantine-NumberInput-root      | Root element                                     |
| label       | .mantine-NumberInput-label     | Label element                                    |
| required    | .mantine-NumberInput-required  | Required asterisk element, rendered inside label |
| description | .mantine-NumberInput-description | Description element                              |
| error       | .mantine-NumberInput-error     | Error element                                    |
| controls    | .mantine-NumberInput-controls  | Increment and decrement buttons wrapper          |
| control     | .mantine-NumberInput-control   | Increment and decrement buttons                  |

#### NumberInput CSS Variables

| Selector  | Variable            | Description                                 |
|-----------|----------------------|---------------------------------------------|
| controls  | --ni-chevron-size    | Controls width and height of the chevron icon |

#### NumberInput Data Attributes

| Selector | Attribute       | Value                               |
|----------|------------------|-------------------------------------|
| control  | data-direction   | "up" or "down" depending on control |


### Keyword Arguments

#### NumberInput

.. kwargs::NumberInput



================================================
File: docs/numberinput/prefix_suffix.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack([
    dmc.NumberInput(
        label="With prefix",
        placeholder="Dollars",
        prefix="$",
        value=100,
        w=250,
        mb="md"
    ),
    dmc.NumberInput(
        label="With suffix",
        placeholder="Percent",
        suffix="%",
        value=100,
        w=250,
        mt="md"
    ),
])




================================================
File: docs/numberinput/thousand_separator.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack([

    dmc.NumberInput(
        label="Thousands are separated with a comma",
        placeholder="Thousands are separated with a comma",
        thousandSeparator=",",
        value=1_000_000,
        w=400
    ),

    dmc.NumberInput(
        label="Thousands are separated with a space",
        placeholder="Thousands are separated with a space",
        thousandSeparator=" ",
        value=1_000_000,
        mt="md",
        w=400
    )
])




================================================
File: docs/pagination/boundaries.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    [
        dmc.Pagination(total=20, boundaries=1, value=10),
        dmc.Pagination(total=20, boundaries=2, value=10, my=15),
        dmc.Pagination(total=20, boundaries=3, value=10),
    ]
)



================================================
File: docs/pagination/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.Pagination(
    total=10,
    size="md",
    radius="sm",
    withControls=True,
    withEdges=False,
    value=1
)

configurator = Configurator(target)

configurator.add_colorpicker("color", "indigo")
configurator.add_slider("size", "md")
configurator.add_slider("radius", "sm")
configurator.add_switch("withControls", True)
configurator.add_switch("withEdges", False)

component = configurator.panel



================================================
File: docs/pagination/pagination.md
================================================
---
name: Pagination
description: Display active page and navigate between multiple pages
endpoint: /components/pagination
package: dash_mantine_components
category: Navigation
---

.. toc::

### Introduction

.. exec::docs.pagination.interactive
    :code: false

### Siblings

Control the number of active item siblings with `siblings` prop.

.. exec::docs.pagination.siblings

### Boundaries

Control the number of items displayed after previous(<) and before next(>) buttons with `boundaries` prop.

.. exec::docs.pagination.boundaries

### Hide pages controls
Set `withPages=False` to hide pages controls:


.. exec::docs.pagination.withpages


### Styles API

| Name    | Static selector             | Description                                               |
|:--------|:----------------------------|:----------------------------------------------------------|
| root    | .mantine-Pagination-root    | Root element                                              |
| control | .mantine-Pagination-control | Control element: items, next/previous, first/last buttons |
| dots    | .mantine-Pagination-dots    | Dots icon wrapper                                         |

### Keyword Arguments

#### Pagination

.. kwargs::Pagination



================================================
File: docs/pagination/siblings.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    [
        dmc.Pagination(total=20, siblings=1, value=10),
        dmc.Pagination(total=20, siblings=2, value=10, my=15),
        dmc.Pagination(total=20, siblings=3, value=10),
    ]
)



================================================
File: docs/pagination/withpages.py
================================================
from dash import  html, Output, Input, callback
import dash_mantine_components as dmc


limit = 10
total = 145
total_pages = (total + limit - 1) // limit

component = dmc.Group(
    justify="flex-end",
    children=[
        dmc.Text(id="message-withPages", size="sm"),
        dmc.Pagination(id="pagination-withPages", total=total_pages, value=1, withPages=False),
    ],
)


@callback(
    Output("message-withPages", "children"),
    Input("pagination-withPages", "value"),
)
def update_message(page):
    start = limit * (page - 1) + 1
    end = min(total, limit * page)
    return f"Showing {start} – {end} of {total}"




================================================
File: docs/paper/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.Paper(
    children=[
        dmc.Text(
            "Paper is the most basic ui component. Use it to create cards, dropdowns, "
            "modals and other components that require background with shadow "
        )
    ],
    radius="sm",
    p="lg",
    shadow="sm",
    withBorder=False,
)

configurator = Configurator(target)
configurator.add_slider("radius", "sm")
configurator.add_slider("p", "lg")
configurator.add_slider("shadow", "sm")
configurator.add_switch("withBorder", False)

component = configurator.panel



================================================
File: docs/paper/paper.md
================================================
---
name: Paper
description: Render white or dark background depending on color scheme with Paper component with border, shadow, etc.
endpoint: /components/paper
package: dash_mantine_components
category: Miscellaneous
---

.. toc::

### Introduction

Paper component renders white (or theme.colors.dark[7] for dark theme) background with shadow, border-radius and
padding from theme.

.. exec::docs.paper.interactive
    :code: false

### Shadow

```python
import dash_mantine_components as dmc

dmc.Paper(
    children=[],
    shadow="xs",
)
```

### Padding

```python
import dash_mantine_components as dmc

dmc.Paper(
    children=[],
    p="xs", # or p=10 for padding of 10px
)
```

### Radius

```python
import dash_mantine_components as dmc

dmc.Paper(
    children=[],
    radius="sm", # or p=10 for border-radius of 10px
)
```

### Styles API

| Name | Static selector     | Description  |
|:-----|:--------------------|:-------------|
| root | .mantine-Paper-root | Root element |

### Keyword Arguments

#### Paper

.. kwargs::Paper



================================================
File: docs/passwordinput/disabled.py
================================================
import dash_mantine_components as dmc

component = dmc.PasswordInput(
    label="Password",
    placeholder="Your password",
    w=200,
    disabled=True,
)



================================================
File: docs/passwordinput/error.py
================================================
import dash_mantine_components as dmc


component = dmc.Stack(
    [
        dmc.PasswordInput(
            label="Your password",
            placeholder="Your password",
            w=250,
            error=True,
        ),
        dmc.PasswordInput(
            label="Your password",
            placeholder="Your password",
            w=250,
            error="Invalid Password",
        ),
    ],
)



================================================
File: docs/passwordinput/icon.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.PasswordInput(
    label="Your password:",
    w=250,
    placeholder="Your password",
    leftSection=DashIconify(icon="bi:shield-lock"),
)



================================================
File: docs/passwordinput/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-password"

target = dmc.Center(
    dmc.PasswordInput(
        label="Enter your password",
        placeholder="Password",
        description="Password must include at least one letter, number and special character",
        required=True,
        w=250,
        id=TARGET_ID,
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_text_input("placeholder", "Password", **{"placeholder": "Placeholder"})
configurator.add_text_input("label", "Enter your password", **{"placeholder": "Label"})
configurator.add_text_input(
    "description",
    "Password must include at least one letter, number and special character",
    **{"placeholder": "Description"}
)
configurator.add_text_input("error", "", **{"placeholder": "Error"})
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "sm")
configurator.add_switch("required", True)

component = configurator.panel



================================================
File: docs/passwordinput/passwordinput.md
================================================
---
name: PasswordInput
description: Use PasswordInput to capture password from user with an option to toggle visibility.
endpoint: /components/passwordinput
package: dash_mantine_components
category: Inputs
---

.. toc::

### Introduction

Use PasswordInput when you need to capture password from user. Component provides an option to toggle password 
visibility, if you do not want this feature, use [TextInput](/components/textinput) component with `type='password'`.

.. exec::docs.passwordinput.interactive
    :code: false

### Invalid State and Error

Use `error` prop to convey an error with an error message and a red border around the input.

Note: Dash adds thick red outline to the input element with `:invalid` pseudo-class. This conflicts with Mantine. 
In order to correct this, just add the following css to your app.

```css
input:invalid {
    outline: none !important;
}
```

.. exec::docs.passwordinput.error

### Disabled State

Convey disabled input with `disabled` prop.

.. exec::docs.passwordinput.disabled

### With Icon

Add icon to the left side of the input.

.. exec::docs.passwordinput.icon

### Styles API

| Name             | Static selector                         | Description                                      |
|:-----------------|:----------------------------------------|:-------------------------------------------------|
| wrapper          | .mantine-PasswordInput-wrapper          | Root element of the Input                        |
| input            | .mantine-PasswordInput-input            | Input element                                    |
| section          | .mantine-PasswordInput-section          | Left and right sections                          |
| root             | .mantine-PasswordInput-root             | Root element                                     |
| label            | .mantine-PasswordInput-label            | Label element                                    |
| required         | .mantine-PasswordInput-required         | Required asterisk element, rendered inside label |
| description      | .mantine-PasswordInput-description      | Description element                              |
| error            | .mantine-PasswordInput-error            | Error element                                    |
| innerInput       | .mantine-PasswordInput-innerInput       | Actual input element                             |
| visibilityToggle | .mantine-PasswordInput-visibilityToggle | Visibility toggle button                         |

### Keyword Arguments

#### PasswordInput

.. kwargs::PasswordInput



================================================
File: docs/piechart/angle.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.PieChart(data=data, startAngle=180, endAngle=0)



================================================
File: docs/piechart/clickdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data

component = dmc.Stack(
    [
        dmc.PieChart(
            id="figure-piechart",
            data=data,
        ),
        dmc.Text(id="clickdata-piechart1"),
        dmc.Text(id="clickdata-piechart2"),
    ]
)


@callback(
    Output("clickdata-piechart1", "children"),
    Output("clickdata-piechart2", "children"),
    Input("figure-piechart", "clickData"),
    Input("figure-piechart", "clickSeriesName"),
)
def update(data, name):
    return f"clickData:  {data}", f"clickSeriesName: {name}"



================================================
File: docs/piechart/data.py
================================================
data = [
    {"name": "USA", "value": 400, "color": "indigo.6"},
    {"name": "India", "value": 300, "color": "yellow.6"},
    {"name": "Japan", "value": 100, "color": "teal.6"},
    {"name": "Other", "value": 200, "color": "gray.6"},
]



================================================
File: docs/piechart/enabletooltip.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.PieChart(data=data, withTooltip=True)



================================================
File: docs/piechart/hoverdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data

component = dmc.Stack(
    [
        dmc.PieChart(
            id="figure-piechart-hover",
            data=data,
        ),
        dmc.Text(id="hoverdata-piechart1"),
        dmc.Text(id="hoverdata-piechart2"),
    ]
)


@callback(
    Output("hoverdata-piechart1", "children"),
    Output("hoverdata-piechart2", "children"),
    Input("figure-piechart-hover", "hoverData"),
    Input("figure-piechart-hover", "hoverSeriesName"),
)
def update(data, name):
    return f"hoverData:  {data}", f"hoverSeriesName: {name}"



================================================
File: docs/piechart/interactive.py
================================================
import dash_mantine_components as dmc
from .data import data
from lib.configurator import Configurator

target = dmc.PieChart(
    data=data,
)

configurator = Configurator(target)


configurator.add_switch("withLabels", True)
configurator.add_switch("withLabelsLine", False)
configurator.add_segmented_control("labelsPosition", ["inside", "outside"], "outside")
configurator.add_segmented_control("labelsType", ["value", "percent"], "value")
configurator.add_number_slider("size", 160, min=80, max=300)
configurator.add_number_slider("strokeWidth", 0, min=0, max=5)

component = configurator.panel



================================================
File: docs/piechart/pie.md
================================================
---
name: PieChart
description: Pie chart component
endpoint: /components/piechart
package: dash_mantine_components
category: Charts
---

.. toc::

### Introduction

PieChart is based on [PieChart recharts](https://recharts.org/en-US/api/PieChart) component:

.. exec::docs.piechart.interactive
    :code: false

### Usage

.. exec::docs.piechart.usage

### Data
Here is the data imported for the examples on this page:

```python

data = [
  { "name": "USA", "value": 400, "color": "indigo.6" },
  { "name": "India", "value": 300, "color": "yellow.6" },
  { "name": "Japan", "value": 100, "color": "teal.6" },
  { "name": "Other", "value": 200, "color": "gray.6" }
]
```

### Segment labels

Set `withLabels` prop to display labels next to each segment. Use `labelPosition` prop to control the position of labels
relative to the corresponding segment. Note that if your chart has a lot of segments and labelPosition="inside" is
set, labels might overlap. In this case, use labelPosition="outside".

.. exec::docs.piechart.segmentlabels
    :code: false

```python
import dash_mantine_components as dmc
from .data import data

dmc.PieChart(
    data=data,
    withLabelsLine=True,
    labelsPosition="inside",
    labelsType="percent",
    withLabels=True,
)
```

### Size

Set `size` prop to control width and height of the chart. Note that if `withLabels` and labelPosition="outside" prop
are set, the chart height is automatically increased by 80px to make room for labels. You can override this behavior
by setting `h` and `w` style prop.


.. exec::docs.piechart.size
    :code: false

```python
import dash_mantine_components as dmc
from .data import data

dmc.PieChart(
    data=data,
    size=275  
)
```
### Segment color

You can reference colors from theme the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. 
Any valid CSS color value is also accepted.

.. exec::docs.piechart.segmentcolor

### Enable Tooltip

To enable the tooltip, set `withTooltip` prop:

.. exec::docs.piechart.enabletooltip

### Tooltip data source

By default, the tooltip displays data for all segments when hovered over any segment. To display data only for the hovered segment, set tooltipDataSource="segment":

.. exec::docs.piechart.tooltipdatasource

### Start and end angle

Use `startAngle` and `endAngle` props to control the start and end angle of the chart. For example, to display a
half-circle chart, set `startAngle=180` and `endAngle=0`:

.. exec::docs.piechart.angle

### Segments stroke

Use `strokeWidth` prop to control the width of the stroke around each segment.

.. exec::docs.piechart.segmentstroke
    :code: false



```python
import dash_mantine_components as dmc
from .data import data

dmc.PieChart(
    data=data,
    strokeWidth=1
)
```

To change color of the stroke, use `strokeColor` prop. You can reference colors from theme the same way as in other
components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

```python
dmc.PieChart(
    data=data,
    strokeWidth=1.8,
    strokeColor="red.5"
)
```

By default, segments stroke color is the same as the background color of the body element
(`--mantine-color-body` CSS variable). If you want to change it depending on the color scheme, define CSS variable
and pass it to the `strokeColor` prop:


.. exec::docs.piechart.stroke

```css
.root {
  --card-bg: light-dark(var(--mantine-color-gray-1), var(--mantine-color-dark-5));

  background-color: var(--card-bg);
  padding: var(--mantine-spacing-md);
  border-radius: var(--mantine-radius-md);
}

```



### Pie animation
By default, the Recharts data animation is disabled. To enable and customize the animation, use `pieProps` to pass properties to the Recharts `Pie` component.


.. exec::docs.piechart.pie_animation


### clickData
Use the `clickData` property in a callback to retrieve data from the most recent click event. To get the name of the
clicked series, use the `clickSeriesName` property.
.. exec::docs.piechart.clickdata



### hoverData
Use the `hoverData` property in a callback to retrieve data from the most recent hover event. To get the name of the 
hovered series, use the `hoverSeriesName` property.

.. exec::docs.piechart.hoverdata

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### PieChart selectors

| Selector    | Static selector           | Description                             |
|:------------|:--------------------------|:----------------------------------------|
| root        | .mantine-PieChart-root    | Root element                            |


#### PieChart CSS variables

| Selector         | Variable               | Description                              |
|:-----------------|:-----------------------|:-----------------------------------------|
| root             | --chart-labels-color   | Controls color of the chart labels       |
|                  | --chart-size           | Controls size of the chart               |
|                  | --chart-stroke-color   | Controls color of the chart stroke       |

### Keyword Arguments

#### PieChart

.. kwargs::PieChart



================================================
File: docs/piechart/pie_animation.py
================================================
from random import randint
import dash_mantine_components as dmc
from dash import callback, Input, Output


def get_data(values):
    return [
        {"name": "A", "value": values[0], "color": "indigo.6"},
        {"name": "B", "value": values[1], "color": "yellow.6"},
        {"name": "C", "value": values[2], "color": "teal.6"},
        {"name": "C", "value": values[3], "color": "gray.6"},
    ]


component = dmc.Box(
    [
        dmc.Button("Update Chart", id="btn-piechart-animation", n_clicks=0, mb="md"),
        dmc.PieChart(
            id="piechart-animation",
            data=get_data([100, 0, 0, 0]),
            pieProps={"isAnimationActive": True},
        ),
    ]
)


@callback(
    Output("piechart-animation", "data"), Input("btn-piechart-animation", "n_clicks")
)
def update(n):
    if n % 2 == 0:
        return get_data([400, 300, 600, 100])
    return get_data([100, 0, 0, 0])



================================================
File: docs/piechart/segmentcolor.py
================================================
import dash_mantine_components as dmc

data = [
    {"name": "USA", "value": 400, "color": "blue"},
    {"name": "Other", "value": 200, "color": "gray.6"},
]

component = dmc.PieChart(data=data)



================================================
File: docs/piechart/segmentlabels.py
================================================
import dash_mantine_components as dmc
from lib.configurator import Configurator
from .data import data

target = dmc.PieChart(data=data, withLabels=True)

configurator = Configurator(target)

configurator.add_switch("withLabelsLine", True)
configurator.add_segmented_control("labelsPosition", ["inside", "outside"], "outside")
configurator.add_segmented_control("labelsType", ["value", "percent"], "value")

component = configurator.panel



================================================
File: docs/piechart/segmentstroke.py
================================================
import dash_mantine_components as dmc
from lib.configurator import Configurator
from .data import data

target = dmc.PieChart(data=data, strokeWidth=1)

configurator = Configurator(target)
configurator.add_number_slider("strokeWidth", 1, min=0, max=2)

component = configurator.panel



================================================
File: docs/piechart/size.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator
from .data import data

target = dmc.PieChart(data=data, size=160)

configurator = Configurator(target)
configurator.add_number_slider("size", 275, min=80, max=300)

component = configurator.panel



================================================
File: docs/piechart/stroke.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.PieChart(data=data, strokeColor="var(--card-bg)")



================================================
File: docs/piechart/tooltipdatasource.py
================================================
import dash_mantine_components as dmc
from dash import html
from .data import data

component = dmc.Group(
    [
        html.Div(
            [
                dmc.Text(
                    "Data only for hovered segment", fz="xs", mb="sm", ta="center"
                ),
                dmc.PieChart(
                    data=data,
                    withTooltip=True,
                    tooltipDataSource="segment",
                    mx="auto",
                ),
            ]
        ),
        html.Div(
            [
                dmc.Text("Data only for all segments", fz="xs", mb="sm", ta="center"),
                dmc.PieChart(
                    data=data,
                    withTooltip=True,
                    mx="auto",
                ),
            ]
        ),
    ],
    gap=50,
)



================================================
File: docs/piechart/usage.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.PieChart(data=data)



================================================
File: docs/pininput/accessibility.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    dmc.PinInput(oneTimeCode=True, **{"aria-label": "One Time Code"}), justify="center"
)



================================================
File: docs/pininput/disabled.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(dmc.PinInput(disabled=True), justify="center")



================================================
File: docs/pininput/error.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(dmc.PinInput(error=True), justify="center")



================================================
File: docs/pininput/length.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(dmc.PinInput(length=8), justify="center")



================================================
File: docs/pininput/masked.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(dmc.PinInput(mask=True), justify="center")



================================================
File: docs/pininput/onetime.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(dmc.PinInput(oneTimeCode=True), justify="center")



================================================
File: docs/pininput/pininput.md
================================================
---
name: PinInput
description: Capture pin code or one time password from the user.
endpoint: /components/pininput
package: dash_mantine_components
category: Inputs
---

.. toc::

### Simple Example

.. exec::docs.pininput.simple

### Length

Set `length` prop to control number of rendered fields.

.. exec::docs.pininput.length

### Type

By default, PinInput accepts letters and numbers. To allow numbers only, set `type="number"`:

.. exec::docs.pininput.type

### Placeholder
Set `placeholder` to change placeholder of all fields. Note that it only accepts strings.

.. exec::docs.pininput.placeholder

### Disabled state

.. exec::docs.pininput.disabled

### Error state

.. exec::docs.pininput.error

### Masked

.. exec::docs.pininput.masked

### One Time Code

Some operating systems expose last received SMS code to be used by applications like your keyboard.
If the current form input asks for this code, your keyboard adapts and proposes the code as keyboard-suggestion.
Prop `oneTimeCode` makes your input setting `autocomplete="one-time-code"` which allows using that feature.

.. exec::docs.pininput.onetime

### Accessibility

Inputs do not have associated labels, set aria-label to make component visible to screen reader:

.. exec::docs.pininput.accessibility

### Styles API

| Name     | Static selector            | Description        |
|:---------|:---------------------------|:-------------------|
| root     | .mantine-PinInput-root     | Root element       |
| pinInput | .mantine-PinInput-pinInput | Input item wrapper |
| input    | .mantine-PinInput-input    | Input element      |

### Keyword Arguments

#### PinInput

.. kwargs::PinInput



================================================
File: docs/pininput/placeholder.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(dmc.PinInput(placeholder="⊡"), justify="center")



================================================
File: docs/pininput/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(dmc.PinInput(), justify="center")



================================================
File: docs/pininput/type.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(dmc.PinInput(type="number"), justify="center")



================================================
File: docs/popover/focustrap.py
================================================
import dash_mantine_components as dmc

component = dmc.Popover(
    [
        dmc.PopoverTarget(dmc.Button("Toggle Popover")),
        dmc.PopoverDropdown(
            [
                dmc.TextInput(label="Name", placeholder="Name", size="xs"),
                dmc.TextInput(
                    label="Email", placeholder="john@doe.com", size="xs", mt="xs"
                ),
            ]
        ),
    ],
    width=300,
    position="bottom",
    withArrow=True,
    trapFocus=True,
    shadow="md",
)



================================================
File: docs/popover/inline.py
================================================
import dash_mantine_components as dmc

component = dmc.Flex(
    [
        "Here is some text with",
        dmc.Popover(
            [
                dmc.PopoverTarget(dmc.Mark(" an inline popover ")),
                dmc.PopoverDropdown(" more info"),
            ],
            middlewares={"flip": True, "shift": True, "inline": True},
        ),
        "and more text after.",
    ],
    direction="row",
    gap="xs",
)



================================================
File: docs/popover/interactive.py
================================================
"""
Note - this isn't working quite right.  arrowPosition and arrowOffset doesn't work.
       might have something to do with how the type is defined?
"""

import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-popover-arrow"

target = dmc.Center(
    dmc.Popover(
        [
            dmc.PopoverTarget(dmc.Button("Toggle Popover")),
            dmc.PopoverDropdown(dmc.Text("Arrow position can be changed for *-start and *-end positions")),
        ],
        width=200,
        position="bottom",
        withArrow=True,
        shadow="md",
        opened=True,
        id=TARGET_ID
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_segmented_control("arrowPosition", ["center", "side"], "side")
configurator.add_number_slider("arrowOffset", value=6, max=50)
configurator.add_number_slider("arrowSize", value=12, max=12)
configurator.add_number_slider("arrowRadius", value=0, max=10)
configurator.add_switch("opened", checked=True)

component = configurator.panel



================================================
File: docs/popover/overlay.py
================================================
import dash_mantine_components as dmc

component = dmc.Popover(
    [
        dmc.PopoverTarget(dmc.Button("Toggle Popover")),
        dmc.PopoverDropdown(dmc.Text("This popover is opened on button click")),
    ],
    width=200,
    position="bottom",
    withArrow=True,
    shadow="md",
    withOverlay=True,
    overlayProps={"zIndex": 10000, "blur": '8px'},
    zIndex=10001
)



================================================
File: docs/popover/popover.md
================================================
---
name: Popover
description: Display popover section relative to given target element.
endpoint: /components/popover
package: dash_mantine_components
category: Overlay
---

.. toc::

### Simple Example

.. exec::docs.popover.simple

### Popover Target

Any component you specify in dmc.PopoverTarget is wrapped by a dmc.Box component under the hood. So adding a margin
to your target component will also move the dropdown away. In order to prevent this, add margin to the wrapper component
using the prop `boxWrapperProps` in dmc.PopoverTarget.

### Focus Trap

If you need to use any interactive elements within Popover, set `trapFocus` prop:

.. exec::docs.popover.focustrap

### Inline elements

Enable inline middleware to use Popover with inline elements.

.. exec::docs.popover.inline


### Same width

Set w="target" prop to make Popover dropdown take the same width as target element.
.. exec::docs.popover.same-width

### With overlay
Set `withOverlay` prop to add overlay behind the dropdown. You can pass additional configuration to `Overlay` component with `overlayProps` prop:

.. exec::docs.popover.overlay


### Styles API

#### Popover Selectors

| Selector  | Static selector             | Description          |
|-----------|------------------------------|----------------------|
| dropdown  | .mantine-Popover-dropdown    | Dropdown element     |
| arrow     | .mantine-Popover-arrow       | Dropdown arrow       |
| overlay   | .mantine-Popover-overlay     | Overlay element      |


#### Popover CSS Variables

| Selector  | Variable           | Description                    |
|-----------|--------------------|--------------------------------|
| dropdown  | --popover-radius   | Controls dropdown border-radius |
|           | --popover-shadow   | Controls dropdown box-shadow    |


#### Popover Data Attributes

| Selector  | Attribute       | Value                             |
|-----------|-----------------|-----------------------------------|
| dropdown  | data-position   | Value of floating UI dropdown position |


### Keyword Arguments

#### Popover

.. kwargs::Popover

#### PopoverTarget

.. kwargs::PopoverTarget

#### PopoverDropdown

.. kwargs::PopoverDropdown



================================================
File: docs/popover/same-width.py
================================================
import dash_mantine_components as dmc

component = dmc.Popover(
    [
        dmc.PopoverTarget(dmc.Button("Toggle Popover", w=200)),
        dmc.PopoverDropdown(
            dmc.Text(
                "This popover has same width as target, it is useful when you are building input dropdowns"
            )
        ),
    ],
    width="target",
    position="bottom",
    withArrow=True,
    shadow="md",
)



================================================
File: docs/popover/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Popover(
    [
        dmc.PopoverTarget(dmc.Button("Toggle Popover")),
        dmc.PopoverDropdown(dmc.Text("This popover is opened on button click")),
    ],
    width=200,
    position="bottom",
    withArrow=True,
    shadow="md",
)



================================================
File: docs/progress/floatingtooltip.py
================================================
import dash_mantine_components as dmc

component = dmc.ProgressRoot(
    [
        dmc.FloatingTooltip(
            dmc.ProgressSection(
                dmc.ProgressLabel("Documents"),
                value=33,
                color="cyan",
            ),
            label="Documents – 33Gb",
            boxWrapperProps={"display": "contents"},
        ),
        dmc.FloatingTooltip(
            dmc.ProgressSection(
                dmc.ProgressLabel("Photos"),
                value=28,
                color="pink",
            ),
            label="Photos – 28Gb",
            boxWrapperProps={"display": "contents"},
        ),
        dmc.FloatingTooltip(
            dmc.ProgressSection(
                dmc.ProgressLabel("Other"),
                value=25,
                color="orange",
            ),
            label="Other – 15Gb",
            boxWrapperProps={"display": "contents"},
        ),
    ],
    size=40,
)



================================================
File: docs/progress/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.Progress(radius="sm", size="md", value=69)

configurator = Configurator(target)

configurator.add_colorpicker("color", "indigo")
configurator.add_slider("size", "lg")
configurator.add_slider("radius", "sm")
configurator.add_number_input("value", 69, **{"min": 0, "max": 100, "step": 10})
configurator.add_switch("striped", False)
configurator.add_switch("animated", False)

component = configurator.panel



================================================
File: docs/progress/progress.md
================================================
---
name: Progress
description: Use the Progress component to give feedback to the user about the status of a task with label, sections, etc.
endpoint: /components/progress
package: dash_mantine_components
category: Feedback
---

.. toc::

### Introduction

.. exec::docs.progress.interactive
    :code: false

### Simple Example

Progress component has one required prop: `value` - filled bar width in %. You can change bar color by passing `color`
prop (by default theme.primaryColor will be used).

.. exec::docs.progress.simple

### Size

`size` controls progress bar height. Progress has predefined sizes: xs, sm, etc.
Alternatively, you can use a number to set height in px.

```python
import dash_mantine_components as dmc

dmc.Progress(size="sm")

dmc.Progress(size=20)
```

### Radius

Radius controls border-radius of body and filled part.

```python
import dash_mantine_components as dmc

dmc.Progress(radius="lg")

dmc.Progress(radius=10)
```

### Multiple sections

Multiple sections can be displayed instead of just one single bar.

.. exec::docs.progress.sections


### Limitations - Tooltips

There is a limitation in Dash that makes it challenging to style the width of some tooltip children. For more details, see [GitHub #319.](https://github.com/snehilvj/dash-mantine-components/issues/319)

Tooltip children are wrapped in a `Box` with a default style of `{'width': 'fit-content'}`, which may override the width defined in the children. To work around this, you can set the width using `boxWrapperProps`.

`boxWrapperProps` is a dictionary of style properties passed to the `Box` that wraps the tooltip children.

#### With Tooltip

In this example, the width of the `ProgressSection` is set to 100%, and the width of each section is defined using the `boxWrapperProps`.


.. exec::docs.progress.tooltip

#### With FloatingTooltip

Another even better workaround is to use `FloatingTooltips`.  In this case, set `boxWrapperProps={'display': 'contents'}`


.. exec::docs.progress.floatingtooltip


### Styles API

| Name    | Static selector           | Description                     |
|:--------|:--------------------------|:--------------------------------|
| root    | .mantine-Progress-root    | Root element                    |
| section | .mantine-Progress-section | `Progress.Section` root element |
| label   | .mantine-Progress-label   | `Progress.Label` root element   |

### Keyword Arguments

#### Progress

.. kwargs::Progress



================================================
File: docs/progress/sections.py
================================================
import dash_mantine_components as dmc

component = dmc.ProgressRoot(
    [
        dmc.ProgressSection(dmc.ProgressLabel("Documents"), value=33, color="cyan"),
        dmc.ProgressSection(dmc.ProgressLabel("Photos"), value=28, color="pink"),
        dmc.ProgressSection(dmc.ProgressLabel("Others"), value=15, color="orange"),
    ],
    size="xl",
)



================================================
File: docs/progress/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Progress(value=26, color="pink")



================================================
File: docs/progress/tooltip.py
================================================
import dash_mantine_components as dmc

component = dmc.ProgressRoot(
    [
        dmc.Tooltip(
            dmc.ProgressSection(
                dmc.ProgressLabel("Documents"), value=33, color="cyan", w="100%"
            ),
            label="Documents – 33Gb",
            boxWrapperProps={"w": "33%"},
        ),
        dmc.Tooltip(
            dmc.ProgressSection(
                dmc.ProgressLabel("Photos"), value=28, color="pink", w="100%"
            ),
            label="Photos – 28Gb",
            boxWrapperProps={"w": "28%"},
        ),
        dmc.Tooltip(
            dmc.ProgressSection(
                dmc.ProgressLabel("Other"), value=25, color="orange", w="100%"
            ),
            label="Other – 15Gb",
            boxWrapperProps={"w": "25%"},
        ),
    ],
    size=40,
)



================================================
File: docs/radarchart/changecolor.py
================================================
import dash_mantine_components as dmc

data = [
    {"product": "Apples", "sales": 120},
    {"product": "Oranges", "sales": 98},
    {"product": "Tomatoes", "sales": 86},
    {"product": "Grapes", "sales": 99},
    {"product": "Bananas", "sales": 85},
    {"product": "Lemons", "sales": 65},
]

component = dmc.RadarChart(
    h=300,
    data=data,
    dataKey="product",
    series=[{"name": "sales", "color": "green", "strokeColor": "blue"}],
)



================================================
File: docs/radarchart/chartparts.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

data = [
    {"product": "Apples", "sales_january": 120, "sales_february": 100},
    {"product": "Oranges", "sales_january": 98, "sales_february": 90},
    {"product": "Tomatoes", "sales_january": 86, "sales_february": 70},
    {"product": "Grapes", "sales_january": 99, "sales_february": 80},
    {"product": "Bananas", "sales_january": 85, "sales_february": 120},
    {"product": "Lemons", "sales_january": 65, "sales_february": 150},
]

target = dmc.RadarChart(
    h=300,
    data=data,
    dataKey="product",
    series=[
        {"name": "sales_january", "color": "lime.4", "opacity": 0.1},
        {"name": "sales_february", "color": "cyan.4", "opacity": 0.1},
    ],
    withPolarGrid=True,
    withPolarAngleAxis=False,
    withPolarRadiusAxis=True,
)


configurator = Configurator(target)


configurator.add_switch("withPolarGrid", True)
configurator.add_switch("withPolarAngleAxis", True)
configurator.add_switch("withPolarRadiusAxis", True)

component = configurator.panel



================================================
File: docs/radarchart/multipleseries.py
================================================
import dash_mantine_components as dmc

data = [
    {"product": "Apples", "sales_january": 120, "sales_february": 100},
    {"product": "Oranges", "sales_january": 98, "sales_february": 90},
    {"product": "Tomatoes", "sales_january": 86, "sales_february": 70},
    {"product": "Grapes", "sales_january": 99, "sales_february": 80},
    {"product": "Bananas", "sales_january": 85, "sales_february": 120},
    {"product": "Lemons", "sales_january": 65, "sales_february": 150},
]

component = dmc.RadarChart(
    h=300,
    data=data,
    dataKey="product",
    withPolarRadiusAxis=True,
    series=[
        {"name": "sales_january", "color": "lime.4", "opacity": 0.1},
        {"name": "sales_february", "color": "cyan.4", "opacity": 0.1},
    ],
)



================================================
File: docs/radarchart/radar.md
================================================
---
name: RadarChart
description: Radar chart component
endpoint: /components/radarchart
package: dash_mantine_components
category: Charts
---

.. toc::

### Usage

RadarChart is based on recharts [RadarChart](https://recharts.org/en-US/api/RadarChart) component:

.. exec::docs.radarchart.usage

### Multiple series 

You can display multiple series on the same radar chart:

.. exec::docs.radarchart.multipleseries

### Change Color

You can reference colors from theme the same way as in other components, for example, `blue`, `red.5`, `orange.7`, etc. Any valid CSS color value is also accepted.

.. exec::docs.radarchart.changecolor

### Hide/show chart parts


.. exec::docs.radarchart.chartparts
    :code: false

```python
import dash_mantine_components as dmc

data = [
  {"product": "Apples", "sales_january": 120, "sales_february": 100},
  {"product": "Oranges", "sales_january": 98, "sales_february": 90},
  {"product": "Tomatoes", "sales_january": 86, "sales_february": 70},
  {"product": "Grapes", "sales_january": 99, "sales_february": 80},
  {"product": "Bananas", "sales_january": 85, "sales_february": 120},
  {"product": "Lemons", "sales_january": 65, "sales_february": 150}
]

component = dmc.RadarChart(
    h=300,
    data=data,    dataKey="product",

    series=[
      {"name": "sales_january", "color": "lime.4", "opacity": 0.1},
      {"name": "sales_february", "color": "cyan.4", "opacity": 0.1}
    ],
    withPolarGrid=True,
    withPolarAngleAxis=False,
    withPolarRadiusAxis=True,
)


```


### Rechart props

To pass props down to the underlying recharts components, use the following props:
- `radarProps` passed props to [RadarChart](https://recharts.org/en-US/api/RadarChart) component
- `radarChartProps` passed props to [RadarChart](https://recharts.org/en-US/api/RadarChart) component
- `polarGridProps` passed props to [PolarGrid](https://recharts.org/en-US/api/PolarGrid) component
- `polarAngleAxisProps` passed props to [PolarAngleAxis](https://recharts.org/en-US/api/PolarAngleAxis) component
- `polarRadiusAxisProps` passed props to [PolarRadiusAxis](https://recharts.org/en-US/api/PolarRadiusAxis) component

Example of passing props down to PolarRadiusAxis component:

.. exec::docs.radarchart.rechartprops


### Radar animation
By default, the Recharts data animation is disabled. To enable and customize the animation, use `radarProps` to pass properties to the Recharts `Radar` component.


.. exec::docs.radarchart.radar_animation


### Styles API


This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### RadarChart selectors

| Selector    | Static selector               | Description                                      |
|:------------|:------------------------------|:-------------------------------------------------|
| root        | .mantine-RadarChart-root      | Root element                                    |
| container   | .mantine-RadarChart-container | Recharts ResponsiveContainer component          |


#### RadarChart CSS variables

| Selector         | Variable             | Description                                   |
|:-----------------|:---------------------|:----------------------------------------------|
| root             | --chart-grid-color   | Controls color of the chart grid              |
|                  | --chart-text-color   | Controls color of all text elements in the chart|


### Keyword Arguments

#### RadarChart

.. kwargs::RadarChart



================================================
File: docs/radarchart/radar_animation.py
================================================
from random import randint
import dash_mantine_components as dmc
from dash import callback, Input, Output

component = dmc.Box(
    [
        dmc.Button("Update Chart", id="btn-radarchart-animation"),
        dmc.RadarChart(
            id="radarchart-animation",
            h=300,
            data=[{}],
            dataKey="product",
            withPolarRadiusAxis=True,
            radarProps={
                "isAnimationActive": True,
            },
            series=[{"name": "sales", "color": "blue.4", "opacity": 0.2}],
        ),
    ]
)


@callback(
    Output("radarchart-animation", "data"),
    Input("btn-radarchart-animation", "n_clicks"),
)
def update(n):
    return [
        {"product": "Apples", "sales": randint(20, 100)},
        {"product": "Oranges", "sales": randint(20, 100)},
        {"product": "Tomatoes", "sales": randint(20, 100)},
        {"product": "Grapes", "sales": randint(20, 100)},
        {"product": "Bananas", "sales": randint(20, 100)},
        {"product": "Lemons", "sales": randint(20, 100)},
    ]



================================================
File: docs/radarchart/rechartprops.py
================================================
import dash_mantine_components as dmc


data = [
    {"product": "Apples", "sales_january": 120, "sales_february": 100},
    {"product": "Oranges", "sales_january": 98, "sales_february": 90},
    {"product": "Tomatoes", "sales_january": 86, "sales_february": 70},
    {"product": "Grapes", "sales_january": 99, "sales_february": 80},
    {"product": "Bananas", "sales_january": 85, "sales_february": 120},
    {"product": "Lemons", "sales_january": 65, "sales_february": 150},
]

component = dmc.RadarChart(
    h=300,
    data=data,
    dataKey="product",
    withPolarRadiusAxis=True,
    polarRadiusAxisProps={"angle": 30},
    series=[
        {"name": "sales_january", "color": "lime.4", "opacity": 0.1},
        {"name": "sales_february", "color": "cyan.4", "opacity": 0.1},
    ],
)



================================================
File: docs/radarchart/usage.py
================================================
import dash_mantine_components as dmc

data = [
    {"product": "Apples", "sales": 120},
    {"product": "Oranges", "sales": 98},
    {"product": "Tomatoes", "sales": 86},
    {"product": "Grapes", "sales": 99},
    {"product": "Bananas", "sales": 85},
    {"product": "Lemons", "sales": 65},
]


component = dmc.RadarChart(
    h=300,
    data=data,
    dataKey="product",
    withPolarRadiusAxis=True,
    series=[{"name": "sales", "color": "blue.4", "opacity": 0.2}],
)



================================================
File: docs/radiogroup/callback.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, callback

data = [["react", "React"], ["ng", "Angular"], ["svelte", "Svelte"], ["vue", "Vue"]]

component = html.Div(
    [
        dmc.RadioGroup(
            children=dmc.Group([dmc.Radio(l, value=k) for k, l in data], my=10),
            id="radiogroup-simple",
            value="react",
            label="Select your favorite framework/library",
            size="sm",
            mb=10,
        ),
        dmc.Text(id="radio-output"),
    ]
)


@callback(Output("radio-output", "children"), Input("radiogroup-simple", "value"))
def choose_framework(value):
    return value



================================================
File: docs/radiogroup/color.py
================================================
import dash_mantine_components as dmc

data = [
    ["react", "React", "blue"],
    ["ng", "Angular", "orange"],
    ["svelte", "Svelte", "red"],
    ["dash", "Dash", "green"],
]

component = dmc.RadioGroup(
    children=dmc.Stack([dmc.Radio(l, value=k, color=c) for k, l, c in data]),
    value="ng",
    size="sm",
)



================================================
File: docs/radiogroup/deselectable.py
================================================
import dash_mantine_components as dmc
from dash import html

data = [["react", "React"], ["ng", "Angular"], ["svelte", "Svelte"], ["vue", "Vue"]]

component = html.Div(
    [
        dmc.RadioGroup(
            children=dmc.Group([dmc.Radio(l, value=k) for k, l in data], my=10),
            value="react",
            label="Select your favorite framework/library",
            size="sm",
            my=10,
            deselectable=True
        ),

    ]
)



================================================
File: docs/radiogroup/group.py
================================================
import dash_mantine_components as dmc
from dash import html

data = [["react", "React"], ["ng", "Angular"], ["svelte", "Svelte"], ["vue", "Vue"]]

component = html.Div(
    [
        dmc.RadioGroup(
            children=dmc.Group([dmc.Radio(l, value=k) for k, l in data], my=10),
            value="react",
            label="Select your favorite framework/library",
            size="sm",
            my=10,
        ),
        dmc.RadioGroup(
            children=dmc.Stack([dmc.Radio(l, value=k) for k, l in data], my=10),
            value="react",
            label="Select your favorite framework/library",
            size="sm",
            mt=10,
        ),
    ]
)



================================================
File: docs/radiogroup/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-radio"

target = dmc.Center(dmc.Radio(label="Radio item", id=TARGET_ID))

configurator = Configurator(target, target_id=TARGET_ID)

configurator.add_segmented_control("labelPosition", ["right", "left"], "right")
configurator.add_text_input("label", "Radio item", **{"placeholder": "Label"})
configurator.add_text_input("description", "", **{"placeholder": "Description"})
configurator.add_text_input("error", "", **{"placeholder": "Error"})
configurator.add_colorpicker("color", "indigo")
configurator.add_slider("size", "sm")
configurator.add_switch("disabled", False)

component = configurator.panel



================================================
File: docs/radiogroup/radiocard.py
================================================
import dash_mantine_components as dmc


component = dmc.RadioCard(
    withBorder=True,
    p="md",
    checked=True,
    children=[
        dmc.Center([
            dmc.RadioIndicator(),
            dmc.Text("RadioCard", size="xl", pl="sm"),
        ], inline=True),
    ]
)




================================================
File: docs/radiogroup/radiocardgroup.py
================================================

from dash import  Input, Output, callback
import dash_mantine_components as dmc

def make_radiocard(label, description):
    return dmc.RadioCard(
        withBorder=True,
        p="md",
        mt="md",
        className="checkboxcard-root",
        value=label,
        children=[
            dmc.Group([
                dmc.RadioIndicator(),
                dmc.Box([
                    dmc.Text(label, lh="1.3", fz="md", fw="bold" ),
                    dmc.Text(description, size="sm", c="dimmed"),
                ])
            ], wrap="nowrap", align="flex-start"),
        ]
    )


component = dmc.Box([
    dmc.RadioGroup(
        id="radiocard-group",
        label= "RadioGroup label",
        value="RadioCard 1",
        description="This is a RadioGroup description",
        deselectable=True,
        children=[
            make_radiocard(f"RadioCard {i}", f"RadioCard description {i}")
            for i in range(1, 5)
        ]
    ),
    dmc.Box(id="radio-group-out"),
])


@callback(
    Output("radiocard-group-out", "children"),
    Input("radiocard-group", "value")
)
def update(checked):
   return f"Selected: {checked}"



================================================
File: docs/radiogroup/radiogroup.md
================================================
---
name: RadioGroup
description: RadioGroup component gives user radio inputs to allow only one selection from a small set of options.
endpoint: /components/radiogroup
package: dash_mantine_components
category: Inputs
---

.. toc::

### Simple Usage

Use the `value` prop for callbacks.

.. exec::docs.radiogroup.callback

### Customizing Radio

Each Radio item in a RadioGroup can be customized. The Radio component is a wrapper for input type radio.  Use Stack or Group to arrange multiple Radio items

.. exec::docs.radiogroup.interactive
    :code: false

### Color

In a RadioGroup component, the color property can be customized at the individual Radio level.

.. exec::docs.radiogroup.color

### Size

You can set the size of all the Radio items by using the `size` prop in the RadioGroup component.  Use one of xs, sm, md, lg and xl.

.. exec::docs.radiogroup.size

### Group or Stack

In a RadioGroup component, the Radio items can be arranged by using the Group or Stack components.

.. exec::docs.radiogroup.group


### Deselectable RadioGroup

To enable deselecting a radio chip, set `deselectable=True`

.. exec::docs.radiogroup.deselectable


### RadioIndicator component

`RadioIndicator` looks exactly the same as `Radio` component, but it does not have any semantic meaning, it's just a 
visual representation of radio state. You can use it in any place where you need to display radio state without any 
interaction related to the indicator. For example, it is useful in cards based on buttons, trees, etc.

> Note that `RadioIndicator` cannot be focused or selected with keyboard. It is not accessible and should not be used as
a replacement for Radio component.

.. exec::docs.radiogroup.radioindicator


### RadioCard component

RadioCard component can be used as a replacement for `Radio` to build custom cards/buttons/other things that work as
radios. The root element of the component has `role="radio"` attribute, it is accessible by default and supports the
same keyboard interactions as `input[type="radio"]`.


.. exec::docs.radiogroup.radiocard



### RadioCard with RadioGroup

You can use `RadioCard` with `RadioGroup` the same way as `Radio` component.

Note - do not set the `checked` prop in the `RadioIndicator` component otherwise the `RadioIndicator` will not be updated.
This example also shows how to add hover styles

.. exec::docs.radiogroup.radiocardgroup
    :code: false

.. sourcetabs::docs/radiogroup/radiocardgroup.py, assets/radiocard.css
    :defaultExpanded: false
    :withExpandedButton: true



### Styles API

#### Radio Selectors

| Selector       | Static selector              | Description                           |
|---------------|------------------------------|---------------------------------------|
| root          | .mantine-Radio-root          | Root element                         |
| radio         | .mantine-Radio-radio         | Input element (input[type="radio"])  |
| icon          | .mantine-Radio-icon          | Radio icon, used to display checked icon |
| inner         | .mantine-Radio-inner         | Wrapper for icon and input           |
| body          | .mantine-Radio-body          | Input body, contains all other elements |
| labelWrapper  | .mantine-Radio-labelWrapper  | Contains label, description, and error |
| label         | .mantine-Radio-label         | Label element                        |
| description   | .mantine-Radio-description   | Description displayed below the label |
| error         | .mantine-Radio-error         | Error message displayed below the label |

#### Radio CSS Variables

| Selector | Variable           | Description                                |
|----------|-------------------|--------------------------------------------|
| root     | --radio-color     | Controls checked radio background-color   |
|          | --radio-radius    | Controls radio border-radius              |
|          | --radio-size      | Controls radio width and height           |
|          | --radio-icon-color | Controls radio icon color                 |
|          | --radio-icon-size  | Controls radio icon width and height      |

#### Radio Data Attributes

| Selector | Attribute           | Condition         | Value |
|----------|--------------------|------------------|-------|
| radio    | data-error         | `error` prop is set | –     |
| inner    | data-label-position | –                | Value of `labelPosition` prop |

#### RadioGroup Selectors

| Selector    | Static selector               | Description                         |
|------------|------------------------------|-------------------------------------|
| root       | .mantine-RadioGroup-root     | Root element                       |
| label      | .mantine-RadioGroup-label    | Label element                      |
| required   | .mantine-RadioGroup-required | Required asterisk element, rendered inside label |
| description | .mantine-RadioGroup-description | Description element                |
| error      | .mantine-RadioGroup-error    | Error element                      |

#### RadioIndicator Selectors

| Selector   | Static selector                   | Description   |
|------------|----------------------------------|---------------|
| indicator  | .mantine-RadioIndicator-indicator | Root element  |
| icon       | .mantine-RadioIndicator-icon     | Radio icon    |

#### RadioIndicator CSS Variables

| Selector   | Variable           | Description                                |
|------------|-------------------|--------------------------------------------|
| indicator  | --radio-color     | Controls checked radio background-color   |
|            | --radio-radius    | Controls radio border-radius              |
|            | --radio-size      | Controls radio width and height           |
|            | --radio-icon-color | Controls radio icon color                 |
|            | --radio-icon-size  | Controls radio icon width and height      |

#### RadioIndicator Data Attributes

| Selector   | Attribute     | Condition         |
|------------|-------------|------------------|
| indicator  | data-checked | `checked` prop is set |
| indicator  | data-disabled | `disabled` prop is set |

#### RadioCard Selectors

| Selector | Static selector          | Description   |
|----------|--------------------------|---------------|
| card     | .mantine-RadioCard-card  | Root element  |

#### RadioCard CSS Variables

| Selector | Variable      | Description                  |
|----------|-------------|------------------------------|
| card     | --card-radius | Controls card border-radius |

#### RadioCard Data Attributes

| Selector | Attribute       | Condition                  |
|----------|----------------|----------------------------|
| card     | data-checked    | `checked` prop is set      |
| card     | data-with-border | `withBorder` prop is set  |

### Keyword Arguments

#### RadioGroup

.. kwargs::RadioGroup

#### Radio

.. kwargs::Radio


#### RadioIndicator

.. kwargs::RadioIndicator


#### RadioCard

.. kwargs::RadioCard



================================================
File: docs/radiogroup/radioindicator.py
================================================

import dash_mantine_components as dmc

component = dmc.Group([
    dmc.RadioIndicator(),
    dmc.RadioIndicator(checked=True),
    dmc.RadioIndicator(disabled=True),
    dmc.RadioIndicator(disabled=True, checked=True)
])



================================================
File: docs/radiogroup/size.py
================================================
import dash_mantine_components as dmc
from dash import html

component = html.Div(
    [
        dmc.RadioGroup(
            children=dmc.Group(
                [dmc.Radio(i, value=i) for i in ["USA", "Canada", "France"]], my=10
            ),
            value="USA",
            label="Size Example - small",
            size="sm",
            mt=10,
        ),
        dmc.RadioGroup(
            children=dmc.Group(
                [dmc.Radio(i, value=i) for i in ["USA", "Canada", "France"]], my=10
            ),
            value="USA",
            label="Size Example - large",
            size="lg",
            mt=30,
        ),
    ]
)



================================================
File: docs/rating/fractions.py
================================================
import dash_mantine_components as dmc


component = dmc.Stack(
    [
        dmc.Group([dmc.Text("Fractions: 2"), dmc.Rating(fractions=2, value=1)]),
        dmc.Group([dmc.Text("Fractions: 3"), dmc.Rating(fractions=3, value=2.3333)]),
        dmc.Group([dmc.Text("Fractions: 4"), dmc.Rating(fractions=4, value=3.75)]),
    ]
)



================================================
File: docs/rating/icons.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Rating(
    value=1,
    emptySymbol=DashIconify(icon="tabler:sun"),
    fullSymbol=DashIconify(icon="tabler:moon"),
)



================================================
File: docs/rating/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-rating"

target = dmc.Group(dmc.Rating(value=2, count=5, id=TARGET_ID), justify="center")

configurator = Configurator(target, TARGET_ID)

configurator.add_colorpicker("color", "yellow")
configurator.add_slider("size", "sm")
configurator.add_number_input("count", 5, **{"min": 1, "max": 15})
configurator.add_number_input("value", 2, **{"min": 1, "max": 15})
configurator.add_switch("highlightSelectedOnly", False)

component = configurator.panel



================================================
File: docs/rating/rating.md
================================================
---
name: Rating
description: Pick and display rating
endpoint: /components/rating
package: dash_mantine_components
category: Inputs
---

.. toc::

### Introduction

.. exec::docs.rating.interactive
    :code: false

### Read only

.. exec::docs.rating.readonly

### Fractions

.. exec::docs.rating.fractions

### Custom Symbol

.. exec::docs.rating.icons

### Styles API

| Name        | Static selector             | Description                                 |
|:------------|:----------------------------|:--------------------------------------------|
| root        | .mantine-Rating-root        | Root element                                |
| starSymbol  | .mantine-Rating-starSymbol  | Default star icon                           |
| input       | .mantine-Rating-input       | Item input, hidden by default               |
| label       | .mantine-Rating-label       | Item label, used to display star icon       |
| symbolBody  | .mantine-Rating-symbolBody  | Wrapper around star icon for centering      |
| symbolGroup | .mantine-Rating-symbolGroup | Group of symbols, used to display fractions |

### Keyword Arguments

#### Rating

.. kwargs::Rating



================================================
File: docs/rating/readonly.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    children=dmc.Rating(fractions=2, value=3.5, readOnly=True), justify="center"
)



================================================
File: docs/responsive-styles/container-queries.py
================================================
from dash import html
import dash_mantine_components as dmc

component = html.Div(
    className="container-query-demo-root",
    children=html.Div(
        "Resize parent element to see container query in action",
        className="container-query-demo-child"
    )
)



================================================
File: docs/responsive-styles/hiddenfrom.py
================================================

import dash_mantine_components as dmc

component = dmc.Group(
    justify="center",
    children=[
        dmc.Button(
            "Hidden from sm",
            hiddenFrom="sm",
            color="orange"
        ),
        dmc.Button(
            "Visible from sm",
            visibleFrom="sm",
            color="cyan"
        ),
        dmc.Button(
            "Visible from md",
            visibleFrom="md",
            color="pink"
        )
    ]
)



================================================
File: docs/responsive-styles/mediaqueries.py
================================================

from dash import html

component = html.Div("Demo", className="media-query-demo")


================================================
File: docs/responsive-styles/responsive-styles.md
================================================
---
name: Responsive Styles
description: Responsive styles let you adjust the appearance of individual components, including font size, visibility, spacing, and colors, based on screen size.
endpoint: /responsive-styles
package: dash_mantine_components
category: Theming
order: 7  # sets order in navbar section
---

.. toc::

Note:  If you are looking for how to structure app’s layout responsively, use components like
[Grid](/components/grid) and [Group](/components/group), [Stack](/components/stack) and others. Check out the [GitHub Discussions](https://github.com/snehilvj/dash-mantine-components/discussions/468) 
for tips on selecting the right layout components.  

### Media Queries

Resize the browser window to see the color changing between blue and red.

.. exec::docs.responsive-styles.mediaqueries

```css

.media-query-demo  {
  background-color: var(--mantine-color-blue-filled);
  color: var(--mantine-color-white);
  padding: var(--mantine-spacing-md);
  text-align: center;

  @media (min-width: 48em) {
    background-color: var(--mantine-color-red-filled);
  }
}

```

When choosing between pixels (px) and rems (rem or em) for media queries, it's generally recommended to use rems because they
are relative to the user's font size, making your design more accessible and responsive to different browser zoom
levels; whereas pixels are absolute and won't adjust with font size changes.

Note that the rem unit is relative to the document's root element, while the em unit is relative to the immediate 
parent of the targeted element. In Mantine, breakpoints are expected to be set in em units to align with its contextual
scaling approach.

### Configure breakpoints
`theme.breakpoints` are used in all responsive Mantine components. Breakpoints are expected to be set in `em` units. You
can configure these values in the [Theme Object](/theme-object) in the `MantineProvider`:

You can customize the `breakpoints` defaults in the `theme`: 

```python
theme = {
    "breakpoints": {
        "xs": '30em',              # customize breakpoints here
        "sm": '48em',
        "md": '64em',
        "lg": '74em',
        "xl": '90em',
  },
}

dmc.MantineProvider(
    # your layout,
    theme=theme
)
```

### Default `theme.breakpoints` Values

| Breakpoint | Viewport width | Value in px |
|------------|----------------|-------------|
| xs         | 36em           | 576px       |
| sm         | 48em           | 768px       |
| md         | 62em           | 992px       |
| lg         | 75em           | 1200px      |
| xl         | 88em           | 1408px      |



### hiddenFrom and visibleFrom props
All Mantine components that have a root element support `hiddenFrom` and `visibleFrom` props. These props accept breakpoint
(`xs`, `sm`, `md`, `lg`, `xl`) and hide the component when viewport width is less than or greater than the specified breakpoint:


.. exec::docs.responsive-styles.hiddenfrom

### Hidden and visible from as classes
If you are building a component and want to use the same logic as in `hiddenFrom` and `visibleFrom` props but you do
not want to use Mantine components, you can use` mantine-hidden-from-{x}` and `mantine-visible-from-{x}` classes.

```python
html.Div("Hidden from md", className="mantine-hidden-from-md")
html.Div("visible from xl", className="mantine-visible-from-xl")

```

### Component size based on media query
Some components support `size` prop, which changes various aspects of component appearance. `size` prop is not
responsive – it is not possible to define different component sizes for different screen sizes. 

### Container queries
Container queries enable you to apply styles to an element based on the size of the element's container. If, for
example, a container has less space available in the surrounding context, you can hide certain elements or use 
smaller fonts. Container queries are supported in all modern browsers.

Note that CSS variables do not work in container queries and because of that rem scaling feature is not available. 
If you rely on this feature, it is better to define breakpoints in px units.


.. exec::docs.responsive-styles.container-queries

Add the following to a .css file in /assets

```css

.container-query-demo-root {
  min-width: 200px;
  max-width: 100%;
  min-height: 120px;
  container-type: inline-size;
  overflow: auto;
  resize: horizontal;
  border: solid;
  border-color: var(--mantine-color-default-border)
}

.container-query-demo-child {
  background-color: var(--mantine-color-dimmed);
  color: var(--mantine-color-white);
  padding: var(--mantine-spacing-md);

  @container (max-width: 500px) {
    background-color: var(--mantine-color-blue-filled);
  }

  @container (max-width: 300px) {
    background-color: var(--mantine-color-red-filled);
  }
}
```

### Responsive styles

You can pass a dictionary to style props to add responsive styles with [style props](/style-props). 
Note that responsive style props are less performant than regular style props, it is not recommended using them in large amounts.

.. exec::docs.style-props.responsive

Responsive values are calculated the following way:

- `base` value is used when none of the breakpoint values are provided
- `xs`, `sm`, `md`, `lg`, `xl` values are used when the viewport width is larger that the value of corresponding breakpoint specified in `dmc.DEFAULT_THEME`.

```python
import dash_mantine_components as dmc

dmc.Box(w={ "base": 320, "sm": 480, "lg": 640 })
```

In this case the element will have the following styles:

```css
/* Base styles added to element and then get overwritten with responsive values */
.element {
  width: 20rem;
}

/* 48em is theme.breakpoints.sm by default */
@media (min-width: 48em) {
  .element {
    width: 30rem;
  }
}

/* 75em is theme.breakpoints.lg by default */
@media (min-width: 75em) {
  .element {
    width: 40rem;
  }
}
```






================================================
File: docs/responsive-styles/size.py
================================================
from dash import html
import dash_mantine_components as dmc

# don't do this - It works in that the `size` changes based on screen size, but wont
# work in callbacks.  Plus you could have different user inputs showing on different
# screen sizes
component = html.Div([
    dmc.TextInput(size="xs", hiddenFrom="sm", label="My input", placeholder="My input"),
    dmc.TextInput(size="xl", visibleFrom="sm", label="My input", placeholder="My input"),
])




================================================
File: docs/ringprogress/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-ringprogress"

target = dmc.RingProgress(
    size=120,
    thickness=12,
    sections=[
        {"value": 40, "color": "red"},
        {"value": 15, "color": "yellow"},
        {"value": 15, "color": "violet"},
    ],
    id=TARGET_ID,
)

configurator = Configurator(target, TARGET_ID)

configurator.add_number_input("size", 120, **{"min": 60, "max": 400, "step": 10})
configurator.add_number_input("thickness", 12, **{"min": 0})
configurator.add_switch("roundCaps", False)

component = configurator.panel



================================================
File: docs/ringprogress/label.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Group(
    [
        dmc.RingProgress(
            id="ring-progress-label",
            sections=[{"value": 33, "color": "indigo"}],
            label=dmc.Text("33%", c="indigo", ta="center"),
        ),
        dmc.RingProgress(
            id="ring-progress-label2",
            sections=[
                {"value": 25, "color": "indigo"},
                {"value": 15, "color": "orange"},
            ],
            label=dmc.Text("App data usage", size="xs", ta="center"),
        ),
        dmc.RingProgress(
            id="ring-progress-label3",
            sections=[{"value": 60, "color": "green"}, {"value": 5, "color": "yellow"}],
            label=dmc.Center(
                dmc.ActionIcon(
                    color="teal",
                    variant="light",
                    radius="xl",
                    size="xl",
                    children=DashIconify(icon="tabler:check", height=40),
                )
            ),
        ),
    ]
)



================================================
File: docs/ringprogress/ringprogress.md
================================================
---
name: RingProgress
description: Use the RingProgress component to give feedback to the user about the status of a task with label, sections, etc.
endpoint: /components/ringprogress
package: dash_mantine_components
category: Feedback
---

.. toc::

### Simple Example

Set `sections` prop to an array of:
* `value` - number between 0 and 100 - amount of space filled by segment
* `color` - segment color from theme or any other css color value

.. exec::docs.ringprogress.simple

### Root Color

Use `rootColor` property to change the root color.

.. exec::docs.ringprogress.root

### Section Tooltips

Hover on the sections to see tooltips in action.

.. exec::docs.ringprogress.tooltip

### With label

.. exec::docs.ringprogress.label

### Size, Thickness And Rounded Caps

Use `size`, `thickness`, `roundCaps` props to customize the component.

```python
import dash_mantine_components as dmc

dmc.RingProgress(
    size=120,
    thickness=12,
    roundCaps=False,
    sections=[
        {"value": 40, "color": "red"},
        {"value": 15, "color": "yellow"},
        {"value": 15, "color": "violet"},
    ],
)
```

.. exec::docs.ringprogress.interactive
    :code: false

### Styles API

| Name  | Static selector             | Description    |
|:------|:----------------------------|:---------------|
| root  | .mantine-RingProgress-root  | Root element   |
| svg   | .mantine-RingProgress-svg   | svg element    |
| curve | .mantine-RingProgress-curve | circle element |
| label | .mantine-RingProgress-label | Label element  |

### Keyword Arguments

#### RingProgress

.. kwargs::RingProgress



================================================
File: docs/ringprogress/root.py
================================================
import dash_mantine_components as dmc

component = dmc.RingProgress(
    sections=[
        {"value": 40, "color": "yellow"},
    ],
    rootColor="red",
)



================================================
File: docs/ringprogress/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    [
        dmc.RingProgress(
            sections=[
                {"value": 40, "color": "cyan"},
                {"value": 15, "color": "orange"},
                {"value": 15, "color": "grape"},
            ]
        ),
        dmc.RingProgress(
            sections=[
                {"value": 40, "color": "#68b5e8"},
                {"value": 15, "color": "#6888e8"},
                {"value": 15, "color": "#8468e8"},
            ]
        ),
    ]
)



================================================
File: docs/ringprogress/tooltip.py
================================================
import dash_mantine_components as dmc

component = dmc.RingProgress(
    sections=[
        {"value": 14, "color": "yellow", "label": "Docs", "tooltip": "Docs - 14GB"},
        {"value": 17, "color": "red", "label": "Apps", "tooltip": "Apps - 17GB"},
        {"value": 69, "color": "violet", "label": "Other", "tooltip": "Other - 69GB"},
    ],
)



================================================
File: docs/scatterchart/clickdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data2

component = dmc.Group(
    [
        dmc.ScatterChart(
            id="figure-scatterchart",
            h=300,
            data=data2,
            dataKey={"x": "age", "y": "BMI"},
            xAxisLabel="Age",
            yAxisLabel="BMI",
        ),
        dmc.Text(id="clickdata-scatterchart1"),
        dmc.Text(id="clickdata-scatterchart2"),
    ]
)

@callback(
    Output("clickdata-scatterchart1", "children"),
    Output("clickdata-scatterchart2", "children"),
    Input("figure-scatterchart", "clickData"),
    Input("figure-scatterchart", "clickSeriesName"),
)
def update(data, name):
    return f"clickData:  {data}", f"clickSeriesName: {name}"





================================================
File: docs/scatterchart/customizedots.py
================================================
import dash_mantine_components as dmc
from .data import data1

component = dmc.ScatterChart(
    h=300,
    data=data1,
    dataKey={"x": "age", "y": "BMI"},
    xAxisLabel="Age",
    yAxisLabel="BMI",
)



================================================
File: docs/scatterchart/customtooltip.py
================================================
import dash_mantine_components as dmc
from .data import data1

component = dmc.ScatterChart(
    h=300,
    data=data1,
    dataKey={"x": "age", "y": "BMI"},
    xAxisLabel="Age",
    yAxisLabel="BMI",
    tooltipProps={"wrapperStyle": {"backgroundColor": "red", "color": "yellow"}},
)



================================================
File: docs/scatterchart/data.py
================================================
data1 = [
    {
        "color": "blue.5",
        "name": "Group 1",
        "data": [
            {"age": 25, "BMI": 20},
            {"age": 30, "BMI": 22},
            {"age": 35, "BMI": 18},
            {"age": 40, "BMI": 25},
            {"age": 45, "BMI": 30},
            {"age": 28, "BMI": 15},
            {"age": 22, "BMI": 12},
            {"age": 50, "BMI": 28},
            {"age": 32, "BMI": 19},
            {"age": 48, "BMI": 31},
            {"age": 26, "BMI": 24},
            {"age": 38, "BMI": 27},
            {"age": 42, "BMI": 29},
            {"age": 29, "BMI": 16},
            {"age": 34, "BMI": 23},
            {"age": 44, "BMI": 33},
            {"age": 23, "BMI": 14},
            {"age": 37, "BMI": 26},
            {"age": 49, "BMI": 34},
            {"age": 27, "BMI": 17},
            {"age": 41, "BMI": 32},
            {"age": 31, "BMI": 21},
            {"age": 46, "BMI": 35},
            {"age": 24, "BMI": 13},
            {"age": 33, "BMI": 22},
            {"age": 39, "BMI": 28},
            {"age": 47, "BMI": 30},
            {"age": 36, "BMI": 25},
            {"age": 43, "BMI": 29},
            {"age": 21, "BMI": 11},
        ],
    }
]

data2 = [
    {
        "color": "blue.5",
        "name": "Group 1",
        "data": [
            {"age": 25, "BMI": 20},
            {"age": 30, "BMI": 22},
            {"age": 35, "BMI": 18},
            {"age": 40, "BMI": 25},
            {"age": 45, "BMI": 30},
            {"age": 28, "BMI": 15},
            {"age": 22, "BMI": 12},
            {"age": 50, "BMI": 28},
            {"age": 32, "BMI": 19},
            {"age": 48, "BMI": 31},
            {"age": 26, "BMI": 24},
            {"age": 38, "BMI": 27},
            {"age": 42, "BMI": 29},
            {"age": 29, "BMI": 16},
            {"age": 34, "BMI": 23},
            {"age": 44, "BMI": 33},
            {"age": 23, "BMI": 14},
            {"age": 37, "BMI": 26},
            {"age": 49, "BMI": 34},
            {"age": 27, "BMI": 17},
            {"age": 41, "BMI": 32},
            {"age": 31, "BMI": 21},
            {"age": 46, "BMI": 35},
            {"age": 24, "BMI": 13},
            {"age": 33, "BMI": 22},
            {"age": 39, "BMI": 28},
            {"age": 47, "BMI": 30},
            {"age": 36, "BMI": 25},
            {"age": 43, "BMI": 29},
            {"age": 21, "BMI": 11},
        ],
    },
    {
        "color": "red.5",
        "name": "Group 2",
        "data": [
            {"age": 26, "BMI": 21},
            {"age": 31, "BMI": 24},
            {"age": 37, "BMI": 19},
            {"age": 42, "BMI": 27},
            {"age": 29, "BMI": 32},
            {"age": 35, "BMI": 18},
            {"age": 40, "BMI": 23},
            {"age": 45, "BMI": 30},
            {"age": 27, "BMI": 15},
            {"age": 33, "BMI": 20},
            {"age": 38, "BMI": 25},
            {"age": 43, "BMI": 29},
            {"age": 30, "BMI": 16},
            {"age": 36, "BMI": 22},
            {"age": 41, "BMI": 28},
            {"age": 46, "BMI": 33},
            {"age": 28, "BMI": 17},
            {"age": 34, "BMI": 22},
            {"age": 39, "BMI": 26},
            {"age": 44, "BMI": 31},
            {"age": 32, "BMI": 18},
            {"age": 38, "BMI": 23},
            {"age": 43, "BMI": 28},
            {"age": 48, "BMI": 35},
            {"age": 25, "BMI": 14},
            {"age": 31, "BMI": 20},
            {"age": 36, "BMI": 25},
            {"age": 41, "BMI": 30},
            {"age": 29, "BMI": 16},
        ],
    },
]


# TODO  Should the data series be more concise like this instead?

data1_concise = [
    {
        "color": "blue.5",
        "name": "Group 1",
        "data": [
            {"age": a, "BMI": b}
            for a, b in zip(
                [
                    25,
                    30,
                    35,
                    40,
                    45,
                    28,
                    22,
                    50,
                    32,
                    48,
                    26,
                    38,
                    42,
                    29,
                    34,
                    44,
                    23,
                    37,
                    49,
                    27,
                    41,
                    31,
                    46,
                    24,
                    33,
                    39,
                    47,
                    36,
                    43,
                    21,
                ],
                [
                    20,
                    22,
                    18,
                    25,
                    30,
                    15,
                    12,
                    28,
                    19,
                    31,
                    24,
                    27,
                    29,
                    16,
                    23,
                    33,
                    14,
                    26,
                    34,
                    17,
                    32,
                    21,
                    35,
                    13,
                    22,
                    28,
                    30,
                    25,
                    29,
                    11,
                ],
            )
        ],
    }
]

data2_concise = [
    {
        "color": "blue.5",
        "name": "Group 1",
        "data": [
            {"age": a, "BMI": b}
            for a, b in zip(
                [
                    25,
                    30,
                    35,
                    40,
                    45,
                    28,
                    22,
                    50,
                    32,
                    48,
                    26,
                    38,
                    42,
                    29,
                    34,
                    44,
                    23,
                    37,
                    49,
                    27,
                    41,
                    31,
                    46,
                    24,
                    33,
                    39,
                    47,
                    36,
                    43,
                    21,
                ],
                [
                    20,
                    22,
                    18,
                    25,
                    30,
                    15,
                    12,
                    28,
                    19,
                    31,
                    24,
                    27,
                    29,
                    16,
                    23,
                    33,
                    14,
                    26,
                    34,
                    17,
                    32,
                    21,
                    35,
                    13,
                    22,
                    28,
                    30,
                    25,
                    29,
                    11,
                ],
            )
        ],
    },
    {
        "color": "red.5",
        "name": "Group 2",
        "data": [
            {"age": a, "BMI": b}
            for a, b in zip(
                [
                    26,
                    31,
                    37,
                    42,
                    29,
                    35,
                    40,
                    45,
                    27,
                    33,
                    38,
                    43,
                    30,
                    36,
                    41,
                    46,
                    28,
                    34,
                    39,
                    44,
                    32,
                    38,
                    43,
                    48,
                    25,
                    31,
                    36,
                    41,
                    29,
                ],
                [
                    21,
                    24,
                    19,
                    27,
                    32,
                    18,
                    23,
                    30,
                    15,
                    20,
                    25,
                    29,
                    16,
                    22,
                    28,
                    33,
                    17,
                    22,
                    26,
                    31,
                    18,
                    23,
                    28,
                    35,
                    14,
                    20,
                    25,
                    30,
                    16,
                ],
            )
        ],
    },
]



================================================
File: docs/scatterchart/grid-text-color-light-dark.py
================================================
import dash_mantine_components as dmc

from .data import data1

component = dmc.ScatterChart(
    h=300,
    data=data1,
    dataKey={"x": "age", "y": "BMI"},
    tickLine="xy",
    xAxisLabel="Age",
    yAxisLabel="BMI",
    className="chart-grid-text-colors",
)



================================================
File: docs/scatterchart/hoverdata.py
================================================
from dash import callback, Input, Output
import dash_mantine_components as dmc
from .data import data2

component = dmc.Group(
    [
        dmc.ScatterChart(
            id="figure-scatterchart-hover",
            h=300,
            data=data2,
            dataKey={"x": "age", "y": "BMI"},
            xAxisLabel="Age",
            yAxisLabel="BMI",
            withTooltip=False,
        ),
        dmc.Text(id="hoverdata-scatterchart1"),
        dmc.Text(id="hoverdata-scatterchart2"),
    ]
)

@callback(
    Output("hoverdata-scatterchart1", "children"),
    Output("hoverdata-scatterchart2", "children"),
    Input("figure-scatterchart-hover", "hoverData"),
    Input("figure-scatterchart-hover", "hoverSeriesName"),
)
def update(data, name):
    return f"hoverData:  {data}", f"hoverSeriesName: {name}"





================================================
File: docs/scatterchart/legend.py
================================================
import dash_mantine_components as dmc
from .data import data2

component = dmc.ScatterChart(
    h=300,
    data=data2,
    dataKey={"x": "age", "y": "BMI"},
    xAxisLabel="Age",
    yAxisLabel="BMI",
    withLegend=True,
)



================================================
File: docs/scatterchart/legendposition.py
================================================
import dash_mantine_components as dmc
from .data import data2

component = dmc.ScatterChart(
    h=300,
    data=data2,
    dataKey={"x": "age", "y": "BMI"},
    xAxisLabel="Age",
    yAxisLabel="BMI",
    withLegend=True,
    legendProps={"verticalAlign": "bottom", "height": 20},
)



================================================
File: docs/scatterchart/multipleseries.py
================================================
import dash_mantine_components as dmc
from .data import data2

component = dmc.ScatterChart(
    h=300,
    data=data2,
    dataKey={"x": "age", "y": "BMI"},
    xAxisLabel="Age",
    yAxisLabel="BMI",
)



================================================
File: docs/scatterchart/point_labels.py
================================================
import dash_mantine_components as dmc
from .data import data1

component = dmc.ScatterChart(
    h=300,
    data=data1,
    dataKey={"x": "age", "y": "BMI"},
    tickLine="xy",
    xAxisLabel="Age",
    yAxisLabel="BMI",
    pointLabels="x",
)



================================================
File: docs/scatterchart/referencelines.py
================================================
import dash_mantine_components as dmc
from .data import data1

component = dmc.ScatterChart(
    h=300,
    data=data1,
    dataKey={"x": "age", "y": "BMI"},
    xAxisLabel="Age",
    yAxisLabel="BMI",
    referenceLines=[
        {"y": 14, "label": "Underweight ↓", "color": "red.7"},
        {"y": 19, "label": "Normal weight", "color": "teal.7"},
        {"y": 30, "label": "Overweight ↑", "color": "red.7"},
    ],
)



================================================
File: docs/scatterchart/removetooltip.py
================================================
import dash_mantine_components as dmc
from .data import data1

component = dmc.ScatterChart(
    h=300,
    data=data1,
    dataKey={"x": "age", "y": "BMI"},
    xAxisLabel="Age",
    yAxisLabel="BMI",
    withTooltip=False,
)



================================================
File: docs/scatterchart/scatter.md
================================================
---
name: ScatterChart
description: Scatter chart component
endpoint: /components/scatterchart
package: dash_mantine_components
category: Charts
---

.. toc::

### Usage

ScaltterChart is based on recharts [ScatterChart](https://recharts.org/en-US/api/ScatterChart) component:

.. exec::docs.scatterchart.usage


### Data

There are two datasets imported on this page.  A single series `data1` and a multiple series `data2`:

```python

data1 = [
    {
        "color": "blue.5",
        "name": "Group 1",
        "data": [
            {"age": 25, "BMI": 20},
            {"age": 30, "BMI": 22},
            {"age": 35, "BMI": 18},
            {"age": 40, "BMI": 25},
            {"age": 45, "BMI": 30},
            {"age": 28, "BMI": 15},
            {"age": 22, "BMI": 12},
            {"age": 50, "BMI": 28},
            {"age": 32, "BMI": 19},
            {"age": 48, "BMI": 31},
            {"age": 26, "BMI": 24},
            {"age": 38, "BMI": 27},
            {"age": 42, "BMI": 29},
            {"age": 29, "BMI": 16},
            {"age": 34, "BMI": 23},
            {"age": 44, "BMI": 33},
            {"age": 23, "BMI": 14},
            {"age": 37, "BMI": 26},
            {"age": 49, "BMI": 34},
            {"age": 27, "BMI": 17},
            {"age": 41, "BMI": 32},
            {"age": 31, "BMI": 21},
            {"age": 46, "BMI": 35},
            {"age": 24, "BMI": 13},
            {"age": 33, "BMI": 22},
            {"age": 39, "BMI": 28},
            {"age": 47, "BMI": 30},
            {"age": 36, "BMI": 25},
            {"age": 43, "BMI": 29},
            {"age": 21, "BMI": 11}
        ]
    }
]

```

```python

data2 = [
    {
        "color": "blue.5",
        "name": "Group 1",
        "data": [
            {"age": 25, "BMI": 20},
            {"age": 30, "BMI": 22},
            {"age": 35, "BMI": 18},
            {"age": 40, "BMI": 25},
            {"age": 45, "BMI": 30},
            {"age": 28, "BMI": 15},
            {"age": 22, "BMI": 12},
            {"age": 50, "BMI": 28},
            {"age": 32, "BMI": 19},
            {"age": 48, "BMI": 31},
            {"age": 26, "BMI": 24},
            {"age": 38, "BMI": 27},
            {"age": 42, "BMI": 29},
            {"age": 29, "BMI": 16},
            {"age": 34, "BMI": 23},
            {"age": 44, "BMI": 33},
            {"age": 23, "BMI": 14},
            {"age": 37, "BMI": 26},
            {"age": 49, "BMI": 34},
            {"age": 27, "BMI": 17},
            {"age": 41, "BMI": 32},
            {"age": 31, "BMI": 21},
            {"age": 46, "BMI": 35},
            {"age": 24, "BMI": 13},
            {"age": 33, "BMI": 22},
            {"age": 39, "BMI": 28},
            {"age": 47, "BMI": 30},
            {"age": 36, "BMI": 25},
            {"age": 43, "BMI": 29},
            {"age": 21, "BMI": 11}
        ]
    },
    {
        "color": "red.5",
        "name": "Group 2",
        "data": [
            {"age": 26, "BMI": 21},
            {"age": 31, "BMI": 24},
            {"age": 37, "BMI": 19},
            {"age": 42, "BMI": 27},
            {"age": 29, "BMI": 32},
            {"age": 35, "BMI": 18},
            {"age": 40, "BMI": 23},
            {"age": 45, "BMI": 30},
            {"age": 27, "BMI": 15},
            {"age": 33, "BMI": 20},
            {"age": 38, "BMI": 25},
            {"age": 43, "BMI": 29},
            {"age": 30, "BMI": 16},
            {"age": 36, "BMI": 22},
            {"age": 41, "BMI": 28},
            {"age": 46, "BMI": 33},
            {"age": 28, "BMI": 17},
            {"age": 34, "BMI": 22},
            {"age": 39, "BMI": 26},
            {"age": 44, "BMI": 31},
            {"age": 32, "BMI": 18},
            {"age": 38, "BMI": 23},
            {"age": 43, "BMI": 28},
            {"age": 48, "BMI": 35},
            {"age": 25, "BMI": 14},
            {"age": 31, "BMI": 20},
            {"age": 36, "BMI": 25},
            {"age": 41, "BMI": 30},
            {"age": 29, "BMI": 16}
        ]
    }
]

```

### Multiple Series


.. exec::docs.scatterchart.multipleseries


### Legend
To display chart legend, set `withLegend` prop. When one of the items in the legend is hovered, the corresponding data
series is highlighted in the chart.

.. exec::docs.scatterchart.legend

### Legend position
You can pass props down to recharts Legend component with `legendProps` prop. For example, setting the following will
render the legend at the bottom of the chart and set its height to 50px:
```python
legendProps={'verticalAlign': 'bottom', 'height': 50} 
```

.. exec::docs.scatterchart.legendposition


### X and Y axis props
Use `xAxisProps` and `yAxisProps` to pass props down to recharts `XAxis` and `YAxis` components. For example, these props can
be used to change orientation of axis:

.. exec::docs.scatterchart.xyaxis

### Point labels
Set `pointLabels` prop to `x` or `y` to display labels on data points for the corresponding axis:


.. exec::docs.scatterchart.point_labels

### Stroke dash array
Set `strokeDasharray` prop to control the stroke dash array of the grid and cursor lines. The value represent the
lengths of alternating dashes and gaps. For example, strokeDasharray="10 5" will render a dashed line with 10px dashes
and 5px gaps.

.. exec::docs.scatterchart.strokedasharray


### Grid and text colors
Use `--chart-grid-color` and `--chart-text-color` to change colors of grid lines and text within the chart. 
With CSS , you can change colors depending on color scheme.  Learn more in the Theming section under [Colors.](/colors#colors-in-light-and-dark-mode)



.. exec::docs.scatterchart.grid-text-color-light-dark
    :code: false


.. sourcetabs::docs/scatterchart/grid-text-color-light-dark.py, assets/examples/chart-grid-text-colors.css
    :defaultExpanded: true
    :withExpandedButton: true

If your application has only one color scheme, you can use `gridColor` and `textColor` props instead of CSS variables:

```python

dmc.ScatterChart(
    h=300,
    data=data1,
    dataKey={"x": "age", "y": "BMI"},
    tickLine="xy",
    xAxisLabel="Age",
    yAxisLabel="BMI",
    gridColor="gray.5",
    textColor = "gray.9",
)

```

### Units
Set `unit` prop to render a unit label next to the y-axis ticks and tooltip values:

.. exec::docs.scatterchart.units

### Tooltip labels
To customize labels displayed in the tooltip, use `labels` prop:

.. exec::docs.scatterchart.tooltiplabels


### Remove tooltip
To remove tooltip, set `withTooltip=False`. It also removes the cursor line and disables interactions with the chart.


.. exec::docs.scatterchart.removetooltip


### Tooltip animation
By default, tooltip animation is disabled. To enable it, set `tooltipAnimationDuration` prop to a number of
milliseconds to animate the tooltip position change.

.. exec::docs.scatterchart.tooltipanimation


### Points animation
By default, the Recharts data animation is disabled. To enable and customize the animation, use `scatterProps` to pass properties to the Recharts `Scatter` component.

.. exec::docs.scatterchart.scatter_animation

### Reference lines
Use `referenceLines` prop to render reference lines. Reference lines are always rendered behind the chart.

.. exec::docs.scatterchart.referencelines


### clickData
Use the `clickData` property in a callback to retrieve data from the most recent click event. To get the name of the
clicked series, use the `clickSeriesName` property.
.. exec::docs.scatterchart.clickdata



### hoverData
Use the `hoverData` property in a callback to retrieve data from the most recent hover event. To get the name of the 
hovered series, use the `hoverSeriesName` property.

.. exec::docs.scatterchart.hoverdata


### Styles API


This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### ScatterChart selectors

| Selector          | Static selector                  | Description                                     |
|-------------------|---------------------------------|-------------------------------------------------|
| root              | .mantine-ScatterChart-root      | Root element                                    |
| scatter           | .mantine-ScatterChart-scatter   | Recharts Scatter component                      |
| axis              | .mantine-ScatterChart-axis      | X and Y axis of the chart                       |
| container         | .mantine-ScatterChart-container | Recharts ResponsiveContainer component          |
| grid              | .mantine-ScatterChart-grid      | Recharts CartesianGrid component                |
| legend            | .mantine-ScatterChart-legend    | Legend root element                             |
| legendItem        | .mantine-ScatterChart-legendItem | Legend item representing data series          |
| legendItemColor   | .mantine-ScatterChart-legendItemColor | Legend item color                        |
| legendItemName    | .mantine-ScatterChart-legendItemName | Legend item name                          |
| tooltip           | .mantine-ScatterChart-tooltip   | Tooltip root element                            |
| tooltipBody       | .mantine-ScatterChart-tooltipBody | Tooltip wrapper around all items              |
| tooltipItem       | .mantine-ScatterChart-tooltipItem | Tooltip item representing data series        |
| tooltipItemBody   | .mantine-ScatterChart-tooltipItemBody | Tooltip item wrapper around item color and name |
| tooltipItemColor  | .mantine-ScatterChart-tooltipItemColor | Tooltip item color                         |
| tooltipItemName   | .mantine-ScatterChart-tooltipItemName | Tooltip item name                           |
| tooltipItemData   | .mantine-ScatterChart-tooltipItemData | Tooltip item data                           |
| tooltipLabel      | .mantine-ScatterChart-tooltipLabel | Label of the tooltip                           |
| referenceLine     | .mantine-ScatterChart-referenceLine | Reference line                                 |
| axisLabel         | .mantine-ScatterChart-axisLabel | X and Y axis labels                            |


#### ScatterChart CSS variables
| Selector       | Variable           | Description                              |
|----------------|--------------------|------------------------------------------|
| root           | --chart-grid-color | Controls color of the grid and cursor lines |
|                | --chart-text-color | Controls color of the axis labels         |


### Keyword Arguments

#### ScatterChart

.. kwargs::ScatterChart




================================================
File: docs/scatterchart/scatter_animation.py
================================================
from random import randint
import dash_mantine_components as dmc
from dash import callback, Input, Output

component = dmc.Box(
    [
        dmc.Button("Update Chart", id="btn-scatterchart-animation"),
        dmc.ScatterChart(
            h=300,
            data=[{"color": "blue.5", "name": "Group 1", "data": [{}]}],
            scatterProps={
                "isAnimationActive": True,
                "animationDuration": 500,
                "animationEasing": "ease-in-out",
                "animationBegin": 500,
            },
            dataKey={"x": "x", "y": "y"},
            xAxisLabel="X data",
            yAxisLabel="Y data",
            id="scatterchart-animation",
        ),
    ]
)


@callback(
    Output("scatterchart-animation", "data"),
    Input("btn-scatterchart-animation", "n_clicks"),
)
def update(n):
    return [
        {
            "color": "blue.5",
            "name": "Group 1",
            "data": [
                {"x": randint(1000, 4000), "y": randint(1000, 4000)} for _ in range(20)
            ],
        }
    ]



================================================
File: docs/scatterchart/strokedasharray.py
================================================
import dash_mantine_components as dmc
from .data import data1

component = dmc.ScatterChart(
    h=300,
    data=data1,
    dataKey={"x": "age", "y": "BMI"},
    xAxisLabel="Age",
    yAxisLabel="BMI",
    strokeDasharray="15, 15",
)



================================================
File: docs/scatterchart/tooltipanimation.py
================================================
import dash_mantine_components as dmc
from .data import data1

component = dmc.ScatterChart(
    h=300,
    data=data1,
    dataKey={"x": "age", "y": "BMI"},
    xAxisLabel="Age",
    yAxisLabel="BMI",
    tooltipAnimationDuration=200,
)



================================================
File: docs/scatterchart/tooltiplabels.py
================================================
import dash_mantine_components as dmc
from .data import data1

component = dmc.ScatterChart(
    h=350,
    data=data1,
    dataKey={"x": "age", "y": "BMI"},
    xAxisLabel="Age",
    yAxisLabel="BMI",
    labels={"x": "Age", "y": "Body Mass Index"},
)



================================================
File: docs/scatterchart/units.py
================================================
import dash_mantine_components as dmc

spending_data = [
    {
        "color": "cyan",
        "name": "Average monthly spending",
        "data": [
            {"age": a, "average_monthly_spending": b}
            for a, b in zip(
                [
                    25,
                    30,
                    35,
                    40,
                    45,
                    28,
                    22,
                    50,
                    32,
                    48,
                    26,
                    38,
                    42,
                    29,
                    34,
                    44,
                    23,
                    37,
                    49,
                    27,
                    41,
                    31,
                    46,
                    24,
                    33,
                    39,
                    47,
                    36,
                    43,
                    21,
                ],
                [
                    1400,
                    2100,
                    1800,
                    2400,
                    2300,
                    1600,
                    1200,
                    3200,
                    1900,
                    2700,
                    1700,
                    2200,
                    2600,
                    1500,
                    2000,
                    2500,
                    1300,
                    2100,
                    2900,
                    1600,
                    2500,
                    1800,
                    2700,
                    1400,
                    2100,
                    2400,
                    2800,
                    2200,
                    2600,
                    1100,
                ],
            )
        ],
    }
]

component = dmc.ScatterChart(
    h=300,
    data=spending_data,
    dataKey={"x": "age", "y": "average_monthly_spending"},
    yAxisProps={"domain": [800, 3500]},
    unit={"y": "$"},
    labels={"x": "Age", "y": "Spending"},
)



================================================
File: docs/scatterchart/usage.py
================================================
import dash_mantine_components as dmc
from .data import data1

component = dmc.ScatterChart(
    h=300,
    data=data1,
    dataKey={"x": "age", "y": "BMI"},
    xAxisLabel="Age",
    yAxisLabel="BMI",
)



================================================
File: docs/scatterchart/xyaxis.py
================================================
import dash_mantine_components as dmc
from .data import data1

component = dmc.ScatterChart(
    h=300,
    data=data1,
    dataKey={"x": "age", "y": "BMI"},
    tickLine="xy",
    yAxisProps={"tickMargin": 15, "orientation": "right"},
    xAxisProps={"tickMargin": 15, "orientation": "top"},
)



================================================
File: docs/scrollarea/horizontal.py
================================================
import dash_mantine_components as dmc

from docs.scrollarea.text import text

component = dmc.Center(
    dmc.ScrollArea(
        h=250,
        w=350,
        children=dmc.Paper(
            [dmc.Title("Charizard (Pokémon)", order=3), dmc.Text(text)], w=600
        ),
    ),
)



================================================
File: docs/scrollarea/interactive.py
================================================
import dash_mantine_components as dmc

from docs.scrollarea.text import text
from lib.configurator import Configurator

TARGET_ID = "interactive-scrollarea"

target = dmc.Center(
    dmc.ScrollArea(
        h=250,
        w=350,
        children=dmc.Paper([dmc.Title("Charizard (Pokémon)", order=3), dmc.Text(text)]),
        id=TARGET_ID,
    ),
)

configurator = Configurator(target, TARGET_ID)

configurator.add_select("type", ["auto", "scroll", "always", "never", "hover"], "hover")
configurator.add_number_input("scrollbarSize", 10, **{"min": 2, "max": 20, "step": 2})
configurator.add_number_input(
    "scrollHideDelay", 1000, **{"min": 0, "max": 4000, "step": 500}
)
configurator.add_switch("offsetScrollbars", False)

component = configurator.panel



================================================
File: docs/scrollarea/scrollarea.md
================================================
---
name: ScrollArea
description: Use the ScrollArea component to customize scrollbars.
endpoint: /components/scrollarea
package: dash_mantine_components
category: Miscellaneous
---

.. toc::

### Introduction

The ScrollArea component works well with light and dark color schemes and supports the following props:

- `type` defines scrollbars behavior:
    - `hover` - scrollbars are visible on hover
    - `scroll` - scrollbars are visible on scroll
    - `auto` - similar to overflow: auto - scrollbars are always visible when the content is overflowing
    - `always` - same as auto but scrollbars are always visible regardless of whether the content is overflowing
    - `never` - scrollbars are always hidden
- `offsetScrollbars` - offset scrollbars with padding
- `scrollbarSize` - scrollbar size, controls scrollbar and thumb width/height
- `scrollHideDelay` - delay in ms to hide scrollbars, applicable only when type is hover or scroll

This example has a vertical scroll bar. 

.. exec::docs.scrollarea.interactive
   :code: false

This is how the ScrollArea height and width is defined in the example above 

```python

html.Div(
    [
        dmc.Title("Charizard (Pokémon)", order=3),
        dmc.ScrollArea(
            h=250, w=350,
            children = dmc.Paper(dmc.Text(text), withBorder=True),        
        )
    ]
)
```
### Horizontal scrollbars

The horizontal scroll bar will be displayed when the content of the ScrollArea is wider than the ScrollArea.

.. exec::docs.scrollarea.horizontal

### Styles API


####  ScrollArea Selectors

| Selector  | Static selector               | Description    |
|-----------|-------------------------------|----------------|
| root      | .mantine-ScrollArea-root       | Root element   |
| viewport  | .mantine-ScrollArea-viewport   |                |
| scrollbar | .mantine-ScrollArea-scrollbar  |                |
| thumb     | .mantine-ScrollArea-thumb      |                |
| corner    | .mantine-ScrollArea-corner     |                |



#### ScrollArea CSS variables

| Selector | Variable                     | Description    |
|----------|------------------------------|----------------|
| root     | --scrollarea-scrollbar-size   | Scrollbar size |


#### ScrollArea data attributes

| Selector         | Attribute          | Condition                          | Value                               |
|------------------|--------------------|------------------------------------|-------------------------------------|
| scrollbar, corner| data-hidden         | `type="never"`                     | –                                   |
| corner           | data-hovered        | One of the scrollbars is hovered   | –                                   |
| scrollbar        | data-orientation    | –                                  | "horizontal" or "vertical" depending on scrollbar position |




### Keyword Arguments

#### ScrollArea

.. kwargs::ScrollArea



================================================
File: docs/scrollarea/text.py
================================================
text = """
Charizard description from Bulbapedia

Charizard is a draconic, bipedal Pokémon. It is primarily orange with a cream underside from the chest to the tip of 
its tail. It has a long neck, small blue eyes, slightly raised nostrils, and two horn-like structures protruding from 
the back of its rectangular head. There are two fangs visible in the upper jaw when its mouth is closed. Two large 
wings with blue-green undersides sprout from its back, and a horn-like appendage juts out from the top of the third 
joint of each wing. A single wing-finger is visible through the center of each wing membrane. Charizard's arms are 
short and skinny compared to its robust belly, and each limb has three white claws. It has stocky legs with 
cream-colored soles on each of its plantigrade feet. The tip of its long, tapering tail burns with a sizable flame. 
As Mega Charizard X, its body and legs are more physically fit, though its arms remain thin. Its skin turns black 
with a sky-blue underside and soles. Two spikes with blue tips curve upward from the front and back of each shoulder, 
while the tips of its horns sharpen, turn blue, and curve slightly upward. Its brow and claws are larger, 
and its eyes are now red. It has two small, fin-like spikes under each horn and two more down its lower neck. The 
finger disappears from the wing membrane, and the lower edges are divided into large, rounded points. The third joint 
of each wing-arm is adorned with a claw-like spike. Mega Charizard X breathes blue flames out the sides of its mouth, 
and the flame on its tail now burns blue. It is said that its new power turns it black and creates more intense flames. 
"""



================================================
File: docs/segmentedcontrol/colors.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-segmentedControl-color"

target = dmc.SegmentedControl(
    value="Angular",
    data=["React", "Angular", "Svelte", "Vue"],
    color="indigo",
    id=TARGET_ID,
)

configurator = Configurator(target, TARGET_ID)

configurator.add_colorpicker("color", "indigo")

component = configurator.panel



================================================
File: docs/segmentedcontrol/disabled.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    [
        dmc.Text("Disabled control"),
        dmc.SegmentedControl(
            disabled=True,
            data=[
                {"value": "preview", "label": "Preview"},
                {"value": "code", "label": "Code"},
                {"value": "export", "label": "Export"},
            ],
        ),
        dmc.Text("Disabled option"),
        dmc.SegmentedControl(
            data=[
                {"value": "preview", "label": "Preview", "disabled": True},
                {"value": "code", "label": "Code"},
                {"value": "export", "label": "Export"},
            ],
        ),
    ],
    align="flex-start",
)



================================================
File: docs/segmentedcontrol/full.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator


target = dmc.SegmentedControl(
    value="Angular", data=["React", "Angular", "Svelte", "Vue"]
)

configurator = Configurator(target)

configurator.add_segmented_control(
    "orientation", ["horizontal", "vertical"], "horizontal"
)
configurator.add_switch("fullWidth", False)

component = configurator.panel



================================================
File: docs/segmentedcontrol/radius.py
================================================
import dash_mantine_components as dmc

data = ["Dash", "Mantine", "Bootstrap", "Core"]

component = dmc.Stack(
    [dmc.SegmentedControl(data=data, radius=x) for x in [0, "md", "lg", 20]],
    align="flex-start",
)



================================================
File: docs/segmentedcontrol/react.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback
from dash_iconify import DashIconify

data = [
    ["Preview", "tabler:eye"],
    ["Code", "tabler:code"],
    ["Export", "tabler:external-link"],
]

component = html.Div(
    [
        dmc.SegmentedControl(
            id="segmented-with-react-nodes",
            value="Preview",
            data=[
                {
                    "value": v,
                    "label": dmc.Center(
                        [DashIconify(icon=icon, width=16), html.Span(v)],
                        style={"gap": 10},
                    ),
                }
                for v, icon in data
            ],
            mb=10,
        ),
        dmc.Text(id="segmented--value-data"),
    ]
)


@callback(
    Output("segmented--value-data", "children"),
    Input("segmented-with-react-nodes", "value"),
)
def update_value(value):
    return value



================================================
File: docs/segmentedcontrol/segmentedcontrol.md
================================================
---
name: SegmentedControl
description: SegmentedControl is an alternative to RadioGroup and allows users to select an option from a small set of options.
endpoint: /components/segmentedcontrol
package: dash_mantine_components
category: Inputs
---

.. toc::

### Simple Example

SegmentedControl is usually used as an alternative to Tabs (to switch views) and RadioGroup (to capture user feedback
limited to certain options)

.. exec::docs.segmentedcontrol.simple

### Data Prop

The data can be provided as either:
* an array of strings - use when label and value are same.
* an array of dicts with `label` and `value` properties (plus an optional `disabled` boolean).

```python
data = ["React", "Angular", "Svelte", "Vue"]

# or

data = [
    {"value": "React", "label": "React"},
    {"value": "Angular", "label": "Angular"},
    {"value": "Svelte", "label": "Svelte", "disabled": True},
    {"value": "Vue", "label": "Vue"},
]
```

### Disabled

To disable the entire component, use the `disabled` prop. To disable a SegmentedControl item, use the array of objects data format and set `disabled = True` on the item that you want to disable. 

.. exec::docs.segmentedcontrol.disabled

### Full Width and Orientation

By default, SegmentedControl will take only the amount of space that is required to render elements. Set `fullWidth` 
prop to make it block and take 100% width of its container. The orientation can be set via `orientation` prop.

```python
import dash_mantine_components as dmc

dmc.SegmentedControl(
    orientation="horizontal",
    fullWidth=True,
    data=[]
)
```

.. exec::docs.segmentedcontrol.full
    :code: false

### Sizes

SegmentedControl supports 5 sizes: xs, sm, md, lg, xl. Size controls font-size and padding properties.

.. exec::docs.segmentedcontrol.sizes

### Radius

xs, sm, md, lg, xl radius values are defined in theme.radius. Alternatively, you can use a number to set radius in px.

.. exec::docs.segmentedcontrol.radius

### Color

By default, SegmentedControl uses theme.white with shadow in light color scheme and theme.colors.dark[6] background 
color for active element. You can choose any color defined in theme.colors in case you need colored variant.

```python
import dash_mantine_components as dmc

dmc.SegmentedControl(
    color="red",
    data = []
)
```

.. exec::docs.segmentedcontrol.colors
    :code: false

### Transitions
Change transition properties with:

- `transitionDuration` – all transitions duration in ms (ignored if user prefers to reduce motion)
- `transitionTimingFunction` – defaults to `theme.transitionTimingFunction`

.. exec::docs.segmentedcontrol.transitions

### React node as label

.. exec:: docs.segmentedcontrol.react

### Styles API

| Name       | Static selector                      | Description                                             |
|:-----------|:-------------------------------------|:--------------------------------------------------------|
| root       | .mantine-SegmentedControl-root       | Root element                                            |
| control    | .mantine-SegmentedControl-control    | Wrapper element for input and label                     |
| input      | .mantine-SegmentedControl-input      | Input element hidden by default                         |
| label      | .mantine-SegmentedControl-label      | Label element associated with input                     |
| indicator  | .mantine-SegmentedControl-indicator  | Floating indicator that moves between items             |
| innerLabel | .mantine-SegmentedControl-innerLabel | Wrapper of label element children                       |

### Keyword Arguments

#### SegmentedControl

.. kwargs::SegmentedControl



================================================
File: docs/segmentedcontrol/simple.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback

component = html.Div(
    [
        dmc.SegmentedControl(
            id="segmented",
            value="ng",
            data=[
                {"value": "react", "label": "React"},
                {"value": "ng", "label": "Angular"},
                {"value": "svelte", "label": "Svelte"},
                {"value": "vue", "label": "Vue"},
            ],
            mb=10,
        ),
        dmc.Text(id="segmented-value"),
    ]
)


@callback(Output("segmented-value", "children"), Input("segmented", "value"))
def select_value(value):
    return value



================================================
File: docs/segmentedcontrol/sizes.py
================================================
import dash_mantine_components as dmc

data = ["Dash", "Mantine", "Bootstrap", "Core"]

component = dmc.Stack(
    [dmc.SegmentedControl(data=data, size=x) for x in ["xs", "sm", "md", "lg", "xl"]],
    align="flex-start",
)



================================================
File: docs/segmentedcontrol/transitions.py
================================================
import dash_mantine_components as dmc

data = ["Dash", "Mantine", "Bootstrap", "Core"]

component = dmc.Stack(
    [
        dmc.Text("No transition"),
        dmc.SegmentedControl(data=data, transitionDuration=0),
        dmc.Text("500ms linear transition"),
        dmc.SegmentedControl(
            data=data, transitionDuration=500, transitionTimingFunction="linear"
        ),
    ],
    align="flex-start",
)



================================================
File: docs/select/allow_deselect.py
================================================
import dash_mantine_components as dmc

component = dmc.Paper(
    [
        dmc.Select(
            label="Option cannot be deselected",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick value",
            value="Pandas",
            allowDeselect=False,
            w=400,
        ),
        dmc.Select(
            label="Option can be deselected",
            description="This is the default behavior, click 'Pandas' in the dropdown",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick value",
            value="Pandas",
            allowDeselect=True,
            w=400,
            mt="md",
        ),
    ]
)



================================================
File: docs/select/check_option.py
================================================
import dash_mantine_components as dmc

component = dmc.Select(
    label="Control check icon",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    value="NumPy",
    checkIconPosition="right",
    dropdownOpened=True,
    w=200,
    pb=150,
    id="select-check-icon",
)



================================================
File: docs/select/clearable.py
================================================
import dash_mantine_components as dmc

component = dmc.Select(
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    value="Pandas",
    clearable=True,
    w=200,
)



================================================
File: docs/select/dropdown_animation.py
================================================
import dash_mantine_components as dmc

component = dmc.Select(
    label="Your favorite library",
    placeholder="Pick values",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={"transitionProps": {"transition": "pop", "duration": 200}},
)



================================================
File: docs/select/dropdown_offset.py
================================================
import dash_mantine_components as dmc

component = dmc.Select(
    label="Your favorite library",
    placeholder="Pick value",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={
        "position": "bottom",
        "middlewares": {"flip": False, "shift": False},
        "offset": 0,
    },
)



================================================
File: docs/select/dropdown_padding.py
================================================
import dash_mantine_components as dmc

component = dmc.Paper(
    [
        dmc.Select(
            label="Zero padding",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick value",
            comboboxProps={"dropdownPadding": 0},
            w=400,
        ),
        dmc.Select(
            label="10px padding",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick value",
            comboboxProps={"dropdownPadding": 10},
            w=400,
            mt="md",
        ),
    ]
)



================================================
File: docs/select/dropdown_position.py
================================================
import dash_mantine_components as dmc

component = dmc.Select(
    label="Your favorite library",
    placeholder="Pick value",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={"position": "top", "middlewares": {"flip": False, "shift": False}},
)



================================================
File: docs/select/dropdown_shadow.py
================================================
import dash_mantine_components as dmc

component = dmc.Select(
    label="Your favorite library",
    placeholder="Pick value",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={"shadow": "md"},
)



================================================
File: docs/select/dropdown_width.py
================================================
import dash_mantine_components as dmc

component = dmc.Select(
    label="Your favorite library",
    placeholder="Pick value",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={"position": "bottom-start", "width": 200},
)



================================================
File: docs/select/error.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, callback

component = dmc.Select(
    data=["USDINR", "EURUSD", "USDTWD", "USDJPY"],
    id="select-error",
    value="USDJPY",
    w=200,
)


@callback(Output("select-error", "error"), Input("select-error", "value"))
def select_value(value):
    return "JPY is not allowed!" if value == "USDJPY" else ""



================================================
File: docs/select/grouping.py
================================================
import dash_mantine_components as dmc

component = dmc.Select(
    data=[
        {
            "group": "Data Analysis",
            "items": [
                {"value": "Pandas", "label": "Pandas"},
                {"value": "NumPy", "label": "NumPy"},
            ],
        },
        {
            "group": "Deep Learning",
            "items": [
                {"value": "TensorFlow", "label": "TensorFlow"},
                {"value": "PyTorch", "label": "PyTorch"},
            ],
        },
    ],
    w=400,
)



================================================
File: docs/select/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-select-input"
target = dmc.Center(
    dmc.Select(
        label="",
        placeholder="placeholder",
        data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
        w=250,
        id=TARGET_ID,
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_text_input(
    "placeholder", "Select placeholder", **{"placeholder": "Placeholder"}
)
configurator.add_text_input("label", "Input Label", **{"placeholder": "Label"})
configurator.add_text_input("description", "", **{"placeholder": "Description"})
configurator.add_text_input("error", "", **{"placeholder": "Error"})
configurator.add_select("variant", ["default", "filled", "unstyled"], "default")
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "sm")
configurator.add_switch("withAsterisk", True)
configurator.add_switch("disabled", False)
configurator.add_switch("clearable", True)


component = configurator.panel



================================================
File: docs/select/large_data_sets.py
================================================
import dash_mantine_components as dmc

component = dmc.Select(
    label="100,000 options",
    data=[f"Option {i}" for i in range(100000)],
    placeholder="use limit to optimize performance",
    limit=10,
    searchable=True,
    w=400,
)



================================================
File: docs/select/left_right.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Paper(
    [
        dmc.Select(
            label="Your favorite library",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick values",
            leftSectionPointerEvents="none",
            leftSection=DashIconify(icon="bi-book"),
            w=400,
        ),
        dmc.Select(
            label="Your favorite library",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick values",
            rightSectionPointerEvents="none",
            rightSection=DashIconify(icon="bi-book"),
            w=400,
            mt="md",
        ),
    ]
)



================================================
File: docs/select/nothing_found.py
================================================
import dash_mantine_components as dmc

component = dmc.Select(
    label="Pick your favorite library",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    searchable=True,
    nothingFoundMessage="Nothing found...",
    w=400,
)



================================================
File: docs/select/opened.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback

component = html.Div(
    [
        dmc.Button("Toggle dropdown", id="btn-select-opened", n_clicks=0),
        dmc.Select(
            label="Select your favorite library",
            placeholder="Select value",
            id="select-opened",
            value="pd",
            data=[
                {"value": "pd", "label": "Pandas"},
                {"value": "np", "label": "NumPy"},
                {"value": "tf", "label": "TensorFlow"},
                {"value": "torch", "label": "PyTorch"},
            ],
            w=400,
            mb=10,
        ),
    ]
)


@callback(
    Output("select-opened", "dropdownOpened"), Input("btn-select-opened", "n_clicks")
)
def select_value(n):
    if n % 2 == 0:
        return False
    return True



================================================
File: docs/select/popover.py
================================================
import dash_mantine_components as dmc

component = dmc.Popover(
    width=300,
    position="bottom",
    withArrow=True,
    shadow="md",
    children=[
        dmc.PopoverTarget(dmc.Button("Toggle Popover")),
        dmc.PopoverDropdown(
            dmc.Select(
                label="Your favorite library",
                placeholder="Pick value",
                data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
                comboboxProps={"withinPortal": False},
            )
        ),
    ],
)



================================================
File: docs/select/scrollable.py
================================================
import dash_mantine_components as dmc

component = dmc.Paper(
    [
        dmc.Select(
            label="Scrollable dropdown",
            data=[f"Option {i}" for i in range(100)],
            placeholder="Pick value",
            maxDropdownHeight=300,
            w=400,
        ),
        dmc.Select(
            label="With native scroll",
            data=[f"Option {i}" for i in range(100)],
            placeholder="Pick value",
            withScrollArea=False,
            styles={"dropdown": {"maxHeight": 200, "overflowY": "auto"}},
            w=400,
            mt="md",
        ),
    ]
)



================================================
File: docs/select/searchable.py
================================================
import dash_mantine_components as dmc

component = dmc.Select(
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    searchable=True,
    w=200,
)



================================================
File: docs/select/select.md
================================================
---
name: Select
description: Select enables users to select an option in a dropdown.
endpoint: /components/select
package: dash_mantine_components
category: Combobox
---

.. toc::

### Simple Example

Select component allows user to pick one option from the given data.

Note: Dash adds some css by default which can lead you to see an ugly red box when setting the `required` or `error` 
prop to True. Use the below css snippet to counteract it.

```css
input:invalid {
    outline: none !important;
}
```

.. exec::docs.select.simple

### Data Format

The data can be provided as either:
* an array of strings - use when label and value are same.
* an array of dicts with `label` and `value` properties.
* an array of dict with `group` and `items` as keys where items are one of the previous two types.

```python
data = ["Pandas", "NumPy", "TensorFlow", "PyTorch"]

# or

data = [
    {"value": "Pandas", "label": "Pandas"},
    {"value": "NumPy", "label": "NumPy"},
    {"value": "TensorFlow", "label": "TensorFlow"},
    {"value": "PyTorch", "label": "PyTorch"},
]

# or

data = [
    {"group": "Data Analysis", "items": ["Pandas", "NumPy"]},
    {"group": "Deep Learning", "items": ["TensorFlow", "Pytorch"]}
]

# or

data = [
    {
        "group": "Data Analysis",
        "items": [
            {"value": "Pandas", "label": "Pandas"},
            {"value": "NumPy", "label": "NumPy"},
        ],
    },
    {
        "group": "Deep Learning",
        "items": [
            {"value": "TensorFlow", "label": "TensorFlow"},
            {"value": "PyTorch", "label": "PyTorch"},
        ],
    },
]
```

### Searchable

Set `searchable` prop to allow filtering options by user input.

.. exec::docs.select.searchable


### Nothing Found

Set the `nothingFoundMessage` prop to display a given message when no options match the search query or there is 
no data available. If the `nothingFoundMessage` prop is not set, the `MultiSelect` dropdown will be hidden.

.. exec::docs.select.nothing_found

### Checked option icon
Set `checkIconPosition` prop to left or right to control position of check icon in active option. To remove the 
check icon, set `withCheckIcon=False`.


.. exec::docs.select.check_option

### Clearable

Set `clearable` prop to enable clearing selected values.

.. exec::docs.select.clearable

### Allow deselect
`allowDeselect` prop determines whether the value should be deselected when user clicks on the selected option. By 
default, `allowDeselect` is True:


.. exec::docs.select.allow_deselect

### Large Data Sets

The best strategy for large data sets is to limit the number of options that are rendered at the same time. You can
do it with limit prop. 

Example of `Select` with 100 000 options, 10 options are rendered at the same time:

.. exec::docs.select.large_data_sets

### Scrollable dropdown

By default, the options list is wrapped with `ScrollArea.Autosize`. You can control dropdown max-height with 
`maxDropdownHeight` prop if you do not change the default settings.

If you want to use native scrollbars, set `withScrollArea=False`. Note that in this case, you will need to change 
dropdown styles with `Styles API`.


.. exec::docs.select.scrollable



### Grouping Items

.. exec::docs.select.grouping


### Combobox props
You can override `Combobox` props with `comboboxProps`. It is useful when you need to change some of the props that are
not exposed by `MultiSelect`, for example `withinPortal`:

```python
dmc.Select(comboboxProps={"withinPortal": False})
```


### Change dropdown z-index


```python
dmc.Select(comboboxProps={"zIndex": 1000})
```

### Inside Popover

To use `Select` inside popover, you need to set `withinPortal=False`:

.. exec::docs.select.popover



### Dropdown open in a callback

.. exec::docs.select.opened

### Dropdown position

By default, the dropdown is displayed below the input if there is enough space; otherwise it is displayed above the
input. You can change this behavior by setting `position` and `middlewares` props, which are passed down to the
underlying `Popover` component.

Example of dropdown that is always displayed above the input:

.. exec::docs.select.dropdown_position

### Dropdown width

To change dropdown width, set `width` prop in `comboboxProps`. By default, dropdown width is equal to the input width.

.. exec::docs.select.dropdown_width


### Dropdown offset

To change dropdown offset, set `offset` prop in `comboboxProps`:  

.. exec::docs.select.dropdown_offset

### Dropdown animation
By default, dropdown animations are disabled. To enable them, you can set `transitionProps`, which will be passed
down to the underlying `Transition` component.

.. exec::docs.select.dropdown_animation

### Dropdown padding

.. exec::docs.select.dropdown_padding


### Dropdown shadow

.. exec::docs.select.dropdown_shadow

### Left and right sections

`MultiSelect` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position
inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

- `rightSection`/`leftSection` – component to render on the corresponding side of input
- `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component size prop.
- `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls pointer-events property of the section. If you want to render a non-interactive element, set it to none to pass clicks through to the input.

.. exec::docs.select.left_right


### Input Props
`Select` component supports `Input` and Input Wrapper components features and all input element props.
`Select` documentation does not include all features supported by the component – see Input documentation to learn about all available features.

 
.. exec::docs.select.interactive
   :code: false


### Invalid State And Error

You can let the user know if the selected value is invalid. In the example below, you will get an error message if you
select less than 2 currency pairs.

.. exec::docs.select.error


### Styles API

| Name        | Static selector             | Description                                      |
|:------------|:----------------------------|:-------------------------------------------------|
| wrapper     | .mantine-Select-wrapper     | Root element of the Input                        |
| input       | .mantine-Select-input       | Input element                                    |
| section     | .mantine-Select-section     | Left and right sections                          |
| root        | .mantine-Select-root        | Root element                                     |
| label       | .mantine-Select-label       | Label element                                    |
| required    | .mantine-Select-required    | Required asterisk element, rendered inside label |
| description | .mantine-Select-description | Description element                              |
| error       | .mantine-Select-error       | Error element                                    |
| dropdown    | .mantine-Select-dropdown    | Dropdown root element                            |
| options     | .mantine-Select-options     | Options wrapper                                  |
| option      | .mantine-Select-option      | Option                                           |
| empty       | .mantine-Select-empty       | Nothing found message                            |
| group       | .mantine-Select-group       | Options group wrapper                            |
| groupLabel  | .mantine-Select-groupLabel  | Options group label                              |

### Keyword Arguments

#### Select

.. kwargs::Select



================================================
File: docs/select/simple.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback

component = html.Div(
    [
        dmc.Select(
            label="Select your favorite library",
            placeholder="Select one",
            id="framework-select",
            value="pd",
            data=[
                {"value": "pd", "label": "Pandas"},
                {"value": "np", "label": "NumPy"},
                {"value": "tf", "label": "TensorFlow"},
                {"value": "torch", "label": "PyTorch"},
            ],
            w=200,
            mb=10,
        ),
        dmc.Text(id="selected-value"),
    ]
)


@callback(Output("selected-value", "children"), Input("framework-select", "value"))
def select_value(value):
    return f" You selected {value}"



================================================
File: docs/semicircleprogress/empty_segment_color.py
================================================
import dash_mantine_components as dmc

component = dmc.SemiCircleProgress(
    value=30, emptySegmentColor="var(--mantine-color-dimmed)"
)



================================================
File: docs/semicircleprogress/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.SemiCircleProgress(
      fillDirection="left-to-right",
      orientation="up",
      filledSegmentColor="blue",
      size=350,
      thickness=12,
      value=40,
      label="Label"
)


configurator = Configurator(target)

configurator.add_segmented_control("fillDirection", ["left-to-right", "right-to-left"], "left-to-right")
configurator.add_segmented_control("orientation", ["up", "down"], "up")
configurator.add_colorpicker("filledSegmentColor", "red")

configurator.add_number_slider("size", 300, **{"min": 120, "max": 450} )
configurator.add_number_slider("thickness", 20,  **{"min": 1, "max": 20})
configurator.add_number_input("value", 69, **{"min": 0, "max": 100})

component = configurator.panel



================================================
File: docs/semicircleprogress/label_position.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack([
    dmc.SemiCircleProgress( value=30, label="Bottom", mb="xl"),
    dmc.SemiCircleProgress(value=30, label="Center", labelPosition="center")
])




================================================
File: docs/semicircleprogress/semicircleprogress.md
================================================
---
name: SemiCircleProgress
description: Use the SemiCircleProgress component to represent progress with semi circle diagram
endpoint: /components/semicircleprogress
package: dash_mantine_components
category: Feedback
---

.. toc::

### Usage

.. exec::docs.semicircleprogress.interactive
    :code: false


### Simple Example

.. exec::docs.semicircleprogress.simple

### Change empty segment color

Use `emptySegmentColor` prop to change color of empty segment, it accepts key of theme colors or any valid CSS color value:

.. exec::docs.semicircleprogress.empty_segment_color

### Change label position
By default, the `label` is displayed at the bottom of the component, you can change its position to center by using `labelPosition` prop:


.. exec::docs.semicircleprogress.label_position

### Filled segment transition
By default, transitions are disabled, to enable them, set `transitionDuration` prop to a number of milliseconds:


.. exec::docs.semicircleprogress.transition



### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.


#### Selectors

| Selector       | Static Selector                       | Description                |
|----------------|---------------------------------------|----------------------------|
| `root`         | `.mantine-SemiCircleProgress-root`    | Root element               |
| `svg`          | `.mantine-SemiCircleProgress-svg`     | Root SVG element           |
| `emptySegment` | `.mantine-SemiCircleProgress-emptySegment` | Empty circle segment       |
| `filledSegment`| `.mantine-SemiCircleProgress-filledSegment` | Filled circle segment      |
| `label`        | `.mantine-SemiCircleProgress-label`   | Label element              |

#### CSS Variables

| Selector | Variable                      | Description                                                   |
|----------|-------------------------------|---------------------------------------------------------------|
| `root`   | `--scp-empty-segment-color`   | Color of the empty segment                                    |
|          | `--scp-filled-segment-color`  | Color of the filled segment                                   |
|          | `--scp-rotation`              | Transform styles of the SVG, controlled by `orientation` and `fillDirection` props |
|          | `--scp-thickness`             | Controls `strokeWidth` of the circle                         |
|          | `--scp-transition-duration`   | Controls transition duration of the filled segment           |

#### Data Attributes

| Selector | Attribute       | Value                         |
|----------|-----------------|-------------------------------|
| `label`  | `data-position` | Value of `labelPosition` prop |


### Keyword Arguments

#### SemiCircleProgress

.. kwargs::SemiCircleProgress



================================================
File: docs/semicircleprogress/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.SemiCircleProgress(
      fillDirection="left-to-right",
      orientation="up",
      filledSegmentColor="blue",
      size=200,
      thickness=12,
      value=40,
      label="Label"
)



================================================
File: docs/semicircleprogress/transition.py
================================================

import random
import dash_mantine_components as dmc
from dash import Input, Output, callback

component = dmc.Box([
    dmc.SemiCircleProgress(value=30, transitionDuration=250, label="30%", id="semi-circle-progress"),
    dmc.Button("Set random value", mt="md", ml=22, id="semi-circle-progress-btn"),

])

@callback(
    Output("semi-circle-progress", "value"),
    Output("semi-circle-progress", "label"),
    Input("semi-circle-progress-btn", "n_clicks")
)
def update(n):
    number = random.randint(1, 100)
    return number, f"{number}%"




================================================
File: docs/simplegrid/container.py
================================================
import dash_mantine_components as dmc
from dash import html

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

component = html.Div(
    # Wrapper div is added for demonstration purposes only,
    # it is not required in real projects
    dmc.SimpleGrid(
        type="container",
        cols={"base": 1, "300px": 2, "500px": 5},
        spacing={"base": 10, "300px": "xl"},
        children=[
            html.Div("1", style=style),
            html.Div("2", style=style),
            html.Div("3", style=style),
            html.Div("4", style=style),
            html.Div("5", style=style),
        ],
        p="xs",
    ),
    style={"resize": "horizontal", "overflow": "hidden", "maxWidth": "100%"},
)



================================================
File: docs/simplegrid/responsive.py
================================================
import dash_mantine_components as dmc
from dash import html

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

component = dmc.SimpleGrid(
    cols={"base": 1, "sm": 2, "lg": 5},
    spacing={"base": 10, "sm": "xl"},
    verticalSpacing={"base": "md", "sm": "xl"},
    children=[
        html.Div("1", style=style),
        html.Div("2", style=style),
        html.Div("3", style=style),
        html.Div("4", style=style),
        html.Div("5", style=style),
    ],
)



================================================
File: docs/simplegrid/simple.py
================================================
import dash_mantine_components as dmc
from dash import html

from lib.configurator import Configurator

style = {
    "border": f"1px solid {dmc.DEFAULT_THEME['colors']['indigo'][4]}",
    "textAlign": "center",
}

target = dmc.SimpleGrid(
    cols=3,
    children=[
        html.Div("1", style=style),
        html.Div("2", style=style),
        html.Div("3", style=style),
        html.Div("4", style=style),
        html.Div("5", style=style),
    ],
)

configurator = Configurator(target)

configurator.add_number_slider("cols", 3, min=1, max=6)
configurator.add_slider("spacing", "md")
configurator.add_slider("verticalSpacing", "md")

component = configurator.panel



================================================
File: docs/simplegrid/simplegrid.md
================================================
---
name: SimpleGrid
description: Use SimpleGrid component to create a grid where each column takes equal width. You can use it to create responsive layouts.
endpoint: /components/simplegrid
package: dash_mantine_components
category: Layout
---

.. toc::

### Usage

`SimpleGrid` is a responsive grid system with equal-width columns. It uses CSS grid layout. If you need to set different
widths for columns, use `Grid` component instead.

.. exec::docs.simplegrid.simple
    :code: false

```python
import dash_mantine_components as dmc
from dash import html

dmc.SimpleGrid(
    cols=3,
    spacing="md",
    verticalSpacing="md",
    children=[
        html.Div("1"),
        html.Div("2"),
        html.Div("3"),
        html.Div("4"),
        html.Div("5"),
    ]
)

```

### spacing and verticalSpacing props
`spacing` prop is used both for horizontal and vertical spacing if `verticalSpacing` is not set:

```python

# `spacing` is used for both horizontal and vertical spacing
dmc.SimpleGrid(spacing="xl")

# `spacing` is used for horizontal spacing, `verticalSpacing` for vertical
dmc.SimpleGrid(spacing="xl", verticalSpacing="lg")
```

### Responsive Props

`cols`, `spacing` and `verticalSpacing` props support object notation for responsive values, 
it works the same way as [style props](/style-props): the object may have `base`, `xs`, `sm`, `md`, `lg` and `xl` key, 
and values from those keys will be applied according to current viewport width.

`cols` prop can be understood from the below example as:

- 1 column if viewport width is less than `sm` breakpoint
- 2 columns if viewport width is between `sm` and `lg` breakpoints
- 5 columns if viewport width is greater than `lg` breakpoint

Same logic applies to `spacing` and `verticalSpacing` props.

Resize browser to see breakpoints behavior.

.. exec::docs.simplegrid.responsive

### Container queries
To use [container queries](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_queries) instead
of media queries, set `type='container'`. With container queries, grid columns and spacing will be adjusted based on the
container width, not the viewport width.

Note that, when using container queries, `cols`, `spacing` and `verticalSpacing` props cannot reference `theme.breakpoints`
values in keys. It is required to use exact `px` or `em` values.

To see how the grid changes, resize the root element of the demo with the resize handle located at the bottom right
corner of the demo:


.. exec::docs.simplegrid.container


### Styles API


This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.


| Name        | Static selector          | Description                                      |
|:------------|:-------------------------|:-------------------------------------------------|
| root        | .mantine-SimpleGrid-root | Root element                                     |

### Keyword Arguments

#### SimpleGrid

.. kwargs::SimpleGrid



================================================
File: docs/skeleton/dccloading.py
================================================

import time
import dash_mantine_components as dmc
from dash import  Input, Output,  html, callback, dcc

component = html.Div(
    [
        dcc.Loading(
            children=html.Div([
                dmc.Text("Initial data", id="dccloading-div"),
                dmc.Text("The data only takes 200ms to update, but `delay_hide` is set to 1000ms to prevent flashing.")
            ]),
            delay_hide=1000,
            custom_spinner = dmc.Skeleton(
                visible=True,
                h="100%"
            ),
        ),
        dmc.Button("Update!", id="dccloading-button"),
    ]
)

@callback(
    Output("dccloading-div", "children"),
    Input("dccloading-button", "n_clicks"),
    prevent_initial_call=True
)
def update_graph(n):
    time.sleep(.2)
    return f"Data updated {n} times"




================================================
File: docs/skeleton/graphs.py
================================================
import time

import dash_mantine_components as dmc
from dash import html, Output, Input, callback

from lib.utils import create_graph

component = html.Div(
    [
        dmc.Skeleton(
            visible=False,
            children=html.Div(id="skeleton-graph-container", children=create_graph()),
            mb=10,
        ),
        dmc.Button("Click Me!", id="graph-skeleton-button"),
    ]
)


@callback(
    Output("skeleton-graph-container", "children"),
    Input("graph-skeleton-button", "n_clicks"),
)
def update_graph(n_clicks):
    time.sleep(2)
    return create_graph()



================================================
File: docs/skeleton/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Box(
    [
        dmc.Skeleton(height=50,  circle=True, mb="xl"),
        dmc.Skeleton(height=8, radius="xl"),
        dmc.Skeleton(height=8, my=6),
        dmc.Skeleton(height=8, w="70%", radius="xl"),
    ],
)



================================================
File: docs/skeleton/skeleton.md
================================================
---
name: Skeleton
description: Use Skeleton component to disable user interactions and indicate loading state.
endpoint: /components/skeleton
package: dash_mantine_components
category: Feedback
---

.. toc::

### Simple Usage

Use `Skeleton` to create a placeholder for loading content. `Skeleton` support the following props:

- `height` - height - any valid CSS value
- `width` - width - any valid CSS value
- `radius` - key of `theme.radius` or any valid CSS value to set border-radius
- `circle` - if true, width, height and border-radius will equal to value specified in `height` prop
- `animate` - true by default, controls animation

.. exec::docs.skeleton.simple

### Customizing Loader

.. exec::docs.skeleton.graphs

### Use with dcc.Loading

For greater control over when the `Skeleton` is displayed and for how long, use the `dcc.Loading` component from
`dash-core-components`. Set the `Skeleton` in the `custom_spinner` prop and configure options such as:  

- `delay_show`: Specifies the wait time before displaying the `Skeleton`. This helps prevent flickering for fast-loading content.  
- `delay_hide`: Defines how long the `Skeleton` remains visible after loading completes, creating a smoother transition between the placeholder and final content.  
- `target_components`: Determines which components trigger the `Skeleton` display. This allows fine-grained control,
making the loading effect triggered only by specific components rather than automatically being triggered by any of the children.

Refer to the [Dash Documentation](https://dash.plotly.com/dash-core-components/loading) for more details.

Here is an example of `delay_hide` prop in `dcc.Loading` to prevent the `Skeleton` from showing for a very short time.

.. exec::docs.skeleton.dccloading


### Styles API

#### Skeleton Selectors

| Selector | Static selector         | Description   |
|----------|-------------------------|---------------|
| root     | .mantine-Skeleton-root  | Root element  |

#### Skeleton CSS Variables

| Selector | Variable          | Description                      |
|----------|------------------|----------------------------------|
| root     | --skeleton-height | Controls skeleton height        |
|          | --skeleton-width  | Controls skeleton width         |
|          | --skeleton-radius | Controls skeleton border-radius |

#### Skeleton Data Attributes

| Selector | Attribute      | Condition               |
|----------|--------------|-------------------------|
| root     | data-visible | `visible` prop is set   |
| root     | data-animate | `animate` prop is set   |


### Keyword Arguments

#### Skeleton

.. kwargs::Skeleton



================================================
File: docs/slider/disabled.py
================================================
import dash_mantine_components as dmc


component = dmc.Stack(
    [
        dmc.Slider(value=60, disabled=True),
        dmc.RangeSlider(
            mt="xl",
            mb="xl",
            value=[25, 75],
            disabled=True,
            marks=[
                {"value": 0, "label": "xs"},
                {"value": 25, "label": "sm"},
                {"value": 50, "label": "md"},
                {"value": 75, "label": "lg"},
                {"value": 100, "label": "xl"},
            ],
        ),
    ]
)



================================================
File: docs/slider/drag.py
================================================
import dash_mantine_components as dmc
from dash import callback, html, Output, Input

component = html.Div(
    [
        dmc.Slider(
            id="drag-slider",
            value=26,
            updatemode="drag",
            marks=[
                {"value": 20, "label": "20%"},
                {"value": 50, "label": "50%"},
                {"value": 80, "label": "80%"},
            ],
        ),
        dmc.Space(h=35),
        dmc.Text(id="drag-output"),
    ]
)


@callback(Output("drag-output", "children"), Input("drag-slider", "value"))
def update_value(value):
    return f"You have selected: {value}"



================================================
File: docs/slider/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-slider"

target = dmc.Slider(
    value=69,
    updatemode="mouseup",
    marks=[
        {"value": 20, "label": "20%"},
        {"value": 50, "label": "50%"},
        {"value": 80, "label": "80%"},
    ],
    id=TARGET_ID,
)

configurator = Configurator(target, TARGET_ID)

configurator.add_colorpicker("color", "indigo")
configurator.add_slider("size", "md")
configurator.add_slider("radius", "lg")
configurator.add_switch("showLabelOnHover", True)
configurator.add_switch("labelAlwaysOn", False)

component = configurator.panel



================================================
File: docs/slider/inverted.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    [
        dmc.Slider(inverted=True, value=80),
        dmc.RangeSlider(inverted=True, value=[40, 60], mt="xl"),
    ]
)



================================================
File: docs/slider/label.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    [
        dmc.Text("No label", size="sm"),
        dmc.Slider(value=40, label=None),
        dmc.Text("Label always visible", size="sm", mt="xl"),
        dmc.Slider(value=40, labelAlwaysOn=True),
        dmc.Text("Custom label transition", size="sm", mt="xl"),
        dmc.Slider(
            value=40,
            labelTransitionProps={
                "transition": "skew-down",
                "duration": 150,
                "timingFunction": "linear",
            },
        ),
    ]
)



================================================
File: docs/slider/marks.py
================================================
import dash_mantine_components as dmc
from dash import html

component = html.Div(
    [
        dmc.Text("No Marks"),
        dmc.Slider(value=59),
        dmc.Text("Marks but no label", mt=15),
        dmc.Slider(
            value=69,
            marks=[{"value": 20}, {"value": 50}, {"value": 80}],
            style={"marginBottom": 15},
        ),
        dmc.Text("Marks with label"),
        dmc.Slider(
            value=79,
            marks=[
                {"value": 20, "label": "20%"},
                {"value": 50, "label": "50%"},
                {"value": 80, "label": "80%"},
            ],
        ),
        dmc.RangeSlider(
            value=[30, 89],
            marks=[
                {"value": 20, "label": "20%"},
                {"value": 50, "label": "50%"},
                {"value": 80, "label": "80%"},
            ],
            mt=30,
        ),
    ]
)



================================================
File: docs/slider/minrange.py
================================================
import dash_mantine_components as dmc

component = dmc.RangeSlider(
    minRange=0.2, min=0, max=1, step=0.0005, value=[0.1245, 0.5535]
)



================================================
File: docs/slider/range.py
================================================
import dash_mantine_components as dmc
from dash import callback, html, Output, Input

component = html.Div(
    [
        dmc.RangeSlider(
            id="range-slider-callback",
            value=[26, 50],
            marks=[
                {"value": 20, "label": "20%"},
                {"value": 50, "label": "50%"},
                {"value": 80, "label": "80%"},
            ],
            mb=35,
        ),
        dmc.Text(id="range-slider-output"),
    ]
)


@callback(
    Output("range-slider-output", "children"), Input("range-slider-callback", "value")
)
def update_value(value):
    return f"You have selected: [{value[0]}, {value[1]}]"



================================================
File: docs/slider/restrictomarks.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    [
        # Slider
        dmc.Slider(
            restrictToMarks=True,
            value=25,
            marks=[{"value": index * 25} for index in range(5)],
        ),
        # RangeSlider
        dmc.RangeSlider(
            restrictToMarks=True,
            value=[5, 15],
            marks=[
                {"value": 5},
                {"value": 15},
                {"value": 25},
                {"value": 35},
                {"value": 70},
                {"value": 80},
                {"value": 90},
            ],
        ),
    ]
)



================================================
File: docs/slider/simple.py
================================================
import dash_mantine_components as dmc
from dash import callback, html, Output, Input

component = html.Div(
    [
        dmc.Slider(
            id="slider-callback",
            value=26,
            marks=[
                {"value": 20, "label": "20%"},
                {"value": 50, "label": "50%"},
                {"value": 80, "label": "80%"},
            ],
            mb=35,
        ),
        dmc.Text(id="slider-output"),
    ]
)


@callback(Output("slider-output", "children"), Input("slider-callback", "value"))
def update_value(value):
    return f"You have selected: {value}"



================================================
File: docs/slider/slider.md
================================================
---
name: Slider
description: Use Slider component to capture user feedback from a range of values.
endpoint: /components/slider
package: dash_mantine_components
category: Inputs
---

.. toc::

### Introduction

.. exec::docs.slider.interactive
    :code: false

### Simple Usage

Use the `value` prop to get the value of the slider.

.. exec::docs.slider.simple


### Disabled

.. exec::docs.slider.disabled

### Range Slider

Note: The `RangeSlider` has a `minRange` prop that defaults to 10. Make sure `minRange` is not greater than the
slider's maximum value, or the slider won't work properly.


.. exec::docs.slider.range

### minRange

Use `minRange` prop to control minimum range between from and to values in `RangeSlider`. The default value is 10.
The example below shows how to use `minRange` prop to capture decimal values from the user:


.. exec::docs.slider.minrange


### Update Mode

By default, slider value is updated once the user has stopped dragging the handle. But it can be changed by changing
the `updatemode` to "drag" instead of "mouseup" (default).

Below is a slider with `updatemode` set to "drag", observe how the output text changes as you drag the slider handle.

.. exec::docs.slider.drag

### Control label
To change label behavior and appearance, set the following props:

- `label` – set to `None` to disable the label.  In a future release you will be able to provide a function to format the label, but this feature is not yet available.
- `labelAlwaysOn` – if `True` – label will always be displayed, by default label is visible only when user is dragging
- `labelTransitionProps` – props passed down to the `Transition` component, can be used to customize label animation


.. exec::docs.slider.label

### Min, Max, and Step

You can set `min`, `max` and `step` values for Slider component. This will work even for negative and decimal values.

.. exec::docs.slider.step

### Marks

Add any number of marks to the Slider by setting `marks` prop to an array of objects.

```python
marks = [
  { "value": 20 },                          # displays mark on slider track
  { "value": 40, "label": '40%' },          # adds mark label below slider track
]
```

.. exec::docs.slider.marks
    :code: false


### Restrict selection to marks
Setting `restrictToMarks=True` ensures that users can only select values matching the specific marks defined. This 
feature is especially helpful when you have uneven or non-standard marks and want to ensure users can only pick 
from those specific points.

Note: The `step` prop is ignored when `restrictToMarks=True`.

.. exec::docs.slider.restrictomarks


### Thumb size
.. exec::docs.slider.thumbsize


### Thumb children
.. exec::docs.slider.thumbchildren

### Inverted
You can invert the track by setting `inverted=True`:

.. exec::docs.slider.inverted



### Styling the Slider

The `Slider` component can be fully customized using Mantine's Styles API. Each element of the `Slider` - from the
thumb to the track markers - has its own unique selector that can be styled independently.

Try the [interactive example](https://mantine.dev/core/slider/#styles-api) in the upstream Mantine documentation to see
how these selectors correspond to different parts of the Slider component. Below, you'll find a comprehensive reference
of all available selectors, CSS variables, and data attributes.

Here is an example:
.. exec::docs.slider.styles

Put the following in a `.css` file in the `/assets` folder
```css

.dmc-slider-track {
  &::before {
    background-color: light-dark(var(--mantine-color-blue-1), var(--mantine-color-dark-3));
  }
}

.dmc-slider-mark {
  width: 6px;
  height: 6px;
  border-radius: 6px;
  transform: translateX(-3px) translateY(-2px);
  border-color: light-dark(var(--mantine-color-blue-1), var(--mantine-color-dark-3));

  &[data-filled] {
    border-color: var(--mantine-color-blue-6);
  }
}

.dmc-slider-markLabel {
  font-size: var(--mantine-font-size-sm);
  color: var(--mantine-color-green-5);
  margin-bottom: 5px;
  margin-top: 0;
}

.dmc-slider-thumb {
  height: 16px;
  width: 16px;
  background-color: var(--mantine-color-green-5);
  border-width: 1px;
  box-shadow: var(--mantine-shadow-lg);
}
```


### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.


#### Slider selectors

| Selector | Static selector | Description |
|----------|----------------|-------------|
| root | `.mantine-Slider-root` | Root element |
| label | `.mantine-Slider-label` | Thumb label |
| thumb | `.mantine-Slider-thumb` | Thumb element |
| trackContainer | `.mantine-Slider-trackContainer` | Wraps track element |
| track | `.mantine-Slider-track` | Slider track |
| bar | `.mantine-Slider-bar` | Track filled part |
| markWrapper | `.mantine-Slider-markWrapper` | Contains `mark` and `markLabel` elements |
| mark | `.mantine-Slider-mark` | Mark displayed on track |
| markLabel | `.mantine-Slider-markLabel` | Label of the associated mark, displayed below track |

#### Slider CSS variables

| Selector | Variable | Description |
|----------|----------|-------------|
| root | `--slider-size` | Controls track `height` |
| root | `--slider-color` | Controls filled track, thumb and marks `background` |
| root | `--slider-thumb-size` | Controls thumb `width` and `height` |
| root | `--slider-radius` | Controls `border-radius` of track and thumb |

#### Slider data attributes

| Selector | Attribute | Condition |
|----------|-----------|-----------|
| trackContainer, track, bar, thumb, mark | `data-disabled` | `disabled` prop is set |
| track, bar | `data-inverted` | `inverted` prop is set |
| thumb | `data-dragging` | slider is being dragged |
| mark | `data-filled` | mark position is less or equal slider value |


### Keyword Arguments

#### Slider

.. kwargs::Slider

#### RangeSlider

.. kwargs::RangeSlider




================================================
File: docs/slider/step.py
================================================
import dash_mantine_components as dmc

component = dmc.Slider(min=-10, max=10, step=0.5)



================================================
File: docs/slider/styles.py
================================================
import dash_mantine_components as dmc

component = dmc.Slider(
    value=79,
    marks=[
        {"value": 20, "label": "20%"},
        {"value": 50, "label": "50%"},
        {"value": 80, "label": "80%"},
    ],
    size=2,
    classNames={
        "track": "dmc-slider-track",
        "mark": "dmc-slider-mark",
        "markLabel": "dmc-slider-markLabel",
        "thumb": "dmc-slider-thumb",
    },
)



================================================
File: docs/slider/thumbchildren.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = [
    dmc.Slider(
        thumbChildren=DashIconify(icon="mdi:heart", width=16),
        color="red",
        label=None,
        value=40,
        thumbSize=26,
        styles={"thumb": {"borderWidth": 2, "padding": 3}},
    ),
    dmc.RangeSlider(
        mt="xl",
        styles={"thumb": {"borderWidth": 2, "padding": 3}},
        color="red",
        label=None,
        value=[20, 60],
        thumbSize=26,
        thumbChildren=[
            DashIconify(icon="mdi:heart", width=16),
            DashIconify(icon="mdi:heart-broken", width=16),
        ],
    ),
]



================================================
File: docs/slider/thumbsize.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    [
        dmc.Text("Standard size", size="sm"),
        dmc.Slider(value=40, label=None),
        dmc.Text("Thumb size number", size="sm", mt="xl"),
        dmc.Slider(value=40, thumbSize=50),
    ]
)



================================================
File: docs/space/simple.py
================================================
import dash_mantine_components as dmc
from dash import html

component = html.Div(
    [
        dmc.Group([dmc.Badge("Badge 1"), dmc.Badge("Badge 2")]),
        dmc.Space(h="xl"),
        dmc.Group([dmc.Badge("Badge 1"), dmc.Space(w="lg"), dmc.Badge("Badge 2")]),
        dmc.Space(h=30),
        dmc.Group([dmc.Badge("Badge 1"), dmc.Space(w=45), dmc.Badge("Badge 2")]),
    ]
)



================================================
File: docs/space/space.md
================================================
---
name: Space
description: Use the Space component to add horizontal or vertical spacing from theme.
endpoint: /components/space
package: dash_mantine_components
category: Layout
---

.. toc::

### Simple Example

Space component can be customized with two props: `h` and `w`, shortcuts for height and width. These can take either 
values from Mantine's theme i.e. xs, sm, md, lg, xl or number.

.. exec::docs.space.simple

### Where to use

In most cases, you would want to use margin props instead of `Space` when working with Mantine components:

```python
import dash_mantine_components as dmc
from dash import html

html.Div([
    dmc.Text("First line"),    
    dmc.Text("Second line", mt="md"),    
])
```

But when you work with other components like `html` or `dcc`, you do not have access to Mantine's theme spacing,
and you may want to use dmc.Space component:

```python
import dash_mantine_components as dmc
from dash import html

html.Div([
    html.P("First line"),
    dmc.Space(h="md"),    
    html.P("Second line"),    
])
```

### Keyword Arguments

#### Space

.. kwargs::Space



================================================
File: docs/sparkline/areacolor-light-dark.py
================================================
import dash_mantine_components as dmc

component = dmc.Sparkline(w=200, h=60, data=[10, 20, 40, 20, 40, 10, 50], className="chart-color")


================================================
File: docs/sparkline/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.Sparkline(w=200, h=60, data=[10, 20, 40, 20, 40, 10, 50])

configurator = Configurator(target)


configurator.add_select(
    "curveType",
    ["Bump", "Linear", "Natural", "Monotone", "Step", "StepBefore", "StepAfter"],
    "Linear",
)
configurator.add_colorpicker("color", "blue")
configurator.add_number_slider("fillOpacity", 1, min=0, max=1)
configurator.add_switch("withGradient", True)
configurator.add_number_slider("strokeWidth", 5, min=0.5, max=5)

component = configurator.panel



================================================
File: docs/sparkline/spark_animation.py
================================================
import dash_mantine_components as dmc
from dash import callback, Input, Output

component = dmc.Box(
    [
        dmc.Button("Update Chart", id="btn-spark-animation", n_clicks=0),
        dmc.Sparkline(
            w=200,
            h=60,
            data=[],
            areaProps={"isAnimationActive": True},
            color="blue",
            id="spark-animation",
        ),
    ]
)


@callback(Output("spark-animation", "data"), Input("btn-spark-animation", "n_clicks"))
def update(n):
    if n % 2 == 0:
        return [10, 20, 40, 20, 40, 10, 50]
    return [50, 10, 30, 10, 40, 50, 10]



================================================
File: docs/sparkline/sparkline.md
================================================
---
name: Sparkline
description: Simplified area chart to show trends
endpoint: /components/sparkline
package: dash_mantine_components
category: Charts
---

.. toc::

### Introduction

Sparkline is a simplified version of AreaChart. It can be used to display a single series of data in a small space.

.. exec::docs.sparkline.interactive
    :code: false


```python
import dash_mantine_components as dmc
from dash import html

dmc.Sparkline(
    w=200,
    h=60,
    data=[10, 20, 40, 20, 40, 10, 50],
    curveType="linear",
    color="blue",
    fillOpacity=0.98,
    strokeWidth=5    
)

```

### Trend Colors

Use `trendColors` prop instead of `color` to change chart color depending on the trend. The prop accepts an object with `positive`, `negative` and `neutral` properties:

- `positive` - color for positive trend (first value is less than the last value in data array)
- `negative` - color for negative trend (first value is greater than the last value in data array)
- `neutral` - color for neutral trend (first and last values are equal)

`neutral` is optional, if not provided, the color will be the same as `positive`.


.. exec::docs.sparkline.trendcolors


### Change area color depending on color scheme
You can use CSS variables in color property. Learn more in the Theming section under [Colors.](/colors#colors-in-light-and-dark-mode)

Example of area color that is dark orange in light mode and lime in dark mode:


.. exec::docs.sparkline.areacolor-light-dark
    :code: false


.. sourcetabs::docs/sparkline/areacolor-light-dark.py, assets/examples/chart-color.css
    :defaultExpanded: true
    :withExpandedButton: true


### Sparkline animation
By default, the Recharts data animation is disabled. To enable and customize the animation, use `areaProps` to pass properties to the Recharts `Area` component.


.. exec::docs.sparkline.spark_animation




### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### Sparkline selectors

| Selector    | Static selector         | Description                             |
|:------------|:------------------------|:----------------------------------------|
| root        | .mantine-Sparkline-root | Root element                            |


#### Sparkline CSS variables

| Selector         | Variable             | Description                        |
|:-----------------|:---------------------|:-----------------------------------|
| root             | --chart-color        | Controls stroke and fill colors    |

### Keyword Arguments

#### Sparkline

.. kwargs::Sparkline



================================================
File: docs/sparkline/trendcolors.py
================================================
import dash_mantine_components as dmc
from dash import html

positive_trend = [10, 20, 40, 20, 40, 10, 50]
negative_trend = [50, 40, 20, 40, 20, 40, 10]
neutral_trend = [10, 20, 40, 20, 40, 10, 50, 5, 10]


def make_sparkline(trend):
    return dmc.Sparkline(
        w=200,
        h=60,
        data=trend,
        trendColors={"positive": "teal.6", "negative": "red.6", "neutral": "gray.5"},
        fillOpacity=0.2,
    )


component = dmc.Stack(
    [
        dmc.Text("Positive Trend"),
        make_sparkline(positive_trend),
        dmc.Text("Negative Trend", mt="md"),
        make_sparkline(negative_trend),
        dmc.Text("Neutral Trend", mt="md"),
        make_sparkline(neutral_trend),
    ],
    gap="md",
)



================================================
File: docs/spoiler/simple.py
================================================
import dash_mantine_components as dmc

text = """We Butter the Bread with Butter was founded in 2007 by Marcel Neumann, who was originally guitarist for 
Martin Kesici's band, and Tobias Schultka. The band was originally meant as a joke, but progressed into being a more 
serious musical duo. The name for the band has no particular meaning, although its origins were suggested from when 
the two original members were driving in a car operated by Marcel Neumann and an accident almost occurred. Neumann 
found Schultka "so funny that he briefly lost control of the vehicle." Many of their songs from this point were 
covers of German folk tales and nursery rhymes."""

component = dmc.Spoiler(
    showLabel="Show more",
    hideLabel="Hide",
    maxHeight=50,
    children=[dmc.Text(text)],
)



================================================
File: docs/spoiler/spoiler.md
================================================
---
name: Spoiler
description: Use the Spoiler component to hide long sections of content.
endpoint: /components/spoiler
package: dash_mantine_components
category: Data Display
---

.. toc::

### Simple Example

Use Spoiler to hide long sections of content. Pass `maxHeight` prop to control the point at which content will be
hidden under the spoiler and control to show/hide extra appears. If content height is less than `maxHeight`, spoiler
will just render children.

Props `hideLabel` and `showLabel` are required - they are used as spoiler toggle button label in corresponding state.

.. exec::docs.spoiler.simple
    :code: false

```python
import dash_mantine_components as dmc

# very long string
text = ""

component = dmc.Spoiler(
    showLabel="Show more",
    hideLabel="Hide",
    maxHeight=50,
    children=[dmc.Text(text)],
)
```

### Styles API

| Name    | Static selector          | Description                                    |
|:--------|:-------------------------|:-----------------------------------------------|
| root    | .mantine-Spoiler-root    | Root element                                   |
| content | .mantine-Spoiler-content | Wraps content to set max-height and transition |
| control | .mantine-Spoiler-control | Show/hide content control                      |

### Keyword Arguments

#### Spoiler

.. kwargs::Spoiler



================================================
File: docs/stack/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.Stack(
    [
        dmc.Button("1", variant="outline"),
        dmc.Button("2", variant="outline"),
        dmc.Button("3", variant="outline"),
    ],
    style={"height": 200},
    align="flex-start",
    justify="center",
)

configurator = Configurator(target)

configurator.add_select(
    "align", ["stretch", "center", "flex-end", "flex-start"], "flex-start"
)
configurator.add_select(
    "justify",
    ["space-between", "space-around", "center", "flex-end", "flex-start"],
    "center",
)
configurator.add_slider("gap", "sm")


component = configurator.panel



================================================
File: docs/stack/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    [
        dmc.Button("1", variant="outline"),
        dmc.Button("2", variant="outline"),
        dmc.Button("3", variant="outline"),
    ],
    align="center",
    gap="xl",
)



================================================
File: docs/stack/stack.md
================================================
---
name: Stack
description: Use Stack component to compose elements and components in a vertical flex container
endpoint: /components/stack
package: dash_mantine_components
category: Layout
---

.. toc::

### Usage

`Stack` is a vertical flex container. If you need a horizontal flex container, use `Group` component instead. If you
need to have full control over flex container properties, use `Flex` component.

Adjust stack styles with `align`, `justify`, and `spacing` props.

.. exec::docs.stack.simple

### Interactive Demo

.. exec::docs.stack.interactive
    :code: false

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### Stack Selectors

| Selector | Static selector        | Description    |
|----------|-------------------------|----------------|
| root     | .mantine-Stack-root     | Root element   |



#### Stack CSS Variables

| Selector | Variable         | Description                     |
|----------|------------------|---------------------------------|
| root     | --stack-align    | Controls `align-items` property |
|          | --stack-justify  | Controls `justify-content` property |
|          | --stack-gap      | Controls `gap` property         |


### Keyword Arguments

#### Stack

.. kwargs::Stack



================================================
File: docs/stepper/basic.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, State, ctx, callback

min_step = 0
max_step = 3
active = 1

component = html.Div(
    [
        dmc.Stepper(
            id="stepper-basic-usage",
            active=active,
            children=[
                dmc.StepperStep(
                    label="First step",
                    description="Create an account",
                    children=dmc.Text("Step 1 content: Create an account", ta="center"),
                ),
                dmc.StepperStep(
                    label="Second step",
                    description="Verify email",
                    children=dmc.Text("Step 2 content: Verify email", ta="center"),
                ),
                dmc.StepperStep(
                    label="Final step",
                    description="Get full access",
                    children=dmc.Text("Step 3 content: Get full access", ta="center"),
                ),
                dmc.StepperCompleted(
                    children=dmc.Text(
                        "Completed, click back button to get to previous step",
                        ta="center",
                    )
                ),
            ],
        ),
        dmc.Group(
            justify="center",
            mt="xl",
            children=[
                dmc.Button("Back", id="back-basic-usage", variant="default"),
                dmc.Button("Next step", id="next-basic-usage"),
            ],
        ),
    ]
)


@callback(
    Output("stepper-basic-usage", "active"),
    Input("back-basic-usage", "n_clicks"),
    Input("next-basic-usage", "n_clicks"),
    State("stepper-basic-usage", "active"),
    prevent_initial_call=True,
)
def update(back, next_, current):
    button_id = ctx.triggered_id
    step = current if current is not None else active
    if button_id == "back-basic-usage":
        step = step - 1 if step > min_step else step
    else:
        step = step + 1 if step < max_step else step
    return step



================================================
File: docs/stepper/color.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-stepper-color"

target = dmc.Stepper(
    active=1,
    children=[
        dmc.StepperStep(label="First step", description="Create an account"),
        dmc.StepperStep(label="Second step", description="Verify email"),
    ],
    id=TARGET_ID,
)

configurator = Configurator(target, TARGET_ID)

configurator.add_colorpicker("color", "indigo")
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "lg")

component = configurator.panel



================================================
File: docs/stepper/icons.py
================================================
import dash_mantine_components as dmc
from dash import callback, Output, Input, State, ctx
from dash_iconify import DashIconify

min_step = 0
max_step = 3
active = 1


def get_icon(icon):
    return DashIconify(icon=icon, height=20)


component = dmc.Container(
    [
        dmc.Stepper(
            id="stepper-custom-icons",
            active=active,
            children=[
                dmc.StepperStep(
                    label="First step",
                    description="Create an account",
                    icon=get_icon(icon="material-symbols:account-circle"),
                    progressIcon=get_icon(icon="material-symbols:account-circle"),
                    completedIcon=get_icon(icon="mdi:account-check"),
                    children=[
                        dmc.Text("Step 1 content: Create an account", ta="center")
                    ],
                ),
                dmc.StepperStep(
                    label="Second step",
                    description="Verify email",
                    icon=get_icon(icon="ic:outline-email"),
                    progressIcon=get_icon(icon="ic:outline-email"),
                    completedIcon=get_icon(
                        icon="material-symbols:mark-email-read-rounded"
                    ),
                    children=[dmc.Text("Step 2 content: Verify email", ta="center")],
                ),
                dmc.StepperStep(
                    label="Final step",
                    description="Get full access",
                    icon=get_icon(icon="material-symbols:lock-outline"),
                    progressIcon=get_icon(icon="material-symbols:lock-outline"),
                    completedIcon=get_icon(icon="material-symbols:lock-open-outline"),
                    children=[dmc.Text("Step 3 content: Get full access", ta="center")],
                ),
                dmc.StepperCompleted(
                    children=[
                        dmc.Text(
                            "Completed, click back button to get to previous step",
                            ta="center",
                        )
                    ]
                ),
            ],
        ),
        dmc.Group(
            justify="center",
            mt="xl",
            children=[
                dmc.Button("Back", id="back-custom-icons", variant="default"),
                dmc.Button("Next step", id="next-custom-icons"),
            ],
        ),
    ]
)


@callback(
    Output("stepper-custom-icons", "active"),
    Input("back-custom-icons", "n_clicks"),
    Input("next-custom-icons", "n_clicks"),
    State("stepper-custom-icons", "active"),
    prevent_initial_call=True,
)
def update_with_icons(back, next_, current):
    button_id = ctx.triggered_id
    step = current if current is not None else active
    if button_id == "back-custom-icons":
        step = step - 1 if step > min_step else step
    else:
        step = step + 1 if step < max_step else step
    return step



================================================
File: docs/stepper/loading.py
================================================
import dash_mantine_components as dmc
from dash import html

component = html.Div(
    [
        dmc.Stepper(
            active=1,
            children=[
                dmc.StepperStep(
                    label="First step",
                    description="Create an account",
                    children=dmc.Text("Step 1 content: Create an account", ta="center"),
                ),
                dmc.StepperStep(
                    label="Second step",
                    description="Verify email",
                    children=dmc.Text("Step 2 content: Verify email", ta="center"),
                    loading=True,
                ),
                dmc.StepperStep(
                    label="Final step",
                    description="Get full access",
                    children=dmc.Text("Step 3 content: Get full access", ta="center"),
                ),
            ],
        ),
    ]
)



================================================
File: docs/stepper/size.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-stepper-size"

target = dmc.Stepper(
    active=1,
    children=[
        dmc.StepperStep(label="First step", description="Create an account"),
        dmc.StepperStep(label="Second step", description="Verify email"),
    ],
    id=TARGET_ID,
)

configurator = Configurator(target, TARGET_ID)

configurator.add_number_input("iconSize", 42)

component = configurator.panel



================================================
File: docs/stepper/stepper.md
================================================
---
name: Stepper
description: Use the Stepper, StepperStep and StepperCompleted components to display content divided into a steps sequence
endpoint: /components/stepper
package: dash_mantine_components
category: Navigation
---

.. toc::

### Basic usage

.. exec::docs.stepper.basic

### Color, radius and size

You can use any color from Mantine's theme colors. Colors can also be set on individual steps.

.. exec::docs.stepper.color
    :code: false

```python
import dash_mantine_components as dmc

dmc.Stepper(
    active=1,
    color="green",
    radius="lg",
    size="sm", 
    children=[
        dmc.StepperStep(label="First step", description="Create an account"),
        dmc.StepperStep(label="Second step", description="Verify email"),
    ],
)
```

Component size is controlled by two props: `size` and `iconSize`. `size` prop controls icon size, label and description font size.
`iconSize` allows to overwrite icon size separately from other size values.

.. exec::docs.stepper.size
    :code: false

```python
import dash_mantine_components as dmc

dmc.Stepper(
    active=1,
    iconSize=42,
    children=[
        dmc.StepperStep(label="First step", description="Create an account"),
        dmc.StepperStep(label="Second step", description="Verify email"),
    ],
)
```

### Loading state

To indicate loading state set `loading` prop on `Step` component, `Loader` will replace step icon.

.. exec::docs.stepper.loading

### Custom icons

You can replace step icon by setting `icon` prop on Step component. To change completed check icon set `completedIcon` on Stepper component.
You can also change completed icon for each step, for example, to indicate error state.

.. exec::docs.stepper.icons

### Vertical orientation

.. exec::docs.stepper.vertical

### Styles API

| Name                    | Static selector                          | Description                                   |
|:------------------------|:-----------------------------------------|:----------------------------------------------|
| root                    | .mantine-Stepper-root                    | Root element                                  |
| steps                   | .mantine-Stepper-steps                   | Steps controls wrapper                        |
| separator               | .mantine-Stepper-separator               | Separator line between step controls          |
| verticalSeparator       | .mantine-Stepper-verticalSeparator       | Vertical separator line between step controls |
| separatorActive         | .mantine-Stepper-separatorActive         | Separator active modifier                     |
| verticalSeparatorActive | .mantine-Stepper-verticalSeparatorActive | Vertical separator active modifier            |
| content                 | .mantine-Stepper-content                 | Current step content wrapper                  |
| stepWrapper             | .mantine-Stepper-stepWrapper             | Wrapper for the step icon and separator       |
| step                    | .mantine-Stepper-step                    | Step control button                           |
| stepIcon                | .mantine-Stepper-stepIcon                | Step icon wrapper                             |
| stepCompletedIcon       | .mantine-Stepper-stepCompletedIcon       | Completed step icon, rendered within stepIcon |
| stepBody                | .mantine-Stepper-stepBody                | Contains stepLabel and stepDescription        |
| stepLabel               | .mantine-Stepper-stepLabel               | Step label                                    |
| stepDescription         | .mantine-Stepper-stepDescription         | Step description                              |
| stepLoader              | .mantine-Stepper-stepLoader              | Step loader                                   |

### Keyword Arguments

#### Stepper

.. kwargs::Stepper

#### StepperStep

.. kwargs::StepperStep

#### StepperCompleted

.. kwargs::StepperCompleted



================================================
File: docs/stepper/vertical.py
================================================
import dash_mantine_components as dmc

component = dmc.Stepper(
    active=1,
    orientation="vertical",
    children=[
        dmc.StepperStep(label="First step", description="Create an account"),
        dmc.StepperStep(label="Second step", description="Verify email"),
        dmc.StepperStep(label="Final step", description="Get full access"),
    ],
)



================================================
File: docs/style-props/props.md
================================================
---
name: Style Props
endpoint: /style-props
head: With style props you can add responsive styles to any Mantine component that supports these props.
description: With style props you can add responsive styles to any Mantine component that supports these props.
package: dash_mantine_components
category: Theming
order: 5  # sets order in navbar section
---

.. toc::

### Supported props

Style props add styles to the root element, if you want to style nested elements use [Styles API](/styles-api) instead.

.. exec::docs.style-props.props
    :code: false
    :border: false

### Theme values
Some style props can reference values from theme, for example `mt` will use `theme.spacing` value if you set `xs`, `sm`, `md`, `lg`, `xl`:

```python

# margin-top: theme.spacing.xs
dmc.Box(mt="xs")

# margin-top: theme.spacing.md * -1 
dmc.Box(mt="-md") 

# margin-top: auto 
dmc.Box(mt="auto")

# margin-top: 1rem 
dmc.Box(mt=16)

# margin-top: 5rem 
dmc.Box(mt="5rem") 


```

In `c`, `bd` and `bg` props you can reference colors from `theme.colors`:

```python

# Color: theme.colors.blue[theme.primaryShade]
dmc.Box(c="blue")

# Background: theme.colors.orange[1]
dmc.Box(bg="orange.1")

# Border: 1px solid theme.colors.red[6]
dmc.Box(bd="1px solid red.6")

# Color: if colorScheme is dark `var(--mantine-color-dark-2)`, if colorScheme is light `var(--mantine-color-gray-6)`
dmc.Box(c="dimmed")

# Color: if colorScheme is dark `var(--mantine-color-white)`, if colorScheme is light `var(--mantine-color-black)`
dmc.Box(c="bright")

# Background: #EDFEFF
dmc.Box(bg="#EDFEFF")

# Background: rgba(0, 34, 45, 0.6)
dmc.Box(bg="rgba(0, 34, 45, 0.6)")

```




### Responsive styles

You can pass a dictionary to style props to add responsive styles with style props. 
Note that responsive style props are less performant than regular style props, it is not recommended using them in large amounts.

.. exec::docs.style-props.responsive

Responsive values are calculated the following way:

- `base` value is used when none of the breakpoint values are provided
- `xs`, `sm`, `md`, `lg`, `xl` values are used when the viewport width is larger that the value of corresponding breakpoint specified in `dmc.DEFAULT_THEME`.

```python
import dash_mantine_components as dmc

dmc.Box(w={ "base": 320, "sm": 480, "lg": 640 })
```

In this case the element will have the following styles:

```css
/* Base styles added to element and then get overwritten with responsive values */
.element {
  width: 20rem;
}

/* 48em is theme.breakpoints.sm by default */
@media (min-width: 48em) {
  .element {
    width: 30rem;
  }
}

/* 75em is theme.breakpoints.lg by default */
@media (min-width: 75em) {
  .element {
    width: 40rem;
  }
}
```

Note that underlying Mantine transforms `px` to `rem`, but for most part you can ignore this.



================================================
File: docs/style-props/props.py
================================================
import dash_mantine_components as dmc

component = dmc.Table(
    horizontalSpacing=40,
    withColumnBorders=True,
    data={
        "head": ["Prop", "CSS Property"],
        "body": [
            ["bd", "border"],
            ["bg", "background"],
            ["bga", "background-attachment"],
            ["bgp", "background-position"],
            ["bgr", "background-repeat"],
            ["bgsz", "background-size"],
            ["bottom", "bottom"],
            ["c", "color"],
            ["display", "display"],
            ["ff", "fontFamily"],
            ["flex", "flex"],
            ["fs", "fontStyle"],
            ["fw", "fontWeight"],
            ["fz", "fontSize"],
            ["h", "height"],
            ["inset", "inset"],
            ["left", "left"],
            ["lh", "lineHeight"],
            ["lts", "letterSpacing"],
            ["m", "margin"],
            ["mah", "maxHeight"],
            ["maw", "maxWidth"],
            ["mb", "marginBottom"],
            ["me", "marginEnd"],
            ["mih", "minHeight"],
            ["miw", "minWidth"],
            ["ml", "marginLeft"],
            ["mr", "marginRight"],
            ["ms", "marginStart"],
            ["mt", "marginTop"],
            ["mx", "marginRight, marginLeft"],
            ["my", "marginTop, marginBottom"],
            ["opacity", "opacity"],
            ["p", "padding"],
            ["pb", "paddingBottom"],
            ["pe", "paddingEnd"],
            ["pl", "paddingLeft"],
            ["pos", "position"],
            ["pr", "paddingRight"],
            ["ps", "paddingStart"],
            ["pt", "paddingTop"],
            ["px", "paddingRight, paddingLeft"],
            ["py", "paddingTop, paddingBottom"],
            ["right", "right"],
            ["ta", "textAlign"],
            ["td", "textDecoration"],
            ["top", "top"],
            ["tt", "textTransform"],
            ["w", "width"],
        ],
    },
)



================================================
File: docs/style-props/responsive.py
================================================
import dash_mantine_components as dmc

component = dmc.Box(
    "Box with responsive style props",
    w={"base": 200, "sm": 400, "lg": 500},
    py={"base": "xs", "sm": "md", "lg": "xl"},
    bg={"base": "blue.7", "sm": "red.7", "lg": "green.7"},
    c="#fff",
    ta="center",
    mx="auto",
)



================================================
File: docs/styles-api/badge.py
================================================
import dash_mantine_components as dmc

component = dmc.Badge(
    "Badge 1",
    variant="dot",
    styles={
        "root": {"borderWidth": 1, "height": 30, "padding": 10},
        "inner": {"fontWeight": 500},
    },
)



================================================
File: docs/styles-api/button.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Button(
    "Settings",
    leftSection=DashIconify(icon="ic:baseline-settings-input-composite"),
    styles={"root": {"fontWeight": 400}, "section": {"width": 100}},
)



================================================
File: docs/styles-api/conditional.py
================================================
from dash import  html, callback, Output, Input, State
import dash_mantine_components as dmc

component = html.Div([
    dmc.TextInput(
        id="styles-input",
        label="Required Input",
        required=True,
    ),
    dmc.Button("Submit", id="styles-submit-btn")
])

@callback(
    Output("styles-input", "styles"),
    Input("styles-submit-btn", "n_clicks"),
    State("styles-input", "value"),
    prevent_initial_call=True
)
def update_styles(n_clicks, value):
    if not value:
        return {
            "input": {"borderColor": "red"},
            "label": {"color": "red"}
        }
    return {
        "input": {"borderColor": "green"},
        "label": {"color": "green"}
    }




================================================
File: docs/styles-api/data-attributes.py
================================================
import dash_mantine_components as dmc
from dash import html

component = dmc.Group(
    [
        dmc.Button("Default Button"),
        dmc.Button("Disabled Button", disabled=True, className="dmc-data-attributes-demo"),
        dmc.Button("Loading Button", loading=True, className="dmc-data-attributes-demo"),
        dmc.Button("Button with Left Section", leftSection=html.Div("left"), className="dmc-data-attributes-demo"),
    ],
    gap="sm"
)



================================================
File: docs/styles-api/datepickerinput.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack([
    dmc.DatePickerInput(
        label="Default Calendar style"
    ),
    dmc.DatePickerInput(
        label="Calendar without red weekend days",
        styles={"day": {"color": "var(--mantine-color-text)"}},
    )
])



================================================
File: docs/styles-api/input.py
================================================
import dash_mantine_components as dmc

component = dmc.TextInput(
    label="TextInput with custom styles",
    placeholder="TextInput with custom styles",
    description="Description below the input",
    w=300,
    styles={
        "input": {"borderColor": dmc.DEFAULT_THEME["colors"]["violet"][4]},
        "label": {
            "color": "blue",
            "backgroundColor": dmc.DEFAULT_THEME["colors"]["yellow"][1],
        },
    },
)



================================================
File: docs/styles-api/slider.py
================================================
import dash_mantine_components as dmc

component = dmc.Slider(
    value=69,
    classNames={"bar": "dmc-bar", "thumb": "dmc-thumb"},
)



================================================
File: docs/styles-api/styles.md
================================================
---
name: Styles API
endpoint: /styles-api
head: With Styles API you can overwrite styles of inner elements in Mantine components with classNames or styles props.
description: With Styles API you can overwrite styles of inner elements in Mantine components with classNames or styles props.
package: dash_mantine_components
category: Theming
order: 4  # sets order in navbar section
---

.. toc::


### What is Styles API

The Styles API is a set of properties that allows you to customize the style of any element inside a DMC component. All 
DMC components that have styles support the Styles API.

### Styles API selectors

Every DMC component that supports the Styles API has a set of element names that can be used to apply styles to inner
elements inside the component. For simplicity, these elements names are called selectors in the documentation. You can
find selectors information in each component's documentation.

Example of `dmc.Button` component selectors:


| Name    | Static selector         | Description                                                 |
|:--------|:------------------------|:------------------------------------------------------------|
| root    | .mantine-Button-root    | Root element                                                |
| loader  | .mantine-Button-loader  | Loader component, displayed only when `loading` prop is set |
| section | .mantine-Button-section | Left and right sections of the button                       |
| inner   | .mantine-Button-inner   | Contains all other elements, child of the `root` element    |
| label   | .mantine-Button-label   | Button children                                             |



1) You can use the  selectors from the "Name" column in `classNames` and `styles` component props:

    
    ```python
    import dash_mantine_components as dmc
    
    # Using `classNames`
    dmc.Button(
        "Button with custom classes",
        classNames={
                    # define the classes in a .css file in /assets
            "root": "my-root-class",   
            "label": "my-label-class",
            "inner": "my-inner-class",
        }
    )
    
    # Using inline `styles`
    dmc.Button(
        "Button with custom styles",
        styles={
            "root": {"backgroundColor": "red"},
            "label": {"color": "blue"},
            "inner": {"fontSize": 20},
        }
    )
    
    
    ``` 

2) You can use the selectors from the "Name" column in the `theme` prop in the `MantineProvider`.
    
    ```python
    # Using in the theme
    theme = {
        "components": {
            "Button": {
                "classNames": {
                    "root": "my-root-class",
                    "label": "my-label-class",
                    "inner": "my-inner-class",
                },
                "styles": {
                    "root": {"backgroundColor": "red"},
                    "label": {"color": "blue"},
                    "inner": {"fontSize": 20},
                }
            }
        }
    }
    
    
    app.layout = dmc.MantineProvider(    
        theme=theme,
        children={dmc.Button("Button")}
    )
    
    ```


3) You can use the selectors from the "Static selector" column in a `.css` file in the `/assets` folder. 
    
    ```css
    .mantine-Button-root {
        background-color: red;        
    }
    
     .mantine-Button-label {
        color: blue
     }
     
     .mantine-Button-inner {
         font-size: 20
     }     
    ```
4) Don't use classes like `m_77c9d27d` that you can see when inspecting elements in the browser. These classes are not
static and can change in different versions. For more information, refer to the Component Classes section below. 
    

### classNames Property

With the `classNames` property, you can add classes to inner elements of dmc components. It accepts a dictionary with 
selector names as keys and classes as values:

This example styles the Slider.  Find the selectors in [Slider Styles API](/components/slider#slider-selectors) section of the docs

.. exec::docs.styles-api.slider
    :code: false



The component is defined as:

```python
import dash_mantine_components as dmc

component = dmc.Slider(
    value=69,
    classNames={"bar": "dmc-bar", "thumb": "dmc-thumb"},
)
```

and include this in your `.css` file in the `/assets` folder:

```css
.dmc-bar {
    background-image: linear-gradient(to right, yellow, orange);
}

.dmc-thumb {
    border-color: orange;
    height: 20px;
    width: 20px;
    background-color: white;
}
```



### styles Property

`styles` prop can be used similarly to style individual elements inside a component. 

The `styles` property works similarly to `classNames`, but applies inline styles. Note that inline styles have higher
specificity than classes, so you cannot override them with classes without using `!important`. You cannot use 
pseudo-classes (for example, `:hover`, `:first-of-type`) and media queries with inline styles.

> Styles Property Usage
>
> While some examples may use the `styles` property for convenience, it is recommended to use `classNames` or `className`
> as the primary means of styling components, as it is more flexible and has better performance.

See some examples using the `styles` prop below.

### className Property (Static Classes)

Every component that supports the Styles API includes static classes that can be used to style components without relying on the `classNames` or `styles` properties. By default, static classes follow the format `.mantine-{ComponentName}-{selector}`. For example, the `root` selector of the `dmc.Button` component will have the class `.mantine-Button-root`.

Static classes make it easy to style components directly with CSS.

To demonstrate, add the following CSS to a `.css` file in the `/assets` directory of your Dash app:

```css
/* Global style for all dmc.Button components */
.mantine-Button-root {
    color: red;
}

/* Specific style for buttons with "my-button" class */
.my-button .mantine-Button-root {
    color: yellow;
}
```

Here’s how this CSS is applied to two buttons:

```python
import dash_mantine_components as dmc

component = dmc.Stack(
    [
        dmc.Button("Yellow Button", className="my-button"),
        dmc.Button("Red Button"),
    ]
)
```

#### Global vs. Specific Styling

By using global and specific styles together, you can define default styles for all components while customizing individual components as needed.

In the example above, note that:
- The Red Button is styled by the global rule `.mantine-Button-root`, which applies to all `dmc.Button` components. This rule sets its background color to red.
- The Yellow Button has a `className` of `'my-button'`, so it is styled by the more specific rule `.my-button. mantine-Button-root`, which overrides the global style and sets its background color to yellow.

Note that with components that are rendered within a portal, such as `Popover`, `Tooltip`, `Modal`, It is impossible to
style inner elements with static selectors because some elements will be rendered outside of the
component root and inner elements are not part of the component tree.  Either set `withinPortal=False` or use the
`classNames` or `styles` props.

### Component classes

If you inspect the browser, you will notice classes that look something like  `m_77c9d27d`. Those classes come from
Mantine and they are hashed class names generated at build time to ensure uniqueness and avoid naming collisions.

Note that these class names can change between different versions of Mantine as the styles are rebuilt or if the styles change.

Because of this, you shouldn't rely on or hardcode these specific class names in your code. Instead, you should:

1. Use the Styles API props (`classNames` and `styles`)
2. Use the static class names, such as `.mantine-Button-root` etc.

Example of what NOT to do:
```css
/* Don't do this - could break in future versions */
.m_77c9d27d {
  background: blue;
}
```

Instead do this:
```css
/* Do this - uses static class names */
.mantine-Button-root {
  background: blue;
}
```

Or:
```python
# Do this - uses Styles API
dmc.Button(
    "My Button",
    classNames={"root": "my-custom-button"}
)
```

### Data Attributes

Data attributes are custom attributes added to HTML elements that allow you to apply targeted styles or behavior based
on the component's state or configuration. In Dash Mantine Components, data attributes are dynamically added to elements
to reflect certain prop conditions or settings. This feature enables developers to write CSS rules that adapt to a 
component's state without needing to manage additional logic.

#### Using Data Attributes  

Data attributes follow the format `data-{attribute-name}` and can be used to style components directly in your CSS.

The data attributes are listed in the `Styles API`section for each component. Note that most components also have a
`data-dash-is-loading` attribute which is set based on the loading state coming from the dash renderer.

As an example, here are the data
attributes for `Button`:


| **Selector**   | **Attribute**         | **Condition**            | **Value**                       |
|----------------|-----------------------|---------------------------|---------------------------------|
| `root`         | `data-disabled`       | When `disabled` is set    | –                               |
| `root, label`  | `data-loading`        | When `loading` is set     | –                               |
| `root`         | `data-block`          | When `fullWidth` is set   | –                               |
| `root`         | `data-with-left-section`  | When `leftSection` is set  | –                               |
| `root`         | `data-with-right-section` | When `rightSection` is set | –                               |
| `section`      | `data-position`       | –                         | Section position: `left` or `right` |


Here’s how you can use data attributes to customize a `dmc.Button`:

```css

.dmc-data-attributes-demo[data-disabled="true"] {
    color: red;
    cursor: not-allowed;
}

.dmc-data-attributes-demo[data-loading="true"] {
    background-color: darkgray;
}

.dmc-data-attributes-demo .mantine-Button-section[data-position="left"] {
    color: var(--mantine-color-yellow-filled);
}
```

.. exec::docs.styles-api.data-attributes

### More Examples

Here are more examples.  Please refer to the Styles API section on each component's page for more information on the selectors.

#### Button

.. exec::docs.styles-api.button

#### Badge

.. exec::docs.styles-api.badge

#### TextInput

.. exec::docs.styles-api.input


#### Styles with Callbacks

.. exec::docs.styles-api.conditional


#### Slider

Don't miss this detailed example of styling a component in the [Styling the Slider](/components/slider#styling-the-slider) section.

- Dynamic Theming with `light-dark`: Styles adapt automatically to light and dark themes using the `light-dark` function and Mantine's color variables.  
- Track Customization: Adjusts the background color of the slider track to theme-specific colors.  
- Mark Customization:  
  - Changes the size, shape, and border of slider marks.  
  - Applies conditional styling to filled marks with the `[data-filled]` attribute.  
- Mark Label Customization: Modifies the font size, color, and spacing of labels displayed next to marks.  
- Thumb Customization: Customizes the size, background color, border, and shadow of the slider's draggable thumb.  

#### Tabs

See another detailed example of styling a component in the [Styling the Tabs](/components/tabs#styling-the-tabs) section.


#### DatePickerInput

This is an example of styling elements that are in a portal, such as Popover, Modal, Tooltip.  By default, the dropdown
calendar is rendered using the Popover component and `withinPortal=True`.  It's necessary to use the `classNames` or the
`styles` properties because the static selectors cannot target elements in the portal.


.. exec::docs.styles-api.datepickerinput





================================================
File: docs/switch/callback.py
================================================
import dash_mantine_components as dmc
from dash import html, Output, Input, callback

component = html.Div(
    [
        dmc.Switch(id="switch-example", label="Use default settings.", checked=True),
        dmc.Space(h=10),
        dmc.Text(id="switch-settings"),
    ]
)


@callback(Output("switch-settings", "children"), Input("switch-example", "checked"))
def settings(checked):
    return f"Using {'default' if checked else 'custom'} settings"



================================================
File: docs/switch/icons.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Switch(
    offLabel=DashIconify(icon="radix-icons:moon", width=20),
    onLabel=DashIconify(icon="radix-icons:sun", width=20),
    size="xl",
)



================================================
File: docs/switch/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-switch"

target = dmc.Center(
    dmc.Switch(label="I agree to sell my privacy", checked=True, id=TARGET_ID)
)

configurator = Configurator(target, TARGET_ID)

configurator.add_segmented_control("labelPosition", ["right", "left"], "right")
configurator.add_text_input(
    "label", "I agree to sell my privacy", **{"placeholder": "Label"}
)
configurator.add_text_input("description", "", **{"placeholder": "Description"})
configurator.add_text_input("error", "", **{"placeholder": "Error"})
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "lg")
configurator.add_colorpicker("color", "indigo")
configurator.add_switch("disabled", False)

component = configurator.panel



================================================
File: docs/switch/label.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    [
        dmc.Switch(onLabel="ON", offLabel="OFF", radius="xl", size=x)
        for x in ["xs", "sm", "md", "lg", "xl"]
    ]
)



================================================
File: docs/switch/switch.md
================================================
---
name: Switch
description: Use the Switch component to capture boolean input from user.
endpoint: /components/switch
package: dash_mantine_components
category: Inputs
---

.. toc::

### Introduction

.. exec::docs.switch.interactive
    :code: false

### Radius and Size

Set the radius and size of the Switch component using the `radius` and `size` prop respectively.

```python
import dash_mantine_components as dmc

dmc.Switch(
    size="lg",
    radius="sm",
    label="Enable this option",
    checked=True
)
```

### Callbacks

Use the property `checked` to use dmc.Switch in callbacks.

.. exec::docs.switch.callback

### Inner Labels

```python
import dash_mantine_components as dmc

dmc.Switch(
    label="I agree to sell my privacy",
    onLabel="ON",
    offLabel="OFF"
)
```

.. exec::docs.switch.label
    :code: false

### Icon Labels

You can also add icons in the switch labels.

.. exec::docs.switch.icons

### Thumb Icon

.. exec::docs.switch.thumb

### Styles API

| Name         | Static selector              | Description                                     |
|:-------------|:-----------------------------|:------------------------------------------------|
| root         | .mantine-Switch-root         | Root element                                    |
| track        | .mantine-Switch-track        | Switch track, contains `thumb` and `trackLabel` |
| trackLabel   | .mantine-Switch-trackLabel   | Label displayed inside `track`                  |
| thumb        | .mantine-Switch-thumb        | Thumb displayed inside `track`                  |
| input        | .mantine-Switch-input        | Input element, hidden by default                |
| body         | .mantine-Switch-body         | Input body, contains all other elements         |
| labelWrapper | .mantine-Switch-labelWrapper | Contains `label`, `description` and `error`     |
| label        | .mantine-Switch-label        | Label element                                   |
| description  | .mantine-Switch-description  | Description displayed below the label           |
| error        | .mantine-Switch-error        | Error message displayed below the label         |

### Keyword Arguments

#### Switch

.. kwargs::Switch



================================================
File: docs/switch/thumb.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Switch(
    thumbIcon=DashIconify(
        icon="tabler:walk", width=16, color=dmc.DEFAULT_THEME["colors"]["teal"][5]
    ),
    size="lg",
    color="teal",
    checked=True,
)



================================================
File: docs/table/data.py
================================================
import dash_mantine_components as dmc

component = dmc.Table(
    data={
        "caption": "Some elements from periodic table",
        "head": ["Element position", "Atomic mass", "Symbol", "Element name"],
        "body": [
            [6, 12.011, "C", "Carbon"],
            [7, 14.007, "N", "Nitrogen"],
            [39, 88.906, "Y", "Yttrium"],
            [56, 137.33, "Ba", "Barium"],
            [58, 140.12, "Ce", "Cerium"],
        ],
    }
)



================================================
File: docs/table/simple.py
================================================
import dash_mantine_components as dmc

elements = [
    {"position": 6, "mass": 12.011, "symbol": "C", "name": "Carbon"},
    {"position": 7, "mass": 14.007, "symbol": "N", "name": "Nitrogen"},
    {"position": 39, "mass": 88.906, "symbol": "Y", "name": "Yttrium"},
    {"position": 56, "mass": 137.33, "symbol": "Ba", "name": "Barium"},
    {"position": 58, "mass": 140.12, "symbol": "Ce", "name": "Cerium"},
]

rows = [
    dmc.TableTr(
        [
            dmc.TableTd(element["position"]),
            dmc.TableTd(element["name"]),
            dmc.TableTd(element["symbol"]),
            dmc.TableTd(element["mass"]),
        ]
    )
    for element in elements
]

head = dmc.TableThead(
    dmc.TableTr(
        [
            dmc.TableTh("Element Position"),
            dmc.TableTh("Element Name"),
            dmc.TableTh("Symbol"),
            dmc.TableTh("Atomic Mass"),
        ]
    )
)
body = dmc.TableTbody(rows)
caption = dmc.TableCaption("Some elements from periodic table")

component = dmc.Table([head, body, caption])



================================================
File: docs/table/spacing.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.Table(
    data={
        "caption": "Some elements from periodic table",
        "head": ["Element position", "Atomic mass", "Symbol", "Element name"],
        "body": [
            [6, 12.011, "C", "Carbon"],
            [7, 14.007, "N", "Nitrogen"],
            [39, 88.906, "Y", "Yttrium"],
            [56, 137.33, "Ba", "Barium"],
            [58, 140.12, "Ce", "Cerium"],
        ],
    }
)

configurator = Configurator(target)
configurator.add_slider("horizontalSpacing", "xs")
configurator.add_slider("verticalSpacing", "xs")

component = configurator.panel



================================================
File: docs/table/striped.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.Table(
    striped=True,
    highlightOnHover=True,
    withTableBorder=True,
    withColumnBorders=True,
    data={
        "caption": "Some elements from periodic table",
        "head": ["Element position", "Atomic mass", "Symbol", "Element name"],
        "body": [
            [6, 12.011, "C", "Carbon"],
            [7, 14.007, "N", "Nitrogen"],
            [39, 88.906, "Y", "Yttrium"],
            [56, 137.33, "Ba", "Barium"],
            [58, 140.12, "Ce", "Cerium"],
        ],
    },
)

configurator = Configurator(target)
configurator.add_switch("striped", True)
configurator.add_switch("highlightOnHover", True)
configurator.add_switch("withTableBorder", True)
configurator.add_switch("withColumnBorders", True)

component = configurator.panel



================================================
File: docs/table/table.md
================================================
---
name: Table
description: Use the Table component to display tables with Mantine's theme styles. An alternative to html.Table
endpoint: /components/table
package: dash_mantine_components
category: Typography
---

.. toc::

### Simple Example

Use Table component to add Mantine styled tables in your app. use `dmc.Table` and associated components as
drop-in replacements for `html.Table` and associated components respectively.

.. exec::docs.table.simple

### data prop

You can use `data` prop to automatically generate table rows from raw data. 
`data` prop accepts an object with the following properties: `head`, `foot`, `body`, `caption`:

.. exec::docs.table.data

### Spacing

To control spacing use `horizontalSpacing` and `verticalSpacing` props. Both props support spacing from Mantine's theme
and number values to set cell padding in px.

```python
import dash_mantine_components as dmc

dmc.Table(
    verticalSpacing="sm",
    horizontalSpacing=10,
    data={...}
)
```

.. exec::docs.table.spacing
    :code: false

### Striped and Rows Hover

```python
import dash_mantine_components as dmc

dmc.Table(
    striped=True,
    highlightOnHover=True,
    withTableBorder=True,
    withColumnBorders=True,
    data={...}
)
```

.. exec::docs.table.striped
    :code: false

### Styles API

| Name    | Static selector        | Description                                   |
|:--------|:-----------------------|:----------------------------------------------|
| table   | .mantine-Table-table   | Root `table` element (`Table` component)      |
| thead   | .mantine-Table-thead   | `thead` element (`Table.Thead` component)     |
| tbody   | .mantine-Table-tbody   | `tbody` element (`Table.Tbody` component)     |
| tfoot   | .mantine-Table-tfoot   | `tfoot` element (`Table.Tfoot` component)     |
| tr      | .mantine-Table-tr      | `tr` element (`Table.Tr` component)           |
| th      | .mantine-Table-th      | `th` element (`Table.Th` component)           |
| td      | .mantine-Table-td      | `td` element (`Table.Td` component)           |
| caption | .mantine-Table-caption | `caption` element (`Table.Caption` component) |

### Keyword Arguments

#### Table

.. kwargs::Table



================================================
File: docs/tabs/activation.py
================================================
import dash_mantine_components as dmc

component = dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab("Gallery", value="gallery"),
                dmc.TabsTab("Messages", value="messages"),
                dmc.TabsTab("Settings", value="settings"),
            ]
        ),
        dmc.TabsPanel("Gallery tab content", value="gallery"),
        dmc.TabsPanel("Messages tab content", value="messages"),
        dmc.TabsPanel("Settings tab content", value="settings"),
    ],
    value="gallery",
    activateTabWithKeyboard=False
)



================================================
File: docs/tabs/callback.py
================================================
import dash_mantine_components as dmc
from dash import Input, Output, html, callback

from lib.utils import create_graph

component = html.Div(
    [
        dmc.Tabs(
            [
                dmc.TabsList(
                    [
                        dmc.TabsTab("Tab one", value="1"),
                        dmc.TabsTab("Tab two", value="2"),
                    ]
                ),
            ],
            id="tabs-example",
            value="1",
        ),
        html.Div(id="tabs-content", style={"paddingTop": 10}),
    ]
)


@callback(Output("tabs-content", "children"), Input("tabs-example", "value"))
def render_content(active):
    if active == "1":
        return [dmc.Text("Tab One selected", my=10), create_graph()]
    else:
        return [dmc.Text("Tab Two selected", my=10), create_graph()]



================================================
File: docs/tabs/color.py
================================================
import dash_mantine_components as dmc

component = dmc.Tabs(
    color="teal",
    value="first",
    children=[
        dmc.TabsList(
            children=[
                dmc.TabsTab("Teal tab", value="first"),
                dmc.TabsTab("Blue tab", value="second", color="blue"),
            ]
        ),
        dmc.TabsPanel(
            "First tab color is teal, it gets this value from context",
            value="first",
            pt="xs",
        ),
        dmc.TabsPanel(
            "Second tab color is blue, it gets this value from props, props have the priority and will override context value",
            value="second",
            pt="xs",
        ),
    ],
)



================================================
File: docs/tabs/content.py
================================================
import dash_mantine_components as dmc

from lib.utils import create_graph

component = dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab("Tab one", value="1"),
                dmc.TabsTab("Tab two", value="2"),
                dmc.TabsTab("Tab three", value="3"),
            ]
        ),
        dmc.TabsPanel(create_graph(), value="1"),
        dmc.TabsPanel(create_graph(), value="2"),
        dmc.TabsPanel(create_graph(), value="3"),
    ],
    value="1",
)



================================================
File: docs/tabs/deactivation.py
================================================
import dash_mantine_components as dmc

component = dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab("Gallery", value="gallery"),
                dmc.TabsTab("Messages", value="messages"),
                dmc.TabsTab("Settings", value="settings"),
            ]
        ),
        dmc.TabsPanel("Gallery tab content", value="gallery"),
        dmc.TabsPanel("Messages tab content", value="messages"),
        dmc.TabsPanel("Settings tab content", value="settings"),
    ],
    value="gallery",
    allowTabDeactivation=True
)



================================================
File: docs/tabs/disabled.py
================================================
import dash_mantine_components as dmc

component = dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab("Gallery", value="gallery"),
                dmc.TabsTab("Messages", value="messages", disabled=True),
                dmc.TabsTab("Settings", value="settings"),
            ]
        ),
        dmc.TabsPanel("Gallery tab content", value="gallery"),
        dmc.TabsPanel("Messages tab content", value="messages"),
        dmc.TabsPanel("Settings tab content", value="settings"),
    ],
    value="gallery"
)



================================================
File: docs/tabs/icons.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab(
                    "Messages",
                    leftSection=DashIconify(icon="tabler:message"),
                    value="messages",
                ),
                dmc.TabsTab(
                    "Settings",
                    leftSection=DashIconify(icon="tabler:settings"),
                    value="settings",
                ),
            ]
        ),
    ],
    value="messages",
)



================================================
File: docs/tabs/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-tabs"

target = dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab("Gallery", value="gallery"),
                dmc.TabsTab("Messages", value="messages"),
                dmc.TabsTab("Settings", value="settings"),
            ]
        ),
        dmc.TabsPanel("Gallery tab content", value="gallery", pt="xs"),
        dmc.TabsPanel("Messages tab content", value="messages", pt="xs"),
        dmc.TabsPanel("Settings tab content", value="settings", pt="xs"),
    ],
    value="gallery",
    id=TARGET_ID,
)


configurator = Configurator(target, TARGET_ID)
configurator.add_colorpicker("color", "red")
configurator.add_segmented_control(
    "variant", ["default", "outline", "pills"], "default"
)
configurator.add_slider("radius", "md")
configurator.add_segmented_control(
    "orientation", ["horizontal", "vertical"], "horizontal"
)

component = configurator.panel



================================================
File: docs/tabs/inverted.py
================================================
import dash_mantine_components as dmc

component = dmc.Tabs(
    [
        dmc.TabsPanel("Gallery tab content", value="gallery", pb="xs"),
        dmc.TabsPanel("Messages tab content", value="messages", pb="xs"),
        dmc.TabsPanel("Settings tab content", value="settings", pb="xs"),
        dmc.TabsList(
            [
                dmc.TabsTab("Gallery", value="gallery"),
                dmc.TabsTab("Messages", value="messages"),
                dmc.TabsTab("Settings", value="settings", ml="auto"),
            ]
        ),
    ],
    value="gallery",
    inverted=True,
)



================================================
File: docs/tabs/position.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-tabs-position"

target = dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab("Gallery", value="gallery"),
                dmc.TabsTab("Messages", value="messages"),
                dmc.TabsTab("Settings", value="settings"),
            ],
            id=TARGET_ID,
        ),
    ],
    value="gallery",
)


configurator = Configurator(target, TARGET_ID)

configurator.add_select(
    "justify", ["flex-start", "center", "flex-end", "space-around"], "center"
)
configurator.add_switch("grow", False)

component = configurator.panel



================================================
File: docs/tabs/right.py
================================================
import dash_mantine_components as dmc

component = dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab("Gallery", value="gallery"),
                dmc.TabsTab("Messages", value="messages"),
                dmc.TabsTab("Settings", value="settings", ml="auto"),
            ]
        ),
    ],
    value="gallery",
)



================================================
File: docs/tabs/section.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab(
                    "Messages",
                    rightSection=dmc.Badge(
                        "6", size="xs", p=0, variant="filled", circle=True
                    ),
                    value="messages",
                ),
                dmc.TabsTab(
                    "Settings",
                    rightSection=DashIconify(icon="tabler:alert-circle", width=16),
                    value="settings",
                ),
            ]
        ),
    ],
    value="messages",
)



================================================
File: docs/tabs/styleprops.py
================================================
import dash_mantine_components as dmc

component = dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab("Gallery", value="gallery"),
                dmc.TabsTab("Messages", value="messages"),
                dmc.TabsTab("Settings", value="settings"),
            ],
            grow=True,
            bd="1px solid var(--mantine-color-default-border)"
        ),
        dmc.TabsPanel("Gallery tab content", value="gallery"),
        dmc.TabsPanel("Messages tab content", value="messages"),
        dmc.TabsPanel("Settings tab content", value="settings"),
    ],
    color="green.3",
    autoContrast=True,
    variant="pills",
    value="gallery",
)



================================================
File: docs/tabs/styles.py
================================================
import dash_mantine_components as dmc

component = dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab("Gallery", value="gallery"),
                dmc.TabsTab("Messages", value="messages"),
                dmc.TabsTab("Settings", value="settings"),
            ],
            grow=True
        ),
        dmc.TabsPanel("Gallery tab content", value="gallery"),
        dmc.TabsPanel("Messages tab content", value="messages"),
        dmc.TabsPanel("Settings tab content", value="settings"),
    ],
    value="gallery",
    classNames={"tab": "dmc-tabs"}
)



================================================
File: docs/tabs/tabs.md
================================================
---
name: Tabs
description: Use the Tab and Tabs component to switch between views.
endpoint: /components/tabs
package: dash_mantine_components
category: Navigation
---

.. toc::

### Usage

.. exec::docs.tabs.interactive
    :code: false


```python
import dash_mantine_components as dmc

dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab("Gallery", value="gallery"),
                dmc.TabsTab("Messages", value="messages"),
                dmc.TabsTab("Settings", value="settings"),
            ]
        ),
        dmc.TabsPanel("Gallery tab content", value="gallery"),
        dmc.TabsPanel("Messages tab content", value="messages"),
        dmc.TabsPanel("Settings tab content", value="settings"),
    ],
    color="red", # default is blue
    orientation="horizontal", # or "vertical"
    variant="default", # or "outline" or "pills"
    value="gallery"
)
```

### Variants

Use the `variant` can be set to `"default"`,  `"outline"` or `"pills"`

.. exec::docs.tabs.variant
    :code: false

### Change colors
To change colors of all tabs, set `color` on `Tabs` component, to change color of the individual tab, set `color`
on `TabsTab`.


.. exec::docs.tabs.color

### Icons on right or left

You can use any dash component as icon and rightSection in dmc.TabsTab component.

.. exec::docs.tabs.icons

.. exec::docs.tabs.section

### Tabs Position

`Tabs` controls position is controlled with `grow` and `justify` properties in `TabsList` component. If `grow` property 
is set to `True`, controls will take 100% of available space and `justify` property is ignored.

```python
import dash_mantine_components as dmc

dmc.Tabs(
    children=[
        dmc.TabsList(
            justify="right",
            grow=False,
            children=[...],
        )
        # tabs panel below
    ]
)
```

.. exec::docs.tabs.position
    :code: false

### Separated Tabs

To display tab on the opposite side, set `margin-left` to auto with `ml="auto"` in `TabsTab` component.

.. exec::docs.tabs.right

### Inverted Tabs

To make tabs inverted, place `TabsPanel` components before `TabsList` and add `inverted=True` prop to `Tabs` component.

.. exec::docs.tabs.inverted

### Vertical Tabs placement

To change placement of `TabsList` in vertical orientation, set `placement` prop in `Tabs`.

.. exec::docs.tabs.vertical
    :code: false

### Disabled tabs

Set `disabled=True` prop on `TabsTab` component to disable tab. Disabled tab cannot be activated with mouse or keyboard,
and they will be skipped when user navigates with arrow keys:

.. exec::docs.tabs.disabled

### Activation mode
By default, tabs are activated when user presses arrows keys or Home/End keys. To disable that set
`activateTabWithKeyboard=False` on `Tabs` component.  

This can be useful if the tab content is updated in a long running callback.  Try clicking on a tab to focus, then
navigate to other tabs with arrow keys, or home/end keys:

.. exec::docs.tabs.activation
    :code: false



```python
import dash_mantine_components as dmc

dmc.Tabs(
    activateTabWithKeyboard=False,
    children=[
        # tabs content
    ],    
)
```

### Tab deactivation
By default, active tab cannot be deactivated. To allow that set `allowTabDeactivation=True` on Tabs component:

Try clicking on the active tab to see the deactivated state:


.. exec::docs.tabs.deactivation
    :code: false


### Content As Callback

Attach a callback to the Tabs `value` prop and update a container's `children` property in your callback.

.. exec::docs.tabs.callback

### Content As Tab Children

Instead of displaying the content through a callback, you can embed the content directly as the `children` property in
the Tab component.

.. exec::docs.tabs.content




### Styling the Tabs

#### With Props  

This example demonstrates how to style tabs using only props, without requiring additional CSS files:  

- **Variant**: Sets `variant="pills"` to make the tabs resemble buttons.  
- **Grow Prop**: Uses the `grow` prop on the `TabsList` component, causing the tabs to expand and fill the full width of the viewport.  
- **Border**: Adds a border around the tabs with the `bd` prop. For more details, see the [Style Props](/style-props) section.  
- **Border Color**: Sets the border color using the Mantine CSS variable `var(--mantine-color-default-border)`, ensuring a border color that works well in both light and dark modes. See the [Colors](/colors) section for more details.  
- **Active Tab Color**: Sets the active tab color with `color="green.3"`. This specifies a lighter shade of a built-in color. Mantine’s color palette includes 10 shades for each color, indexed from 0 (lightest) to 9 (darkest). Learn more in the [Colors](/colors) section.  
- **Auto Contrast**: Enables `autoContrast=True` to automatically adjust the text color for better readability when using lighter or darker background colors. Additional details can be found in the [Colors](/colors) section.  

.. exec::docs.tabs.styleprops


#### With Styles API  

This example demonstrates styling tabs using the Styles API, allowing for precise control over the appearance of each element in the tabs component. For more information, see the Styles API section below.  

.. exec::docs.tabs.styles

Put the following in a `.css` file in the `/assets` folder

```css
.dmc-tabs {
  position: relative;
  border: 1px solid light-dark(var(--mantine-color-gray-2), var(--mantine-color-dark-4));
  background-color: light-dark(var(--mantine-color-white), var(--mantine-color-dark-6));

  &:first-of-type {
    border-radius: 4px 0 0 4px;
  }

  &:last-of-type {
    border-radius: 0 4px 4px 0;
  }

  & + & {
    border-left-width: 0;
  }

  &:hover {
    background-color: light-dark(var(--mantine-color-gray-0), var(--mantine-color-dark-5));
  }

  &[data-active] {
    z-index: 1;
    background-color: var(--mantine-color-blue-filled);
    border-color: var(--mantine-color-blue-filled);
    color: var(--mantine-color-white);

    &:hover {
      background-color: var(--mantine-color-blue-filled-hover);
    }
  }
}

```

### Styles API


This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

Refer to the Mantine Tabs Style API [interactive demo](https://mantine.dev/core/tabs/#styles-api) for help in identifying each selector.

#### Tabs Selectors


| Selector     | Static selector             | Description                              |
|--------------|------------------------------|------------------------------------------|
| root         | .mantine-Tabs-root           | Root element (Tabs component)            |
| list         | .mantine-Tabs-list           | List of tabs (Tabs.List component)       |
| panel        | .mantine-Tabs-panel          | Panel with tab content (Tabs.Panel component) |
| tab          | .mantine-Tabs-tab            | Tab button (Tabs.Tab component)          |
| tabLabel     | .mantine-Tabs-tabLabel       | Label of Tabs.Tab                        |
| tabSection   | .mantine-Tabs-tabSection     | Left and right sections of Tabs.Tab      |



#### Tabs CSS Variables

| Selector | Variable        | Description                                                  |
|----------|-----------------|--------------------------------------------------------------|
| root     | --tabs-color    | Controls colors of Tabs.Tab, only applicable for `pills` or `default` variant |
|          | --tabs-radius   | Controls Tabs.Tab border-radius                              |



#### Tabs Data Attributes

| Selector          | Attribute          | Condition                                 | Value                        |
|-------------------|--------------------|-------------------------------------------|------------------------------|
| root, tab, list, panel | data-orientation  | –                                         | Value of `orientation` prop |
| root, tab, list   | data-placement     | `orientation` is "vertical" on Tabs component | Value of `placement` prop   |
| tab, list         | data-inverted      | `inverted` prop is set on Tabs component  | –                            |
| list              | data-grow          | `grow` prop is set on Tabs.List component | –                            |
| tabSection        | data-position      | –                                         | Position of the section (left or right) |



### Keyword Arguments

#### Tabs

.. kwargs::Tabs

#### TabsList

.. kwargs::TabsList

#### TabsPanel

.. kwargs::TabsPanel

#### Tab

.. kwargs::TabsTab



================================================
File: docs/tabs/variant.py
================================================
import dash_mantine_components as dmc

def make_tabs(variant):
    return dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab("Gallery", value="gallery"),
                dmc.TabsTab("Messages", value="messages"),
                dmc.TabsTab("Settings", value="settings"),
            ]
        ),
        dmc.TabsPanel(f'variant="{variant}"', value="gallery"),
        dmc.TabsPanel("Messages tab content", value="messages"),
        dmc.TabsPanel("Settings tab content", value="settings"),
    ],
    variant=variant,
    value="gallery",
    m="md"
)

component = dmc.Stack([
    make_tabs("default"),
    make_tabs("outline"),
    make_tabs("pills")
])


================================================
File: docs/tabs/vertical.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-tabs-vertical"

target = dmc.Tabs(
    [
        dmc.TabsList(
            [
                dmc.TabsTab("Gallery", value="gallery"),
                dmc.TabsTab("Messages", value="messages"),
                dmc.TabsTab("Settings", value="settings"),
            ],
        ),
        dmc.TabsPanel("Gallery tab content", value="gallery", px="xs"),
        dmc.TabsPanel("Messages tab content", value="messages", px="xs"),
        dmc.TabsPanel("Settings tab content", value="settings", px="xs"),
    ],
    value="gallery",
    orientation="vertical",
    placement="right",
    id=TARGET_ID,
)


configurator = Configurator(target, TARGET_ID)

configurator.add_select("placement", ["left", "right"], "right")


component = configurator.panel



================================================
File: docs/tagsinput/acceptvalueonblur.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback

component = html.Div(
    [
        dmc.TagsInput(
            label="Value is accepted on blur",
            placeholder="Select all you like!",
            id="framework-tags-input1",
            value=["Pandas", "NumPy"],
            w=400,
            mb=10,
        ),
        dmc.Text(id="tags-input-value1", mb="xl"),
        dmc.TagsInput(
            label="Value IS NOT accepted on blur",
            placeholder="Select all you like!",
            id="framework-tags-input2",
            value=["Pandas", "NumPy"],
            acceptValueOnBlur=False,
            w=400,
            mb=10,
        ),
        dmc.Text(id="tags-input-value2"),
    ]
)


@callback(
    Output("tags-input-value1", "children"), Input("framework-tags-input1", "value")
)
def select_value(value):
    return f"You selected {value}"


@callback(
    Output("tags-input-value2", "children"), Input("framework-tags-input2", "value")
)
def select_value(value):
    return f"You selected {value}"




================================================
File: docs/tagsinput/clearable.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    label="Press Enter to submit a tag",
    value=["React"],
    w=400,
    clearable=True,
)



================================================
File: docs/tagsinput/disabled.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    label="Disabled",
    disabled=True,
    value=["First", "Second"],
    w=400,
)



================================================
File: docs/tagsinput/disabledoptions.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    label="Enter tags",
    placeholder="Some tags are disabled",
    data = [
        {"value": "Pandas"},
        {"value": "NumPy"},
        {"value": "TensorFlow", "disabled": True},
        {"value": "PyTorch", "disabled": True},
    ],
    w=400,
)



================================================
File: docs/tagsinput/dropdown_animation.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    label="Your favorite library",
    placeholder="Pick values",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={"transitionProps": {"transition": "pop", "duration": 200}},
)



================================================
File: docs/tagsinput/dropdown_offset.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    label="Your favorite library",
    placeholder="Pick value",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={
        "position": "bottom",
        "middlewares": {"flip": False, "shift": False},
        "offset": 0,
    },
)



================================================
File: docs/tagsinput/dropdown_padding.py
================================================
import dash_mantine_components as dmc

component = dmc.Paper(
    [
        dmc.TagsInput(
            label="Zero padding",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick value",
            comboboxProps={"dropdownPadding": 0},
            w=400,
        ),
        dmc.TagsInput(
            label="10px padding",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick value",
            comboboxProps={"dropdownPadding": 10},
            w=400,
            mt="md",
        ),
    ]
)



================================================
File: docs/tagsinput/dropdown_position.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    label="Your favorite library",
    placeholder="Pick value",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={"position": "top", "middlewares": {"flip": False, "shift": False}},
)



================================================
File: docs/tagsinput/dropdown_shadow.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    label="Your favorite library",
    placeholder="Pick value",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={"shadow": "md"},
)



================================================
File: docs/tagsinput/dropdown_width.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    label="Your favorite library",
    placeholder="Pick value",
    data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
    comboboxProps={"position": "bottom-start", "width": 200},
)



================================================
File: docs/tagsinput/duplicates.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    label="Press Enter to submit a tag",
    placeholder="Duplicates are allowed",
    allowDuplicates=True,
    w=400,
)



================================================
File: docs/tagsinput/grouping.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    data=[
        {
            "group": "Data Analysis",
            "items": [
                {"value": "Pandas", "label": "Pandas"},
                {"value": "NumPy", "label": "NumPy"},
            ],
        },
        {
            "group": "Deep Learning",
            "items": [
                {"value": "TensorFlow", "label": "TensorFlow"},
                {"value": "PyTorch", "label": "PyTorch"},
            ],
        },
    ],
    w=400,
)



================================================
File: docs/tagsinput/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-tags-input"
target = dmc.Center(
    dmc.TagsInput(
        label="",
        placeholder="placeholder",
        data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
        w=250,
        id=TARGET_ID,
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_text_input(
    "placeholder", "Select placeholder", **{"placeholder": "Placeholder"}
)
configurator.add_text_input("label", "Input Label", **{"placeholder": "Label"})
configurator.add_text_input("description", "", **{"placeholder": "Description"})
configurator.add_text_input("error", "", **{"placeholder": "Error"})
configurator.add_select("variant", ["default", "filled", "unstyled"], "default")
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "sm")
configurator.add_switch("withAsterisk", True)
configurator.add_switch("disabled", False)
configurator.add_switch("clearable", True)


component = configurator.panel



================================================
File: docs/tagsinput/large_data_sets.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    label="100,000 options",
    data=[f"Option {i}" for i in range(100000)],
    placeholder="use limit to optimize performance",
    limit=5,
    w=400,
)



================================================
File: docs/tagsinput/left_right.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Paper(
    [
        dmc.TagsInput(
            label="Your favorite library",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick values",
            leftSectionPointerEvents="none",
            leftSection=DashIconify(icon="bi-book"),
            w=400,
        ),
        dmc.TagsInput(
            label="Your favorite library",
            data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
            placeholder="Pick values",
            rightSectionPointerEvents="none",
            rightSection=DashIconify(icon="bi-book"),
            w=400,
            mt="md",
        ),
    ]
)



================================================
File: docs/tagsinput/max-selected.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    label="Select frameworks",
    description="You can select a maximum of 3 frameworks.",
    maxTags=3,
    w=400,
)



================================================
File: docs/tagsinput/opened.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback

component = html.Div(
    [
        dmc.Button("Toggle dropdown", id="btn-tags-opened", n_clicks=0),
        dmc.TagsInput(
            label="Select your favorite library",
            placeholder="Select value",
            id="tags-opened",
            value=["pd"],
            data=[
                {"value": "pd", "label": "Pandas"},
                {"value": "np", "label": "NumPy"},
                {"value": "tf", "label": "TensorFlow"},
                {"value": "torch", "label": "PyTorch"},
            ],
            w=400,
            mb=10,
        ),
    ]
)


@callback(
    Output("tags-opened", "dropdownOpened"), Input("btn-tags-opened", "n_clicks")
)
def select_value(n):
    if n % 2 == 0:
        return False
    return True



================================================
File: docs/tagsinput/popover.py
================================================
import dash_mantine_components as dmc

component = dmc.Popover(
    width=300,
    position="bottom",
    withArrow=True,
    shadow="md",
    children=[
        dmc.PopoverTarget(dmc.Button("Toggle Popover")),
        dmc.PopoverDropdown(
            dmc.TagsInput(
                label="Your favorite library",
                placeholder="Pick value",
                data=["Pandas", "NumPy", "TensorFlow", "PyTorch"],
                comboboxProps={"withinPortal": False},
            )
        ),
    ],
)



================================================
File: docs/tagsinput/readonly.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    label="Read only",
    placeholder="Enter tag",
    readOnly=True,
    value=["First", "Second"],
    w=400,
)



================================================
File: docs/tagsinput/scrollable.py
================================================
import dash_mantine_components as dmc

component = dmc.Paper(
    [
        dmc.TagsInput(
            label="Scrollable dropdown",
            data=[f"Option {i}" for i in range(100)],
            placeholder="Pick value",
            maxDropdownHeight=300,
            w=400,
        ),
        dmc.TagsInput(
            label="With native scroll",
            data=[f"Option {i}" for i in range(100)],
            placeholder="Pick value",
            withScrollArea=False,
            styles={"dropdown": {"maxHeight": 200, "overflowY": "auto"}},
            w=400,
            mt="md",
        ),
    ]
)



================================================
File: docs/tagsinput/simple.py
================================================
import dash_mantine_components as dmc
from dash import Output, Input, html, callback

component = html.Div(
    [
        dmc.TagsInput(
            label="Select frameworks",
            placeholder="Select all you like!",
            id="framework-tags-input",
            value=["ng", "vue"],
            w=400,
            mb=10,
        ),
        dmc.Text(id="tags-input-value"),
    ]
)


@callback(
    Output("tags-input-value", "children"), Input("framework-tags-input", "value")
)
def select_value(value):
    return ", ".join(value)



================================================
File: docs/tagsinput/split.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    label="Press Enter to submit a tag",
    placeholder="Enter tag",
    splitChars=[",", " ", "|"],
    w=400,
)



================================================
File: docs/tagsinput/suggestions.py
================================================
import dash_mantine_components as dmc

component = dmc.TagsInput(
    w=400,
    label="Press Enter to submit a tag",
    placeholder="Pick tag from list",
    data=["React", "Angular", "Svelte"],
)



================================================
File: docs/tagsinput/tagsinput.md
================================================
---
name: TagsInput
description: Capture a list of values from user with free input and suggestions
endpoint: /components/tagsinput
package: dash_mantine_components
category: Combobox
---

.. toc::

### Simple Example

`TagsInput` provides a way to enter multiple values. It can be used with suggestions or without them.
`TagsInput` is similar to MultiSelect, but it allows entering custom values.

By default, `enter key` and `,` will select the typed value.

.. exec::docs.tagsinput.simple


### Data Format

The data can be provided as either:
* an array of strings - use when label and value are same.
* an array of dicts with `label` and `value` properties.
* an array of dict with `group` and `items` as keys where items are one of the previous two types.

```python
data = ["Pandas", "NumPy", "TensorFlow", "PyTorch"]

# or

data = [
    {"value": "Pandas", "label": "Pandas"},
    {"value": "NumPy", "label": "NumPy"},
    {"value": "TensorFlow", "label": "TensorFlow"},
    {"value": "PyTorch", "label": "PyTorch"},
]

# or

data = [
    {"group": "Data Analysis", "items": ["Pandas", "NumPy"]},
    {"group": "Deep Learning", "items": ["TensorFlow", "Pytorch"]}
]

# or

data = [
    {
        "group": "Data Analysis",
        "items": [
            {"value": "Pandas", "label": "Pandas"},
            {"value": "NumPy", "label": "NumPy"},
        ],
    },
    {
        "group": "Deep Learning",
        "items": [
            {"value": "TensorFlow", "label": "TensorFlow"},
            {"value": "PyTorch", "label": "PyTorch"},
        ],
    },
]
```



### Clearable

Set `clearable` prop to display the clear button in the right section. The button is not displayed when:

* The component does not have a value
* The component is disabled
* The component is read only

.. exec::docs.tagsinput.clearable

### Max selected values

You can limit the number of selected values with `maxTags` prop. This will not allow adding more values once the limit is reached.

.. exec::docs.tagsinput.max-selected

### Accept value on blur
By default, if the user types a value and blurs the input, the value is added to the list. You can change this behavior
by setting `acceptValueOnBlur` to `False`. In this case, the value is added only when the user presses `Enter` or clicks
on a suggestion.

.. exec::docs.tagsinput.acceptvalueonblur

### Allow duplicates

By default, `TagsInput` does not allow adding duplicate values, but you can change this behavior by setting `allowDuplicates` prop.
Value is considered duplicate if it is already present in the `value` array, regardless of the case and trailing whitespace.


.. exec::docs.tagsinput.duplicates


### Split chars

By default, `TagsInput` splits values by comma (`,`), but you can change this behavior by setting `splitChars` prop to an array of strings.
All values from `splitChars` cannot be included in the final value. Values are also split on paste.

Example of splitting by `,`, `|` and `space`:

.. exec::docs.tagsinput.split

### With suggestions

`TagsInput` can be used with suggestions, it will render suggestions list under input and allow selecting suggestions 
with keyboard or mouse. Note that user is not limited to suggestions, it is still possible to enter custom values. 
If you want to allow values only from suggestions, use [MultiSelect](/components/multiselect) component instead.

.. exec::docs.tagsinput.suggestions

### Data Format

`TagsInput` `data` prop accepts data in one of the following formats:

```python
data = ["React", "Angular", "Svelte", "Vue"]

# or

data = [
    {"group": "Frontend", "items": ["React", "Angular"]},
    {"group": "Backend", "items": ["Express", "Django"]}
]
```

### Grouping

.. exec::docs.tagsinput.grouping


### Large data sets
The best strategy for large data sets is to limit the number of options that are rendered at the same time. You can do
it with `limit` prop. 

Example of `TagsInput` with 100 000 options, 5 options are rendered at the same time:


.. exec::docs.tagsinput.large_data_sets


### Scrollable dropdown

By default, the options list is wrapped with `ScrollArea.Autosize`. You can control dropdown max-height with 
`maxDropdownHeight` prop if you do not change the default settings.

If you want to use native scrollbars, set `withScrollArea=False`. Note that in this case, you will need to change 
dropdown styles with `Styles API`.


.. exec::docs.tagsinput.scrollable

### Disabled options  

When an option is disabled, it cannot be selected and is ignored in keyboard navigation. Note that user can still enter
disabled option as a value. If you want to prohibit certain values, use a callback to filter them out.

.. exec::docs.tagsinput.disabledoptions


### Combobox props
You can override `Combobox` props with `comboboxProps`. It is useful when you need to change some of the props that are
not exposed by `TagsInput`, for example `withinPortal`:

```python
dmc.TagsInput(comboboxProps={"withinPortal": False})
```


### Change dropdown z-index

```python
dmc.TagsInput(comboboxProps={"zIndex": 1000})
```

### Inside Popover

To use `TagsInput` inside popover, you need to set `withinPortal=False`:

.. exec::docs.tagsinput.popover


### Dropdown open in a callback

.. exec::docs.tagsinput.opened

### Dropdown position

By default, the dropdown is displayed below the input if there is enough space; otherwise it is displayed above the
input. You can change this behavior by setting `position` and `middlewares` props, which are passed down to the
underlying `Popover` component.

Example of dropdown that is always displayed above the input:

.. exec::docs.tagsinput.dropdown_position

### Dropdown width

To change dropdown width, set `width` prop in `comboboxProps`. By default, dropdown width is equal to the input width.

.. exec::docs.tagsinput.dropdown_width


### Dropdown offset

To change dropdown offset, set `offset` prop in `comboboxProps`:  

.. exec::docs.tagsinput.dropdown_offset

### Dropdown animation
By default, dropdown animations are disabled. To enable them, you can set `transitionProps`, which will be passed
down to the underlying `Transition` component.

.. exec::docs.tagsinput.dropdown_animation

### Dropdown padding

.. exec::docs.tagsinput.dropdown_padding


### Dropdown shadow

.. exec::docs.tagsinput.dropdown_shadow



### Left and right sections

`MultiSelect` supports `leftSection` and `rightSection` props. These sections are rendered with absolute position
inside the input wrapper. You can use them to display icons, input controls or any other elements.

You can use the following props to control sections styles and content:

- `rightSection`/`leftSection` – component to render on the corresponding side of input
- `rightSectionWidth`/`leftSectionWidth` – controls width of the right section and padding on the corresponding side of the input. By default, it is controlled by component size prop.
- `rightSectionPointerEvents`/`leftSectionPointerEvents` – controls pointer-events property of the section. If you want to render a non-interactive element, set it to none to pass clicks through to the input.

.. exec::docs.tagsinput.left_right


### Input Props
`TagsInput` component supports `Input` and Input Wrapper components features and all input element props.
`TagsInput` documentation does not include all features supported by the component – see Input documentation to learn about all available features.

 
.. exec::docs.tagsinput.interactive
   :code: false

### Read only
Set `readOnly` to make the input read only. When `readOnly` is set, `TagsInput` will not show suggestions and value
cannot be updated by the user entering data in the input.

.. exec::docs.tagsinput.readonly

### Disabled
Set `disabled` to disable the input. When `disabled` is set, user cannot interact with the input and `TagsInput` will not show suggestions.

.. exec::docs.tagsinput.disabled

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

Refer to the Mantine TagsInput Style API [interactive demo](https://mantine.dev/core/tags-input/#styles-api) for help in identifying each selector.


| Name        | Static selector                | Description                                      |
|:------------|:-------------------------------|:-------------------------------------------------|
| wrapper     | .mantine-TagsInput-wrapper     | Root element of the Input                        |
| input       | .mantine-TagsInput-input       | Input element                                    |
| section     | .mantine-TagsInput-section     | Left and right sections                          |
| root        | .mantine-TagsInput-root        | Root element                                     |
| label       | .mantine-TagsInput-label       | Label element                                    |
| required    | .mantine-TagsInput-required    | Required asterisk element, rendered inside label |
| description | .mantine-TagsInput-description | Description element                              |
| error       | .mantine-TagsInput-error       | Error element                                    |
| dropdown    | .mantine-TagsInput-dropdown    | Dropdown root element                            |
| options     | .mantine-TagsInput-options     | Options wrapper                                  |
| option      | .mantine-TagsInput-option      | Option                                           |
| empty       | .mantine-TagsInput-empty       | Nothing found message                            |
| group       | .mantine-TagsInput-group       | Options group wrapper                            |
| groupLabel  | .mantine-TagsInput-groupLabel  | Options group label                              |
| pill        | .mantine-TagsInput-pill        | Value pill                                       |
| inputField  | .mantine-TagsInput-inputField  | Input field                                      |
| pillsList   | .mantine-TagsInput-pillsList   | List of pills, also contains input field         |

### Keyword Arguments

#### TagsInput

.. kwargs::TagsInput



================================================
File: docs/text/dimmed.py
================================================
import dash_mantine_components as dmc

component = dmc.Text("Dimmed text", c="dimmed")



================================================
File: docs/text/gradient.py
================================================
import dash_mantine_components as dmc

component = dmc.Center(
    children=[
        dmc.Text(
            "Indigo cyan gradient",
            variant="gradient",
            gradient={"from": "red", "to": "yellow", "deg": 45},
            style={"fontSize": 40},
        )
    ]
)



================================================
File: docs/text/inherit.py
================================================
import dash_mantine_components as dmc

component = dmc.Title(
    children = [
        "Title in which you want to ",
        dmc.Text("highlight", span=True, c="blue", inherit=True),
        " something."
    ]
)


================================================
File: docs/text/lineclamp.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator


content = """
Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde provident eos fugiat id
necessitatibus magni ducimus molestias. Placeat, consequatur. Quisquam, quae magnam
perspiciatis excepturi iste sint itaque sunt laborum. Nihil?
"""

target = dmc.Text(content + content, w=400)

configurator = Configurator(target)
configurator.add_slider("size", "sm")
configurator.add_number_slider("lineClamp", 2, min=1, max=10)


component = configurator.panel



================================================
File: docs/text/simple.py
================================================
import dash_mantine_components as dmc
from dash import html

component = html.Div(
    [
        dmc.Text("Extra small text", size="xs"),
        dmc.Text("Small text", size="sm"),
        dmc.Text("Default text", size="md"),
        dmc.Text("Large text", size="lg"),
        dmc.Text("Extra large text", size="xl"),
        dmc.Text("Semi bold", fw=500),
        dmc.Text("Bold", fw=700),
        dmc.Text("Underlined", td="underline"),
        dmc.Text("Red text", c="red"),
        dmc.Text("Blue text", c="blue"),
        dmc.Text("Gray text", c="gray"),
        dmc.Text("Uppercase", tt="uppercase"),
        dmc.Text("capitalized text", tt="capitalize"),
        dmc.Text("Aligned to center", ta="center"),
        dmc.Text("Aligned to right", ta="right"),
    ]
)



================================================
File: docs/text/span.py
================================================
import dash_mantine_components as dmc


component = dmc.Box([
    dmc.Text("These two Text components are inline elements ", span=True, bd="1px solid"),
    dmc.Text("and only take up as much space as needed", span=True,  bd="1px solid"),

    dmc.Divider(my="lg"),

    dmc.Text("These two Text components are block elements",  bd="1px solid"),
    dmc.Text("and take up the full width of their container.",  bd="1px solid")
])




================================================
File: docs/text/text.md
================================================
---
name: Text
description: Use the Text component to display text and links with Mantine's theme styles.
endpoint: /components/text
package: dash_mantine_components
category: Typography
---

.. toc::

### Usage

.. exec::docs.text.simple

### Dimmed Text

Text supports special dimmed value in `color` prop. It sets color to theme.colors.dark[2] in dark theme and to 
theme.colors.gray[6] in light.

.. exec::docs.text.dimmed

### Gradient

.. exec::docs.text.gradient


### Truncate

Set `truncate` prop to add `text-overflow: ellipsis styles`:

.. exec::docs.text.truncate


### Lineclamp

Specify maximum number of lines with `lineClamp` prop. This option uses `-webkit-line-clamp` CSS property ([caniuse](https://caniuse.com/css-line-clamp)).
Note that `padding-bottom` cannot be set on text element:

.. exec::docs.text.lineclamp
    :code: false

### Inherit styles

`Text` always applies `font-size`, `font-family` and `line-height` styles, but in some cases this is not a desired 
behavior. To force `Text` to inherit parent styles set `inherit` prop. For example, highlight part of `Title`:

.. exec::docs.text.inherit

### span prop
The root element of `Text` is an HTML `p` component.  To change it to an HTML `span` set the `span` prop to True.


.. exec::docs.text.span


### Styles API

#### Text Selectors

| Selector | Static selector       | Description     |
|----------|-----------------------|-----------------|
| root     | .mantine-Text-root    | Root element    |

#### Text CSS Variables

| Selector | Variable               | Description                               |
|----------|------------------------|-------------------------------------------|
| root     | --text-fz              | Controls font-size property               |
|          | --text-lh              | Controls line-height property             |
|          | --text-gradient        | Text fill gradient                        |
|          | --text-line-clamp      | Number of lines that should be visible    |

#### Text Data Attributes

| Selector | Attribute       | Condition                          | Value                 |
|----------|----------------|------------------------------------|-----------------------|
| root     | data-truncate  | truncate prop is set               | Value of truncate prop |
| root     | data-line-clamp | lineClamp prop is a number         | –                     |
| root     | data-inline    | inline prop is set                 | –                     |
| root     | data-inherit   | inherit prop is set                | –                     |



### Keyword Arguments

#### Text

.. kwargs::Text



================================================
File: docs/text/truncate.py
================================================
import dash_mantine_components as dmc

content = """
Lorem ipsum dolor sit amet consectetur adipisicing elit. Unde provident eos fugiat id
necessitatibus magni ducimus molestias. Placeat, consequatur. Quisquam, quae magnam
perspiciatis excepturi iste sint itaque sunt laborum. Nihil?
"""

component = dmc.Box(
    [
        dmc.Title("truncate='end'", order=5),
        dmc.Text(content, truncate="end"),
        
        dmc.Title("truncate='start'", order=5, mt="lg"),
        dmc.Text(content, truncate="start"),
    ],
    w=300
)



================================================
File: docs/textarea/autosize.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    children=[
        dmc.Textarea(
            label="Autosize with no rows limit",
            placeholder="Autosize with no rows limit",
            w=500,
            autosize=True,
            minRows=2,
        ),
        dmc.Textarea(
            label="Autosize with 4 rows max",
            placeholder="Autosize with 4 rows max",
            w=500,
            autosize=True,
            minRows=2,
            maxRows=4,
        ),
    ],
)



================================================
File: docs/textarea/error.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    children=[
        dmc.Textarea(label="Your message", w=500, error=True),
        dmc.Textarea(label="Your message", w=500, error="Message can't be empty!"),
    ],
)



================================================
File: docs/textarea/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

target = dmc.Textarea(label="Your comment", placeholder="Your comment", required=True)

configurator = Configurator(target)
configurator.add_text_input("placeholder", "Your comment")
configurator.add_text_input("label", "Your comment")
configurator.add_text_input("description", "", **{"placeholder": "Description"})
configurator.add_text_input("error", "", **{"placeholder": "Error"})
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "sm")
configurator.add_switch("required", True)

component = configurator.panel



================================================
File: docs/textarea/textarea.md
================================================
---
name: Textarea
description: Use Textarea component to capture string input in a text area with an auto-size variant. Customize the input with label, description, error message etc.
endpoint: /components/textarea
package: dash_mantine_components
category: Inputs
---

.. toc::

### Introduction

.. exec::docs.textarea.interactive
    :code: false

### Autosize

Textarea will grow until `maxRows` are reached or indefinitely if `maxRows` is not set.

.. exec::docs.textarea.autosize

### Invalid State and Error

Use `error` prop to convey an error with an error message and a red border around the input.

Note: Dash adds thick red outline to the input element with `:invalid` pseudo-class. This conflicts with Mantine. 
In order to correct this, just add the following css to your app.

```css
input:invalid {
    outline: none !important;
}
```

.. exec::docs.textarea.error

### Styles API

| Name        | Static selector               | Description                                      |
|:------------|:------------------------------|:-------------------------------------------------|
| wrapper     | .mantine-Textarea-wrapper     | Root element of the Input                        |
| input       | .mantine-Textarea-input       | Input element                                    |
| section     | .mantine-Textarea-section     | Left and right sections                          |
| root        | .mantine-Textarea-root        | Root element                                     |
| label       | .mantine-Textarea-label       | Label element                                    |
| required    | .mantine-Textarea-required    | Required asterisk element, rendered inside label |
| description | .mantine-Textarea-description | Description element                              |
| error       | .mantine-Textarea-error       | Error element                                    |

### Keyword Arguments

#### Textarea

.. kwargs::Textarea



================================================
File: docs/textinput/disabled.py
================================================
import dash_mantine_components as dmc

component = dmc.TextInput(label="Disabled Input", w=200, disabled=True)



================================================
File: docs/textinput/error.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    children=[
        dmc.TextInput(label="Your Email:", w=200, error=True),
        dmc.TextInput(label="Your Email:", w=200, error="Enter a valid email"),
    ],
)



================================================
File: docs/textinput/icon.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.TextInput(
    label="Your Email",
    w=200,
    placeholder="Your Email",
    leftSection=DashIconify(icon="ic:round-alternate-email"),
)



================================================
File: docs/textinput/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-textinput"
target = dmc.Center(
    dmc.TextInput(
        label="Full Name", placeholder="Your Name", w=300, required=True, id=TARGET_ID
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_text_input(
    "placeholder", "Your Name", **{"placeholder": "Placeholder"}
)
configurator.add_text_input("label", "Full Name", **{"placeholder": "Label"})
configurator.add_text_input("description", "", **{"placeholder": "Description"})
configurator.add_text_input("error", "", **{"placeholder": "Error"})
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "sm")
configurator.add_switch("required", True)

component = configurator.panel



================================================
File: docs/textinput/right.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify


component = dmc.Stack(
    children=[
        dmc.TextInput(
            w=200,
            placeholder="9876543210",
            rightSection=DashIconify(icon="emojione-v1:mobile-phone"),
        ),
        dmc.TextInput(
            w=200,
            placeholder="9876543210",
            rightSection=dmc.Loader(size="xs"),
        ),
    ],
)



================================================
File: docs/textinput/textinput.md
================================================
---
name: TextInput
description: Use TextInput component to capture string input from user. Customize the input with label, description, error message etc.
endpoint: /components/textinput
package: dash_mantine_components
category: Inputs
---

.. toc::

### Introduction

.. exec::docs.textinput.interactive
    :code: false

### Invalid State and Error

Use `error` prop to convey an error with an error message and a red border around the input.

Note: Dash adds thick red outline to the input element with `:invalid` pseudo-class. This conflicts with Mantine. 
In order to correct this, just add the following css to your app.

```css
input:invalid {
    outline: none !important;
}
```

.. exec::docs.textinput.error

### Disabled State

Convey disabled input with `disabled` prop.

.. exec::docs.textinput.disabled

### With Icon

Add icon to the left side of the input.

.. exec::docs.textinput.icon

### With right section

Add icon or loading indicator to the right section of the input.

.. exec::docs.textinput.right

### Styles API

| Name        | Static selector                | Description                                      |
|:------------|:-------------------------------|:-------------------------------------------------|
| wrapper     | .mantine-TextInput-wrapper     | Root element of the Input                        |
| input       | .mantine-TextInput-input       | Input element                                    |
| section     | .mantine-TextInput-section     | Left and right sections                          |
| root        | .mantine-TextInput-root        | Root element                                     |
| label       | .mantine-TextInput-label       | Label element                                    |
| required    | .mantine-TextInput-required    | Required asterisk element, rendered inside label |
| description | .mantine-TextInput-description | Description element                              |
| error       | .mantine-TextInput-error       | Error element                                    |

### Keyword Arguments

#### TextInput

.. kwargs::TextInput



================================================
File: docs/theme-object/autocontrast.py
================================================
import dash_mantine_components as dmc

component = dmc.Box([
    dmc.Code("autoContrast=True"),
    dmc.Group(
        [
            dmc.Button("Lime.4 button", color="lime.4", autoContrast=True),
            dmc.Button("Blue.2 button", color="blue.2", autoContrast=True),
            dmc.Button("Orange.3 button", color="orange.3", autoContrast=True),
        ],
        mt="xs",
        mb="lg"
    ),
    dmc.Code("autoContrast=False"),
    dmc.Group(
        [
            dmc.Button("Lime.4 button", color="lime.4"),
            dmc.Button("Blue.2 button", color="blue.2"),
            dmc.Button("Orange.3 button", color="orange.3"),
        ],
        mt="xs"
    )
])


================================================
File: docs/theme-object/default-radius.py
================================================



================================================
File: docs/theme-object/luminance.py
================================================
"""
const theme = createTheme({
  autoContrast: true,
  luminanceThreshold: 0.33,
});

function Wrapper(props: any) {
  const buttons = Array(10)
    .fill(0)
    .map((_, index) => (
      <Button
        key={index}
        color={`blue.${index}`}
      >
        Button
      </Button>
    ));

  return (
    <MantineProvider theme={theme}>
      <Stack>{buttons}</Stack>
    </MantineProvider>
  );
}
"""
import dash_mantine_components as dmc
from dash import Dash

component = dmc.Stack([
    dmc.Button(f"button", color=f"blue.{i}") for i in range(10)
])




================================================
File: docs/theme-object/theme.py
================================================
import json

import dash_mantine_components as dmc

theme = json.dumps(dmc.DEFAULT_THEME, indent=8)
component = dmc.CodeHighlight(code=theme, language="json")



================================================
File: docs/theme-object/themeobject.md
================================================
---
name: Theme Object
description: Mantine theme is an object where your application's colors, fonts, spacing, border-radius and other design tokens are stored.
endpoint: /theme-object
package: dash_mantine_components
category: Theming
order: 2  # sets order in navbar section
---

.. toc::

### Usage


```python
import dash_mantine_components as dmc

dmc.MantineProvider(
    theme={
        # add your colors
        "colors": {
             # add your colors
            "deepBlue": ["#E9EDFC", "#C1CCF6", "#99ABF0" "..."], # 10 colors
            # or replace default theme color
            "blue": ["#E9EDFC", "#C1CCF6", "#99ABF0" "..."],   # 10 colors
        },
        "shadows": {
            # other shadows (xs, sm, lg) will be merged from default theme
            "md": "1px 1px 3px rgba(0,0,0,.25)",
            "xl": "5px 5px 3px rgba(0,0,0,.25)",
        },
        "headings": {
            "fontFamily": "Roboto, sans-serif",
            "sizes": {
                "h1": {"fontSize": '30px'},
            },
        },
    },
    children=[
        # your app layout here
    ],
)
```


### Theme properties
You can find a complete list of all theme properties in the theme object in the references section at the bottom of the 
page. In the next section, we’ll focus on a few key properties to explain them in more detail.

#### Colors

See more information and examples in [Colors](/colors) section

- `colors` adds colors or over-rides named theme colors
- `primaryColor` sets the app's primary (default) accent color 
- `primaryShade` sets the app's primary shade in either light or dark mode

#### Typography

See more information and examples in [Typography](/typography) section

- `fontFamily` – controls font-family in all components except `Title`, `Code` and `Kbd`
- `fontFamilyMonospace` – controls font-family of components that require monospace font: `Code`, `Kbd` and `CodeHighlight`
- `headings.fontFamily` – controls font-family of h1-h6 tags in `Title`, fallbacks to `theme.fontFamily` if not defined
- `fontSizes` - defines the font-size from `xs` to `xl`
- `lineHeights` -defines `line-height` values for `Text` component, most other components use `theme.lineHeights.md` by default

#### Breakpoints

See more information and examples in [Responsive Styles](/responsive-styles) section

#### autoContrast
`autoContrast` controls whether text color should be changed based on the given color prop in the following components:

* `ActionIcon` with `variant='filled'` only
* `Alert` with `variant='filled'` only
* `Avatar` with `variant='filled'` only
* `Badge` with `variant='filled'` only
* `Button` with `variant='filled'` only
* `Chip` with `variant='filled'` only
* `NavLink` with `variant='filled'` only
* `ThemeIcon` with `variant='filled'` only
* `Checkbox` with `variant='filled'` only
* `Radio` with `variant='filled'` only
* `Tabs` with `variant='filled'` only
* `SegmentedControl`
* `Stepper`
* `Pagination`
* `Progress`
* `Indicator`
* `Timeline`
* `Spotlight`
* All dates components that are based on Calendar component

`autoContrast` checks whether the given color luminosity is above or below the `luminanceThreshold` value and changes text color to either `theme.white` or `theme.black` accordingly.

`autoContrast` can be set globally on the theme level or individually for each component via `autoContrast` prop, except for dates components which only support global theme setting.


.. exec::docs.theme-object.autocontrast


#### luminanceThreshold

`luminanceThreshold` controls which luminance value is used to determine if text color should be light or dark. It is 
used only if `theme.autoContrast` is set to `True`. Default value is 0.3.

See a live demo of `luminanceThreshold` in the [Mantine Docs](https://mantine.dev/theming/theme-object/#luminancethreshold)

```python
dmc.MantineProvider(
    dmc.Group([
        dmc.Button("button", color=f"blue.{i}") for i in range(10)
    ]),
    theme={
        "luminanceThreshold": .45,
        "autoContrast": True
    }
)
```

#### focusRing
`theme.focusRing` controls focus ring styles, it supports the following values:

- 'auto' (default and recommended) – focus ring is visible only when the user navigates with keyboard, this is the default browser behavior for native interactive elements
- 'always' – focus ring is visible when user navigates with keyboard and mouse, for example, the focus ring will be visible when user clicks on a button
- 'never' – focus ring is always hidden, it is not recommended – users who navigate with keyboard will not have visual indication of the current focused element


See a live demo of `focusRing` in the [Mantine Docs](https://mantine.dev/theming/theme-object/#focusring)

#### focusClassName

`theme.focusClassName` is a CSS class that is added to elements that have focus styles, for example, `Button` or 
`ActionIcon`. It can be used to customize focus ring styles of all interactive components except inputs. Note that when
`theme.focusClassName` is set, `theme.focusRing` is ignored.

See a live demo of `focusClassName` in the [Mantine Docs](https://mantine.dev/theming/theme-object/#focusclassname)

```python
dmc.MantineProvider(
    dmc.Button("click button to see focus ring", m="lg"),
    theme={"focusClassName": "focus"}
)
```
Define the class in the `.css` file in `/assets` folder
```css

/* Use `&:focus` when you want focus ring to be visible when control is clicked */
.focus {
  &:focus {
    outline: 2px solid var(--mantine-color-red-filled);
    outline-offset: 3px;
  }
}
```


#### activeClassName
`theme.activeClassName` is a CSS class that is added to elements that have active styles, for example, `Button` or
`ActionIcon`. It can be used to customize active styles of all interactive components.

To disable active styles for all components, set `theme.activeClassName` to an empty string.


See a live demo of `activeClassName` in the [Mantine Docs](https://mantine.dev/theming/theme-object/#activeclassname)

#### defaultRadius 

`theme.defaultRadius` controls the default border-radius property in most components, for example, `Button` or `TextInput`.
You can set to either one of the values from `theme.radius` or a number/string to use exact value. Note that numbers are
treated as pixels, but converted to rem. For example, `{'defaultRadius': 4}` will be converted to 0.25rem. You can learn
more about rem conversion in the [rem units guide](https://mantine.dev/styles/rem/).


See a live demo of `defaultRadius` in the [Mantine Docs](https://mantine.dev/theming/theme-object/#defaultradius)

```python

dmc.MantineProvider(
    dmc.Box([
        dmc.Button("Button", m="sm"),
        dmc.TextInput(m="sm", label="TextInput with defaultRadius", placeholder="TextInput with default radius")
    ]),
    theme={"defaultRadius": "xl"},    
)
```

#### cursorType
`theme.cursorType` controls the default cursor type for interactive elements, that do not have cursor: pointer styles 
by default. For example, `Checkbox`.


See a live demo of `cursorType` in the [Mantine Docs](https://mantine.dev/theming/theme-object/#cursortype)


```python
dmc.MantineProvider(
    dmc.Checkbox(label="Pointer cursor", mt="md"),
    theme={"cursorType": 'pointer'},    
)
```

#### defaultGradient
`theme.defaultGradient` controls the default gradient configuration for components that support `variant='gradient'`
(Button, ActionIcon, Badge, etc.).


See a live demo of `defaultGradient` in the [Mantine Docs](https://mantine.dev/theming/theme-object/#defaultgradient)

```python
dmc.MantineProvider(
    dmc.Button("Button with custom default gradient", variant="gradient"),
    theme={
        "defaultGradient": {
            "from": 'orange',
            "to": 'red',
            "deg": 45,
          },
    }  
)
```
#### components defaultProps

Default props  

You can define default props for every Mantine component by setting `theme.components`. These props will be used by
default by all components of your application unless they are overridden by component props.

See a live demo of `defaultProps` in the [Mantine Docs](https://mantine.dev/theming/default-props/)


```python
dmc.MantineProvider(
    dmc.Group(
        [
            dmc.Button("Default button"),
            dmc.Button("Button with props", color="red", variant="filled"),
        ]
    ),
    theme={
        "components": {
            "Button": {
                "defaultProps": {
                    "color": "cyan",
                    "variant": "outline",
                },
            },
        },
    }
)
```

#### components custom variants

See how to add custom variants to `ActionIcon` and `Button` in the theme object, making these variants available globally
across your app. Detailed examples are provided in their respective documentation sections.  Also, see examples live:

- [Live Demo: Button Variants on PyCafe](https://py.cafe/dash.mantine.components/button-custom-variants-demo-0)  
- [Live Demo: ActionIcon Variants on PyCafe](https://py.cafe/dash.mantine.components/actionicon-custom-variants-demo)  

#### components custom sizes

See and example of adding custom sizes in the  [Checkbox](/components/checkbox) section.  Also see a live dome on PyCafe:

- [Live Demo: Checkbox Sizes PyCafe](https://py.cafe/dash.mantine.components/checkbox-custom-sizes-demo) 

#### other 

`theme.other` is an object that can be used to store any other properties that you want to access with the theme objects.

```python
dmc.MantineProvider(
    # your app layout,
    theme={
        "other": {
            "charcoal": "#333333",
            "primaryHeadingSize": 45,
            "fontWeights": {
                "bold": 700,
                "extraBold": 900,
            },
        },
    }
)
```


### Usage in DMC docs

MantineProvider is used to customize theme for these docs as well. The theming is more or less inline with below.

```python
import dash_mantine_components as dmc

app.layout = dmc.MantineProvider(
     forceColorScheme="light",
     theme={
         "primaryColor": "indigo",
         "fontFamily": "'Inter', sans-serif",
         "components": {
             "Button": {"defaultProps": {"fw": 400}},
             "Alert": {"styles": {"title": {"fontWeight": 500}}},
             "AvatarGroup": {"styles": {"truncated": {"fontWeight": 500}}},
             "Badge": {"styles": {"root": {"fontWeight": 500}}},
             "Progress": {"styles": {"label": {"fontWeight": 500}}},
             "RingProgress": {"styles": {"label": {"fontWeight": 500}}},
             "CodeHighlightTabs": {"styles": {"file": {"padding": 12}}},
             "Table": {
                 "defaultProps": {
                     "highlightOnHover": True,
                     "withTableBorder": True,
                     "verticalSpacing": "sm",
                     "horizontalSpacing": "md",
                 }
             },
         },
     },
     children=[
         # content
     ],
 )
```

### Default theme

Default theme is available as `dmc.DEFAULT_THEME`. It includes all theme properties with default values. 
When you pass theme override to MantineProvider, it will be deeply merged with the default theme.

.. exec::docs.theme-object.theme
    :code: false



### Theme Object Reference

| **Name**               | **Description**                                                                                                                                                                | **Type**                         |
|:-----------------------|:-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|:---------------------------------|
| `focusRing`            | Controls focus ring styles. Options: `auto` (default, shows when navigating with keyboard), `always` (shows for keyboard and mouse), `never` (always hidden, not recommended). | 'auto' or 'always' or 'never'    | 
| `scale`                | rem units scale, adjust if customizing `<html />` font-size. Default: `1` (16px font-size).                                                                                    | `number`                         |
| `fontSmoothing`        | Determines whether `font-smoothing` is applied to the body. Default: `true`.                                                                                                   | `boolean`                        |
| `white`                | Base white color. Example: `#ffffff`.                                                                                                                                          | `string`                         |
| `black`                | Base black color. Example: `#000000`.                                                                                                                                          | `string`                         |
| `colors`               | Object of colors, where each key is a color name, and each value is an array of at least 10 shades. Example: `colors.blue = ['#f0f8ff', '#add8e6', ...]`.                      | `object`                         |
| `primaryShade`         | Determines which shade of `colors.primary` is used. Options: `{light: 6, dark: 8}` (default) or a single number (e.g., `6` for both modes).                                    | `number or object`               |
| `primaryColor`         | Key of `theme.colors`. Determines the default primary color. Default: `blue`.                                                                                                  | `string`                         |
| `variantColorResolver` | Function to resolve colors for variants like `Button` and `ActionIcon`. Can be used for deep customization.                                                                    | `function`                       |
| `autoContrast`         | If `true`, adjusts text color for better contrast based on the background color. Default: `false`.                                                                             | `boolean`                        |
| `luminanceThreshold`   | Threshold for determining whether text should be light or dark when `autoContrast` is enabled. Default: `0.3`.                                                                 | `number`                         |
| `fontFamily`           | Font-family used in all components. Example: `'Arial, sans-serif'`.                                                                                                            | `string`                         |
| `fontFamilyMonospace`  | Monospace font-family used in code components. Example: `'Courier, monospace'`.                                                                                                | `string`                         |
| `headings`             | Controls heading styles. Includes `fontFamily`, `fontWeight`, `textWrap` (e.g., `'wrap'`, `'nowrap'`) and sizes for `h1` to `h6` (e.g., `{'fontSize': 32, 'lineHeight': 1.4}`). | `object`                         |
| `radius`               | Object defining border-radius values. Example: `{sm: 4, md: 8, lg: 16}`.                                                                                                       | `object`                         |
| `defaultRadius`        | Default border-radius used by most components. Example: `md`.                                                                                                                  | `string`                         |
| `spacing`              | Object defining spacing values (e.g., margins, padding). Example: `{xs: 4, sm: 8, md: 16, lg: 24}`.                                                                            | `object`                         |
| `fontSizes`            | Object defining font-size values. Example: `{xs: 12, sm: 14, md: 16, lg: 20}`.                                                                                                 | `object`                         |
| `lineHeights`          | Object defining line-height values. Example: `{xs: 1.2, sm: 1.4, md: 1.6}`.                                                                                                    | `object`                         |
| `breakpoints`          | Object defining responsive breakpoints (in em). Example: `{xs: 30, sm: 48, md: 64}` (for 480px, 768px, and 1024px respectively).                                               | `object`                         |
| `shadows`              | Object defining box-shadow values. Example: `{sm: '0px 1px 3px rgba(0, 0, 0, 0.2)', md: '0px 4px 6px rgba(0, 0, 0, 0.1)'}`.                                                    | `object`                         |
| `respectReducedMotion` | If `true`, respects OS reduce-motion settings. Default: `false`.                                                                                                               | `boolean`                        |
| `cursorType`           | Determines cursor style for interactive elements. Options: `'default'` or `'pointer'`. Default: `'default'`.                                                                   | `'default' or 'pointer'`         |
| `defaultGradient`      | Default gradient configuration. Example: `{'from': '#6a11cb', 'to': '#2575fc', 'deg': 45}`.                                                                                    | `object`                         |
| `activeClassName`      | CSS class applied to elements with active styles (e.g., `Button`).                                                                                                             | `string`                         |
| `focusClassName`       | CSS class applied to elements with focus styles (overrides `focusRing`).                                                                                                       | `string`                         |
| `components`           | Customizations for individual components (e.g., default props for `Button`).                                                                                                   | `object`                         |
| `other`                | User-defined custom properties for additional flexibility.                                                                                                                     | `object`                         |




================================================
File: docs/theme-switch-components/themeswitch.md
================================================
---
name: Theme Switch Components
description: Examples of components to switch between light and dark modes
endpoint: /theme-switch
package: dash_mantine_components
category: Theming
order: 10  # sets order in navbar section
---

.. toc::

### Mantine Light and dark themes

Mantine sets the light and dark color schemes using the `data-mantine-color-scheme` attribute on the `<html>` element.
This allows it to apply global styles dynamically based on the theme.

To switch themes in a Dash app you can set the `data-mantine-color-scheme` in a clientside callback.

### Example 1 Theme Toggle

This example demonstrates how to toggle between light and dark modes using  `ActionIcon` as the theme switch component.

.. exec::docs.theme-switch-components.themeswitch

### Example 2 Theme Switch

This example shows how to use the `Switch` component with icon labels to create a theme switch component.   The `Switch`
is set with `persistence=True` to retain the selected theme even after a browser refresh.

This is the theme switch used in these docs.  Click on the switch in the header to change themes.

Here is a complete minimal example:

```python

import dash_mantine_components as dmc
from dash_iconify import DashIconify
from dash import Dash, Input, Output, State, callback, _dash_renderer, html, clientside_callback
_dash_renderer._set_react_version("18.2.0")

theme_toggle = dmc.Switch(
    offLabel=DashIconify(icon="radix-icons:sun", width=15, color=dmc.DEFAULT_THEME["colors"]["yellow"][8]),
    onLabel=DashIconify(icon="radix-icons:moon", width=15, color=dmc.DEFAULT_THEME["colors"]["yellow"][6]),
    id="color-scheme-switch",
    persistence=True,
    color="grey",
)

app = Dash(external_stylesheets=dmc.styles.ALL)

app.layout = dmc.MantineProvider(
    [theme_toggle, dmc.Text("Your page content")],
)

clientside_callback(
    """
    (switchOn) => {
       document.documentElement.setAttribute('data-mantine-color-scheme', switchOn ? 'dark' : 'light');
       return window.dash_clientside.no_update
    }
    """,
    Output("color-scheme-switch", "id"),
    Input("color-scheme-switch", "checked"),
)


if __name__ == "__main__":
    app.run(debug=True)

```


================================================
File: docs/theme-switch-components/themeswitch.py
================================================

import dash_mantine_components as dmc
from dash_iconify import DashIconify
from dash import Dash, Input, Output, clientside_callback, _dash_renderer
_dash_renderer._set_react_version("18.2.0")

theme_toggle = dmc.ActionIcon(
    [
        dmc.Paper(DashIconify(icon="radix-icons:sun", width=25), darkHidden=True),
        dmc.Paper(DashIconify(icon="radix-icons:moon", width=25), lightHidden=True),
    ],
    variant="transparent",
    color="yellow",
    id="color-scheme-toggle",
    size="lg",
)


component=dmc.Group([
    dmc.Text("Theme Switch Demo"),
    theme_toggle
])


clientside_callback(
    """
    (n) => {
        document.documentElement.setAttribute(
            'data-mantine-color-scheme',
            (n % 2) ? 'dark' : 'light'
        );
        return window.dash_clientside.no_update      
    }
    """,
    Output("color-scheme-toggle", "id"),
    Input("color-scheme-toggle", "n_clicks"),
)



================================================
File: docs/theme-switch-components/themeswitch2.py
================================================

import dash_mantine_components as dmc
from dash import Input, Output, clientside_callback
from dash_iconify import DashIconify

theme_toggle = dmc.Switch(
    offLabel=DashIconify(icon="radix-icons:sun", width=15, color=dmc.DEFAULT_THEME["colors"]["yellow"][8]),
    onLabel=DashIconify(icon="radix-icons:moon", width=15, color=dmc.DEFAULT_THEME["colors"]["yellow"][6]),
    id="color-scheme-switch",
    persistence=True,
    color="grey",
)

component=dmc.Group([
    dmc.Text("Theme Switch Demo"),
    theme_toggle
])

clientside_callback(
    """ 
    (switchOn) => {
       document.documentElement.setAttribute('data-mantine-color-scheme', switchOn ? 'dark' : 'light');  
       return window.dash_clientside.no_update
    }
    """,
    Output("color-scheme-switch", "id"),
    Input("color-scheme-switch", "checked"),
)




================================================
File: docs/themeicon/colors.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

colors = [
    "gray",
    "red",
    "pink",
    "grape",
    "violet",
    "indigo",
    "blue",
    "lime",
    "yellow",
    "orange",
]

component = dmc.Stack(
    gap="xs",
    children=[
        dmc.Group(
            [
                dmc.ThemeIcon(
                    DashIconify(icon="tabler:photo", width=20),
                    variant=variant,
                    color=color,
                )
                for color in colors
            ],
            justify="center",
        )
        for variant in ["outline", "light", "filled"]
    ],
)



================================================
File: docs/themeicon/gradient.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Group(
    children=[
        dmc.ThemeIcon(
            DashIconify(icon="tabler:photo", width=20),
            variant="gradient",
            gradient={"from": "indigo", "to": "cyan"},
            size="lg",
        ),
        dmc.ThemeIcon(
            DashIconify(icon="tabler:photo", width=20),
            variant="gradient",
            gradient={"from": "teal", "to": "lime", "deg": 105},
            size="lg",
        ),
        dmc.ThemeIcon(
            DashIconify(icon="tabler:photo", width=20),
            variant="gradient",
            gradient={"from": "teal", "to": "blue", "deg": 60},
            size="lg",
        ),
        dmc.ThemeIcon(
            DashIconify(icon="tabler:photo", width=20),
            variant="gradient",
            gradient={"from": "orange", "to": "red"},
            size="lg",
        ),
        dmc.ThemeIcon(
            DashIconify(icon="tabler:photo", width=20),
            variant="gradient",
            gradient={"from": "grape", "to": "pink", "deg": 35},
            size="lg",
        ),
    ]
)



================================================
File: docs/themeicon/interactive.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

from lib.configurator import Configurator

TARGET_ID = "interactive-themeicon"

target = dmc.Center(
    dmc.ThemeIcon(children=DashIconify(icon="tabler:photo", width=20), id=TARGET_ID)
)

configurator = Configurator(target, TARGET_ID)
configurator.add_segmented_control("variant", ["filled", "light", "outline"], "filled")
configurator.add_slider("size", "md")
configurator.add_slider("radius", "sm")
configurator.add_colorpicker("color", "indigo")

component = configurator.panel



================================================
File: docs/themeicon/themeicon.md
================================================
---
name: ThemeIcon
description: Use ThemeIcon component to render icon inside element with theme colors.
endpoint: /components/themeicon
package: dash_mantine_components
category: Data Display
---

.. toc::

### Usage

ThemeIcon can be customized by setting its variant, size, radius and color.

```python
import dash_mantine_components as dmc
from dash_iconify import DashIconify

dmc.ThemeIcon(
    size="xl",
    color="indigo",
    variant="filled",
    children=DashIconify(icon="tabler:photo", width=25)
)
```

.. exec::docs.themeicon.interactive
    :code: false

### Colors

ThemeIcon supports all colors from Mantine's theme colors.

.. exec::docs.themeicon.colors

### Gradient Variant

To use gradient as ThemeIcon background:

* set `variant` prop to "gradient"
* set `gradient` prop to `{ "from": "color-from", "to": "color-to", "deg": 135}`, where

* `color-from` and `color-to` are colors from Mantine's theme colors.
* `deg` is linear gradient deg.

.. exec::docs.themeicon.gradient

### Styles API

| Name        | Static selector         | Description                                      |
|:------------|:------------------------|:-------------------------------------------------|
| root        | .mantine-ThemeIcon-root | Root element                                     |

### Keyword Arguments

#### ThemeIcon

.. kwargs::ThemeIcon



================================================
File: docs/timeinput/error.py
================================================
import dash_mantine_components as dmc

component = dmc.Stack(
    children=[
        dmc.TimeInput(label="Enter Time:", w=100, error=True),
        dmc.TimeInput(
            label="Enter Time:",
            w=150,
            error="Enter a valid time",
            withSeconds=True,
        ),
    ],
)



================================================
File: docs/timeinput/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-timeinput"

target = dmc.TimeInput(
    label="Start time", description="Enter start time for processing", id=TARGET_ID
)

configurator = Configurator(target, TARGET_ID)
configurator.add_text_input("label", "Current Time", **{"placeholder": "Label"})
configurator.add_text_input("description", "", **{"placeholder": "Description"})
configurator.add_text_input("error", "", **{"placeholder": "Error"})
configurator.add_select("variant", ["default", "filled", "unstyled"], "default")
configurator.add_slider("size", "sm")
configurator.add_slider("radius", "sm")
configurator.add_switch("disabled", False)
configurator.add_switch("withAsterisk", True)
component = configurator.panel



================================================
File: docs/timeinput/simple.py
================================================
import dash_mantine_components as dmc
import datetime

component = dmc.Group(
    gap=50,
    children=[
        dmc.TimeInput(label="What time is it now?"),
        dmc.TimeInput(
            label="What time is it now?",
            withSeconds=True,
            value="23:15:45",
        ),
    ],
)



================================================
File: docs/timeinput/timeinput.md
================================================
---
name: TimeInput
description: Use the TimeInput component to capture time input from user.
endpoint: /components/timeinput
package: dash_mantine_components
category: Date Pickers
---

.. toc::

### Simple Example

This is a simple example of the TimeInput. You can enter a valid time string such as hh:mm:ss.

Use the  `withSeconds` prop to display seconds.

.. exec::docs.timeinput.simple

### Input Props

TimeInput supports all props from Input and InputWrapper components such as `radius`, `size`, `required`, etc.

.. exec::docs.timeinput.interactive
    :code: false

### Invalid State And Error

You can display an error with a red border and add an error message.

.. exec::docs.timeinput.error

### Styles API

| Name        | Static selector                | Description                                      |
|:------------|:-------------------------------|:-------------------------------------------------|
| wrapper     | .mantine-TimeInput-wrapper     | Root element of the Input                        |
| input       | .mantine-TimeInput-input       | Input element                                    |
| section     | .mantine-TimeInput-section     | Left and right sections                          |
| root        | .mantine-TimeInput-root        | Root element                                     |
| label       | .mantine-TimeInput-label       | Label element                                    |
| required    | .mantine-TimeInput-required    | Required asterisk element, rendered inside label |
| description | .mantine-TimeInput-description | Description element                              |
| error       | .mantine-TimeInput-error       | Error element                                    |

### Keyword Arguments

#### TimeInput

.. kwargs::TimeInput



================================================
File: docs/timeline/bullets.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.Timeline(
    children=[
        dmc.TimelineItem(
            title="Default bullet",
            children=dmc.Text("Default bullet without anything", c="dimmed", size="sm")
        ),
        dmc.TimelineItem(
            title="Avatar",
            bullet=dmc.Avatar(
                size=22,
                radius="xl",
                src="https://avatars.githubusercontent.com/u/91216500?v=4"
            ),
            children=dmc.Text("Timeline bullet as avatar image", c="dimmed", size="sm")
        ),
        dmc.TimelineItem(
            title="Icon",
            bullet=DashIconify(icon="tabler:sun", width=13),
            children=dmc.Text("Timeline bullet as icon", c="dimmed", size="sm")
        ),
        dmc.TimelineItem(
            title="ThemeIcon",
            bullet=dmc.ThemeIcon(
                size=22,
                variant="gradient",
                gradient={"from": "lime", "to": "cyan"},
                radius="xl",
                children=DashIconify(icon="tabler:video", width=13)
            ),
            children=dmc.Text("Timeline bullet as ThemeIcon component", c="dimmed", size="sm")
        )
    ],
    bulletSize=24
)



================================================
File: docs/timeline/interactive.py
================================================
import dash_mantine_components as dmc
from lib.configurator import Configurator

TARGET_ID = "interactive-timeline"

target = dmc.Timeline(
    id=TARGET_ID,
    active=1,
    bulletSize=15,
    lineWidth=2,
    children=[
        dmc.TimelineItem(
            title="New Branch",
            children=[
                dmc.Text(
                    [
                        "You've created new branch ",
                        dmc.Anchor("fix-notification", href="#", size="sm"),
                        " from master",
                    ],
                    c="dimmed",
                    size="sm",
                ),
            ],
        ),
        dmc.TimelineItem(
            title="Commits",
            children=[
                dmc.Text(
                    [
                        "You've pushed 23 commits to ",
                        dmc.Anchor("fix-notification", href="#", size="sm"),
                    ],
                    c="dimmed",
                    size="sm",
                ),
            ],
        ),
        dmc.TimelineItem(
            title="Pull Request",
            lineVariant="dashed",
            children=[
                dmc.Text(
                    [
                        "You've submitted a pull request ",
                        dmc.Anchor(
                            "Fix incorrect notification message (#178)",
                            href="#",
                            size="sm",
                        ),
                    ],
                    c="dimmed",
                    size="sm",
                ),
            ],
        ),
        dmc.TimelineItem(
            [
                dmc.Text(
                    [
                        dmc.Anchor(
                            "AnnMarieW",
                            href="https://github.com/AnnMarieW",
                            size="sm",
                        ),
                        " left a comment on your pull request",
                    ],
                    c="dimmed",
                    size="sm",
                ),
            ],
            title="Code Review",
        ),
    ],
)


configurator = Configurator(target, TARGET_ID)
configurator.add_colorpicker("color", "indigo")
configurator.add_slider("radius", "xl")
configurator.add_number_input("active", 2, **{"min": -1, "max": 3})
configurator.add_switch("reverseActive", False)
configurator.add_number_input("lineWidth", 4, **{"min": 0, "max": 8})
configurator.add_number_input("bulletSize", 20, **{"min": 12, "max": 30, "step": 2})
configurator.add_segmented_control("align", ["left", "right"], "left")

component = configurator.panel



================================================
File: docs/timeline/simple.py
================================================
import dash_mantine_components as dmc


component = dmc.Timeline(
    active=1,
    bulletSize=15,
    lineWidth=2,
    children=[
        dmc.TimelineItem(
            title="New Branch",
            children=[
                dmc.Text(
                    [
                        "You've created new branch ",
                        dmc.Anchor("fix-notification", href="#", size="sm"),
                        " from master",
                    ],
                    c="dimmed",
                    size="sm",
                ),
            ],
        ),
        dmc.TimelineItem(
            title="Commits",
            children=[
                dmc.Text(
                    [
                        "You've pushed 23 commits to ",
                        dmc.Anchor("fix-notification", href="#", size="sm"),
                    ],
                    c="dimmed",
                    size="sm",
                ),
            ],
        ),
        dmc.TimelineItem(
            title="Pull Request",
            lineVariant="dashed",
            children=[
                dmc.Text(
                    [
                        "You've submitted a pull request ",
                        dmc.Anchor(
                            "Fix incorrect notification message (#178)",
                            href="#",
                            size="sm",
                        ),
                    ],
                    c="dimmed",
                    size="sm",
                ),
            ],
        ),
        dmc.TimelineItem(
            [
                dmc.Text(
                    [
                        dmc.Anchor(
                            "AnnMarieW",
                            href="https://github.com/AnnMarieW",
                            size="sm",
                        ),
                        " left a comment on your pull request",
                    ],
                    c="dimmed",
                    size="sm",
                ),
            ],
            title="Code Review",
        ),
    ],
)



================================================
File: docs/timeline/timeline.md
================================================
---
name: Timeline
description: Use the Timeline and TimelineItem components to display a list of events in chronological order.
endpoint: /components/timeline
package: dash_mantine_components
category: Data Display
---

.. toc::

### Introduction

.. exec::docs.timeline.interactive
    :code: false

### Usage

Control timeline appearance with the following props:

- `active` - index of current active element, all elements before this index will be highlighted with color
- `color` - color from theme that should be used to highlight active items, defaults to theme.primaryColor
- `lineWidth` - controls line width and bullet border
- `bulletSize` - bullet width, height and border-radius
- `align` - defines line and bullets position relative to content, also sets textAlign

.. exec::docs.timeline.simple


### Components in Bullets

.. exec::docs.timeline.bullets



    
### Styles API

#### Timeline Selectors

| Selector     | Static selector               | Description                               |
|-------------|-------------------------------|-------------------------------------------|
| root        | .mantine-Timeline-root        | Root element                             |
| item        | .mantine-Timeline-item        | Item root element                        |
| itemBody    | .mantine-Timeline-itemBody    | Item body, wraps title and content       |
| itemTitle   | .mantine-Timeline-itemTitle   | Item title, controlled by `title` prop   |
| itemContent | .mantine-Timeline-itemContent | Item content, controlled by `children` prop |
| itemBullet  | .mantine-Timeline-itemBullet  | Item bullet                              |

#### Timeline CSS Variables

| Selector | Variable          | Description                                 |
|----------|------------------|---------------------------------------------|
| root     | --tl-bullet-size | Controls bullet width and height           |
|          | --tl-color       | Controls active bullet and line colors     |
|          | --tl-icon-color  | Controls icon color                        |
|          | --tl-line-width  | Controls width of the line between bullets |
|          | --tl-radius      | Controls bullet border-radius              |

#### Timeline Data Attributes

| Selector        | Attribute       | Condition                                    |
|----------------|----------------|----------------------------------------------|
| item, itemBullet | data-active    | Item index is `<=` Timeline `active` prop   |
| item           | data-line-active | Item index is `<` Timeline `active` prop    |

### Keyword Arguments

#### Timeline

.. kwargs::Timeline

#### TimelineItem

.. kwargs::TimelineItem



================================================
File: docs/title/simple.py
================================================
import dash_mantine_components as dmc
from dash import html

component = html.Div(
    [
        dmc.Title(f"This is h1 title", order=1),
        dmc.Title(f"This is h2 title", order=2),
        dmc.Title(f"This is h3 title", order=3),
        dmc.Title(f"This is h4 title", order=4),
        dmc.Title(f"This is h5 title", order=5),
        dmc.Title(f"This is h6 title", order=6),
    ]
)



================================================
File: docs/title/title.md
================================================
---
name: Title
description: Use the Title component to render h1-h6 headings.
endpoint: /components/title
package: dash_mantine_components
category: Typography
---

.. toc::

### Simple Example

Use Title component to render h1-h6 headings with Mantine theme styles. By default, Title has no margins and paddings.
Pass the `order` prop to render specific element (h1-h6), default order is 1.

.. exec::docs.title.simple

### Styles API

| Name        | Static selector     | Description                                      |
|:------------|:--------------------|:-------------------------------------------------|
| root        | .mantine-Title-root | Root element                                     |

### Keyword Arguments

#### Title

.. kwargs::Title



================================================
File: docs/tooltip/boxwrapperprops.py
================================================
import dash_mantine_components as dmc

component = dmc.Tooltip(
    label="tooltip label",
    children=dmc.Textarea(
        value="How to set the width of the textarea with a tooltip to 100%", w="100%"
    ),
    boxWrapperProps={"w": "100%"},
)



================================================
File: docs/tooltip/colors.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    justify="center",
    children=[
        dmc.Tooltip(children=dmc.Badge(color, color=color), label=color, color=color)
        for color in [
            "gray",
            "red",
            "pink",
            "grape",
            "violet",
            "indigo",
            "blue",
            "lime",
            "yellow",
            "orange",
        ]
    ],
)



================================================
File: docs/tooltip/delay.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    [
        dmc.Tooltip(
            dmc.Button("Delay Open - 500ms", variant="outline"),
            label="Opened after 500ms",
            openDelay=500,
        ),
        dmc.Tooltip(
            dmc.Button("Delay Close - 500ms", variant="outline"),
            label="Closed after 500ms",
            closeDelay=500,
        ),
    ]
)



================================================
File: docs/tooltip/floating.py
================================================
import dash_mantine_components as dmc

component = dmc.Center(
    [
        dmc.FloatingTooltip(
            label="Tooltip",
            color="orange",
            children=[
                dmc.Center(
                    dmc.Text("Hover over the box to see tooltip"),
                    style={
                        "height": 100,
                        "padding": 10,
                        "border": f"2px solid {dmc.DEFAULT_THEME['colors']['gray'][5]}",
                    },
                )
            ],
        )
    ]
)



================================================
File: docs/tooltip/inline.py
================================================
import dash_mantine_components as dmc

component = dmc.Text(
    [
        "NASA’s ",
        dmc.Tooltip(
            dmc.Mark("JWST"),
            label="James Webb Space Telescope",
            boxWrapperProps={"style": {"display": "inline-block"}},
        ),
        " is the most powerful space telescope ever built.",
    ],
    span=True,
)



================================================
File: docs/tooltip/interactive-arrow.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-tooltip-arrow"

target = dmc.Center(
    dmc.Tooltip(
        id=TARGET_ID,
        label="Tooltip",
        position="top-start",
        opened=True,
        withArrow=True,
        children=[dmc.Button("Button with tooltip")],
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_segmented_control("arrowPosition", ["center", "side"], "center")
configurator.add_number_slider("arrowOffset", min=5, max=50, value=5)
configurator.add_number_slider("arrowSize", min=1, max=15, value=8)
configurator.add_number_slider("arrowRadius", min=1, max=10, value=3)
component = configurator.panel



================================================
File: docs/tooltip/interactive.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-tooltip"

target = dmc.Center(
    dmc.Tooltip(
        id=TARGET_ID,
        label="Tooltip",
        opened=True,
        withArrow=True,
        children=[dmc.Button("Button with tooltip", variant="outline", size="lg")],
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_colorpicker("color", "red")
configurator.add_slider("radius", "sm")
configurator.add_select(
    "position",
    [
        "top",
        "right",
        "bottom",
        "left",
        "top-end",
        "top-start",
        "right-end",
        "right-start",
        "bottom-end",
        "bottom-start",
        "left-end",
        "left-start",
    ],
    "top",
)
configurator.add_switch("withArrow", True)

component = configurator.panel



================================================
File: docs/tooltip/multiline.py
================================================
import dash_mantine_components as dmc

component = dmc.Center(
    [
        dmc.Tooltip(
            multiline=True,
            w=220,
            withArrow=True,
            label="Use this button to save this information in your profile,"
            " after that you will be able to access it any time and share"
            " it via email.",
            children=dmc.Button("Multiline Tooltip", variant="outline"),
        )
    ]
)



================================================
File: docs/tooltip/offset.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-tooltip-offset"

target = dmc.Center(
    dmc.Tooltip(
        id=TARGET_ID,
        label="Tooltip",
        opened=True,
        withArrow=False,
        children=[dmc.Button("Button with tooltip")],
    )
)

configurator = Configurator(target, TARGET_ID)
configurator.add_select(
    "position",
    [
        "top",
        "right",
        "bottom",
        "left",
        "top-end",
        "top-start",
        "right-end",
        "right-start",
        "bottom-end",
        "bottom-start",
        "left-end",
        "left-start",
    ],
    "top",
)
configurator.add_number_slider("offset", min=-50, max=50,  value=0)

component = configurator.panel



================================================
File: docs/tooltip/position.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    justify="center",
    children=[
        dmc.Tooltip(
            children=dmc.Button(position, variant="outline"),
            withArrow=True,
            label=position,
            position=position,
        )
        for position in [
            "top",
            "right",
            "bottom",
            "left",
            "top-end",
            "top-start",
            "right-end",
            "right-start",
            "bottom-end",
            "bottom-start",
            "left-end",
            "left-start",
        ]
    ],
)



================================================
File: docs/tooltip/tooltip.md
================================================
---
name: Tooltip
description: Use Tooltip component to render tooltip at given element on mouse over or any other event
endpoint: /components/tooltip
package: dash_mantine_components
category: Overlay
---

.. toc::

### Introduction

.. exec::docs.tooltip.usage

### Interactive example

.. exec::docs.tooltip.interactive
    :code: false


### Colors

Tooltip supports all colors defined in Mantine's theme colors.

```python
import dash_mantine_components as dmc

dmc.Tooltip(
    label="This is a red colored tooltip.",
    color="red"
)
```

.. exec::docs.tooltip.colors
    :code: false



### Position

Tooltip position relative to target element is defined by the `position` prop.


```python
import dash_mantine_components as dmc

dmc.Tooltip(
    label="This is a tooltip",
    position="right",
    children=[...]
)
```

.. exec::docs.tooltip.position
    :code: false

### Offset
The `offset` sets the space between tooltip and target element in px, can be negative.


```python
import dash_mantine_components as dmc

dmc.Tooltip(
    label="This is a tooltip",
    position="right",
    offset=5,
    children=[...]
)
```
.. exec::docs.tooltip.offset
    :code: false

### Offset multi axis

To control `offset` on both axis, pass dictionary with `mainAxis` and `crossAxis` properties:

For an interactive demo see the [Mantine docs](https://mantine.dev/core/tooltip/#offset)

```python
import dash_mantine_components as dmc

dmc.Tooltip(
    label="This is a tooltip",
    position="top",
    offset={ "mainAxis": 50, "crossAxis": -50},
    children=[...]
)
```



### Arrow

Set `withArrow` prop to add an arrow to the tooltip. Arrow is a div element rotated with `transform: rotate(45deg)`.

`arrowPosition` prop determines how arrow is position relative to the target element when position is set to `*-start` 
and `*-end` values on `Popover` component. By default, the value is `center` – the arrow is positioned in the center of
the target element if it is possible.

If you change `arrowPosition` to `side`, then the arrow will be positioned on the side of the target element, and you
will be able to control arrow offset with `arrowOffset` prop. Note that when `arrowPosition` is set to `center`, 
`arrowOffset` prop is ignored.

.. exec::docs.tooltip.interactive-arrow
    :code: false

```python

dmc.Tooltip(
    label="This is a tooltip",
    position="top-start",
    opened=True,
    withArrow=True,
    arrowPosition="side",
    arrowOffset=5,
    arrowSize=8,
    arrowRadius=3,    
    children=[...]
)

```

### Multiline

By default, tooltip white-space property is set to nowrap. To change that use:

* `multiline` - to enable line breaks
* `w` - to define tooltip width in px

.. exec::docs.tooltip.multiline

### Inline

Use the `boxWrapperProps` to style the tooltip for inline elements.

.. exec::docs.tooltip.inline



### Transitions

Tooltip is built with Transition component, it supports the following props.

* `transition` - predefined transition name or transition object
* `duration` - transition duration in ms, defaults to 100ms
* `timingFunction` - timing function

```python
import dash_mantine_components as dmc

dmc.Tooltip(
    label="Fade transitions",
    transitionProps={
        "transition": "fade", 
        "duration": 200,
        "timingFunction": "ease"
    },
    children=[
        # children
    ],
)
```

.. exec::docs.tooltip.transitions
    :code: false

### Close and Open Delay

You can delay tooltip open/close events by setting `openDelay` and `closeDelay` props in ms. Both props default to 0 
and reset if user moves mouse over/out of target element before delay is expired.

.. exec::docs.tooltip.delay

### Floating Tooltip

`dmc.FloatingTooltip` component has the same API as `dmc.Tooltip` component but tooltip will follow mouse.

.. exec::docs.tooltip.floating

### Limitations
#### Setting width

Tooltip children are wrapped in a `Box` with a default width of `fit-content`, which may override the width defined in the children. To work around this, you can set the width using `boxWrapperProps`.

`boxWrapperProps` is a dictionary of style properties passed to the `Box` that wraps the tooltip children. In this example, both the `Textarea` and `boxWrapperProps` are used to set the width to 100%.

.. exec::docs.tooltip.boxwrapperprops

#### Tooltip Target

Any component you specify in dmc.Tooltip is wrapped by a dmc.Box component under the hood. So adding a margin
to your target component will also move the tooltip away. In order to prevent this, add margin to the wrapper component
using the prop `boxWrapperProps` in dmc.Tooltip.



### Styles API

#### Tooltip selectors

| Selector | Static selector | Description |
|----------|----------------|-------------|
| tooltip  | .mantine-Tooltip-tooltip | Root element |
| arrow    | .mantine-Tooltip-arrow   | Tooltip arrow, rendered inside tooltip |

#### Tooltip CSS variables

| Selector | Variable | Description |
|----------|----------|-------------|
| tooltip  | --tooltip-bg | Tooltip background-color |
| tooltip  | --tooltip-radius | Tooltip border-radius |
| tooltip  | --tooltip-color | Controls tooltip text color |

#### Tooltip data attributes

| Selector | Attribute | Condition |
|----------|-----------|------------|
| tooltip  | data-multiline | `multiline` prop is set |


### Keyword Arguments

#### Tooltip

.. kwargs::Tooltip

#### FloatingTooltip

.. kwargs::FloatingTooltip



================================================
File: docs/tooltip/transitions.py
================================================
import dash_mantine_components as dmc

component = dmc.Group(
    justify="center",
    children=[
        dmc.Tooltip(
            children=dmc.Badge(transition),
            transitionProps={"transition": transition, "duration": 300},
            label=transition,
        )
        for transition in [
            "fade",
            "skew-up",
            "skew-down",
            "rotate-right",
            "rotate-left",
            "slide-down",
            "slide-up",
            "slide-right",
            "slide-left",
            "scale-y",
            "scale-x",
            "scale",
            "pop",
            "pop-top-left",
            "pop-top-right",
            "pop-bottom-left",
            "pop-bottom-right",
        ]
    ],
)



================================================
File: docs/tooltip/usage.py
================================================
import dash_mantine_components as dmc

component = dmc.Tooltip(
    dmc.Button("Button with tooltip"),
    label="Tooltip"
)


================================================
File: docs/tree/checkboxes.py
================================================

import json
import dash_mantine_components as dmc
from dash import callback, Input, Output
from .data import data

component = dmc.Stack([
    dmc.Tree(data=data, checkboxes=True, id="tree-checkboxes" ),
    dmc.CodeHighlight(id="checked-nodes", code="", language="json"),
])


@callback(
    Output("checked-nodes", "code"),
    Input("tree-checkboxes", "checked")
)
def update(checked):
    return  json.dumps( checked, indent=4)




================================================
File: docs/tree/data.py
================================================

data = [
    {
        "label": "src",
        "value": "src",
        "children": [
            {
                "label": "components",
                "value": "src/components",
                "children": [
                    {"label": "Accordion.tsx", "value": "src/components/Accordion.tsx"},
                    {"label": "Tree.tsx", "value": "src/components/Tree.tsx"},
                    {"label": "Button.tsx", "value": "src/components/Button.tsx"},
                ],
            },
        ],
    },
    {
        "label": "node_modules",
        "value": "node_modules",
        "children": [
            {
                "label": "react",
                "value": "node_modules/react",
                "children": [
                    {"label": "index.d.ts", "value": "node_modules/react/index.d.ts"},
                    {
                        "label": "package.json",
                        "value": "node_modules/react/package.json",
                    },
                ],
            },
            {
                "label": "@mantine",
                "value": "node_modules/@mantine",
                "children": [
                    {
                        "label": "core",
                        "value": "node_modules/@mantine/core",
                        "children": [
                            {
                                "label": "index.d.ts",
                                "value": "node_modules/@mantine/core/index.d.ts",
                            },
                            {
                                "label": "package.json",
                                "value": "node_modules/@mantine/core/package.json",
                            },
                        ],
                    },
                    {
                        "label": "hooks",
                        "value": "node_modules/@mantine/hooks",
                        "children": [
                            {
                                "label": "index.d.ts",
                                "value": "node_modules/@mantine/hooks/index.d.ts",
                            },
                            {
                                "label": "package.json",
                                "value": "node_modules/@mantine/hooks/package.json",
                            },
                        ],
                    },
                    {
                        "label": "form",
                        "value": "node_modules/@mantine/form",
                        "children": [
                            {
                                "label": "index.d.ts",
                                "value": "node_modules/@mantine/form/index.d.ts",
                            },
                            {
                                "label": "package.json",
                                "value": "node_modules/@mantine/form/package.json",
                            },
                        ],
                    },
                ],
            },
        ],
    },
    {
        "label": "package.json",
        "value": "package.json",
    },
    {
        "label": "tsconfig.json",
        "value": "tsconfig.json",
    },
]



================================================
File: docs/tree/expand-all.py
================================================

import dash_mantine_components as dmc
from dash import callback, Input, Output
from .data import data

component = dmc.Box([
    dmc.SegmentedControl(
        id="tree-expand-all",
        data=["Expand All", "Collapse All"],
        value="Collapse All",
        mb="sm"
    ),

    dmc.Tree(
        data=data,
        id="tree-all"
    )
],p="lg")

@callback(
    Output("tree-all", "expanded"),
    Input("tree-expand-all", "value")
)
def update(value):
    if value=="Collapse All":
        return []
    return '*'



================================================
File: docs/tree/expanded-collapsed.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify
from .data import data

component = dmc.Tree(
    data=data,
    expandedIcon=DashIconify(icon="fa6-regular:folder-open"),
    collapsedIcon=DashIconify(icon="fa6-solid:folder-plus"),
)



================================================
File: docs/tree/expanded-preset.py
================================================


import json
import dash_mantine_components as dmc
from dash import  callback, Input, Output
from .data import data

component = dmc.Stack([
    dmc.Tree(
        data=data,
        expanded=[
            "node_modules",
            "node_modules/@mantine",
            "node_modules/@mantine/form",
            "node_modules/@mantine/form/index.d.ts",
        ],
        id="tree-expanded"
    ),
    dmc.CodeHighlight(id="expanded-nodes", code="", language="json"),
])


@callback(
    Output("expanded-nodes", "code"),
    Input("tree-expanded", "expanded")
)
def update(expanded):
    return  json.dumps( expanded, indent=4)



================================================
File: docs/tree/expandedicon-custom.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify
from .data import data

component = dmc.Tree(
    data=data,
    expandedIcon=DashIconify(icon="fa6-solid:arrow-down")
)



================================================
File: docs/tree/expandedicon-none.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.Tree(data=data, expandedIcon=None)



================================================
File: docs/tree/iconside.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.Tree(data=data, iconSide="right")



================================================
File: docs/tree/simple.py
================================================
import dash_mantine_components as dmc
from .data import data

component = dmc.Tree(data=data)



================================================
File: docs/tree/tree.md
================================================
---
name: Tree
description: Display a Tree structure
endpoint: /components/tree
package: dash_mantine_components
category: Navigation
---

.. toc::

### Simple Example

`Tree` component is used to display hierarchical data. `Tree` component has minimal styling by default, you can
customize styles with Styles API.

.. exec::docs.tree.simple

### Data

Data passed to the `data` prop should follow these rules:

- Data must be an array
- Each item in the array represents a node in the tree
- Each node must be a dictionary with value and label keys
- Each node can have children key with an array of child nodes
- The value of each node must be unique


```python
# ✅ Valid data, all values are unique
valid_data = [
    {
        "value": "src",
        "label": "src",
        "children": [
            {"value": "src/components", "label": "components"},
            {"value": "src/hooks", "label": "hooks"},
        ],
    },
    {"value": "package.json", "label": "package.json"},
]

# ❌ Invalid data, values are not unique (components is used twice)
invalid_data = [
    {
        "value": "src",
        "label": "src",
        "children": [{"value": "components", "label": "components"}],
    },
    {"value": "components", "label": "components"},
]

```

### Icon Side

The expanded and collapsed icons are on the left side of the label by default.  To move them to the right side, set `iconSide="right`


.. exec::docs.tree.iconside


### Remove Expanded Icon

By default the `Tree` includes a chevron to indicate expanded and collapsed nodes.  To remove the icons, set `expandedIcon=None`


.. exec::docs.tree.expandedicon-none


### Change Expanded Icon

Use any icon in the `expandedIcon` prop.  If no `collapsedIcon` is set, the icon will be rotated to indicate the collapsed state.

.. exec::docs.tree.expandedicon-custom

### Change Expanded and Collapsed Icons

When both the  `expandedIcon` and `collapsedIcon` props are set, the icons will not be rotated.


.. exec::docs.tree.expanded-collapsed

### Set Expanded state

To set the state of the nodes, use the `expanded` prop.  Note that leaf nodes can be included, but it will only change
the expanded/collapsed display of the nodes with children.


.. exec::docs.tree.expanded-preset

### Expand or Collapse All

Expand all will include all items of the `data` prop in the `expanded` prop.

.. exec::docs.tree.expand-all

### Expanded State in callbacks.

When using the expanded property as a callback input to track the user's selected expanded state, note that the `expanded`
list may include or exclude leaf nodes (nodes without children) depending on user interaction.

This happens because users can toggle the state of leaf nodes, even though they don’t affect how the tree data is 
displayed. To handle this, ensure your callback logic accounts for the possibility that leaf nodes may or may not
be present in the `expanded` prop.

Note also that the nodes included in the `expanded` prop are ordered based on user interation and the order of operations.

### With Checkboxes

Use the `checked` prop to set or track the checked items.  Note that only leaves can be checked, and the order will be
based on user interation and the order of operations. 

.. exec::docs.tree.checkboxes

### Styles API

This component supports [Styles API](/styles-api). With Styles API, you can customize styles of any inner element.
For more information on styling components,  please also refer to the [Mantine Styles](https://mantine.dev/styles/styles-overview/) documentation.

#### Tree Selectors

| Selector | Static selector         | Description                         |
|----------|--------------------------|-------------------------------------|
| root     | .mantine-Tree-root       | Root element                        |
| node     | .mantine-Tree-node       | Node element (`li`), contains label and subtree elements |
| subtree  | .mantine-Tree-subtree    | Subtree element (`ul`)              |
| label    | .mantine-Tree-label      | Node label                          |



#### Tree CSS Variables

| Selector | Variable        | Description                           |
|----------|-----------------|---------------------------------------|
| root     | --level-offset  | Controls offset of nested tree levels |



#### Tree Data Attributes

| Selector     | Attribute      | Condition              | Value                  |
|--------------|----------------|------------------------|------------------------|
| node, label  | data-selected  | The node is selected   | –                      |
| node, label  | data-hovered   | The node is hovered    | –                      |
| node         | data-level     | –                      | Nesting level of the node |


### Keyword Arguments

#### Tree

.. kwargs::Tree



================================================
File: docs/typography/font_size.py
================================================
import dash_mantine_components as dmc

from lib.configurator import Configurator

TARGET_ID = "interactive-font-size"

text="""
Dash Mantine Components makes it easy to adjust font size (fz) and line height (lh) for better readability. You can
 set these properties using predefined sizes, from 'xs' to 'xl', ensuring your text is clear and well-spaced. To
  maintain consistency throughout your app, you can customize these defaults in the theme object.
"""

target = dmc.Text(
    text,
    lh="md",
    fz="md",
    id=TARGET_ID,
)

configurator = Configurator(target, TARGET_ID)


configurator.add_slider("fz", "md")
configurator.add_slider("lh", "md")

component = configurator.panel





================================================
File: docs/typography/headings.py
================================================
import dash_mantine_components as dmc

theme = {
    "components": {
        "Title": {
            "classNames": {
                "root": "heading",
            },
        },
    },
}

dmc.MantineProvider(
    theme=theme,
    children=[
        dmc.Title("Heading 1", order=1),
        dmc.Title("Heading 2", order=2),
        dmc.Title("Heading 3", order=3),
        dmc.Title("Heading 4", order=4),
        dmc.Title("Heading 5", order=5),
        dmc.Title("Heading 6", order=6),
    ],
)



================================================
File: docs/typography/typography.md
================================================
---
name: Typography
description: How to set fonts, size and line height in the app theme
endpoint: /typography
package: dash_mantine_components
category: Theming
order: 3  # sets order in navbar section
---

.. toc::

### Change fonts

You can change fonts and other text styles for headings, code and all other components with the following theme properties:

- `theme.fontFamily` – controls font-family in all components except `Title`, `Code` and `Kbd`
- `theme.fontFamilyMonospace` – controls font-family of components that require monospace font: `Code`, `Kbd` and `CodeHighlight`
- `theme.headings.fontFamily` – controls font-family of h1-h6 tags in `Title`, fallbacks to `theme.fontFamily` if not defined

In this example, you can toggle between the default fonts and custom fonts specified in the `theme`.

```python
import dash_mantine_components as dmc
from dash import Dash, _dash_renderer, Input, Output
_dash_renderer._set_react_version("18.2.0")

app = Dash(external_stylesheets=dmc.styles.ALL)

component = dmc.Box([
    dmc.SegmentedControl(id="segment", data=["default", "custom-fonts"], value="default"),
    dmc.Box([
        dmc.Title("Greycliff CF title", order=3),
        dmc.Button("Verdana button"),
        dmc.Code("Monaco, Courier Code")
    ], bd=True, m="lg")
], m="lg")

theme= {
  "fontFamily": 'Verdana',
  "fontFamilyMonospace": 'Monaco, Courier, monospace',
  "headings": { "fontFamily": 'Greycliff CF' },
}

app.layout = dmc.MantineProvider(
    component,
    id="provider",
)

@app.callback(
    Output("provider", "theme"),
    Input("segment", "value")
)
def update_font_theme(val):
    if val == "default":
        return {}
    return theme


if __name__ == "__main__":
    app.run(debug=True)
```

### System fonts
By default, Mantine uses system fonts. It means that different devices will display components based on available font,
for example, macOS and iOS users will see San Francisco font, Windows users will see Segoe UI font, Android users will
see Roboto font and so on. This approach provides a familiar experience to the users and allows avoiding common problems 
related to custom fonts loading (layout shift, invisible text, etc.), if you do not have strict requirements, it is 
recommended to use system fonts for better performance.

Default values for theme properties:

- Default value for `theme.fontFamily` and `theme.headings.fontFamily` is `-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji`
- Default value for `theme.fontFamilyMonospace` is `ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, Liberation Mono, Courier New, monospace`


### Font Sizes

.. exec::docs.typography.font_size
    :code: false

Default `theme.fontSizes` Values

| Key | Value      | Value in px |
|-----|------------|-------------|
| xs  | 0.75rem    | 12px        |
| sm  | 0.875rem   | 14px        |
| md  | 1rem       | 16px        |
| lg  | 1.125rem   | 18px        |
| xl  | 1.25rem    | 20px        |

You can customize the `fontSizes` defaults in the `theme`: 
```python
theme = {
    "fontSizes" : {
        "xs": "0.75rem",            # customize font sizes here
        "sm": "0.875rem",
        "md": "1rem",
        "lg": "1.125rem",
        "xl": "1.25rem",
    }
}

dmc.MantineProvider(
    # your layout,
    theme=theme
)
```

### Line Heights

`theme.lineHeights` property defines line-height values for `Text` component, most other components use 
`theme.lineHeights.md` by default:

 Default `theme.lineHeights` Values


| Key | Value  |
|-----|--------|
| xs  | 1.4    |
| sm  | 1.45   |
| md  | 1.55   |
| lg  | 1.6    |
| xl  | 1.65   |

You can customize the `lineHeights` defaults in the `theme`:

```python
theme = {
    "lineHeights" : {
        "xs": "1.4",            # customize line heights here
        "sm": "1.45",
        "md": "1.55",
        "lg": "1.6",
        "xl": "1.65",
    }
}

dmc.MantineProvider(
    # your layout,
    theme=theme
)

```

### h1-h6 styles
To customize headings styles in `Title` components set `theme.headings`:

```python
import dash_mantine_components as dmc

theme = {
    "headings": {
        # Properties for all headings
        "fontWeight": "400",
        "fontFamily": "Roboto",
        # Properties for individual headings
        "sizes": {
            "h1": {
                "fontWeight": "100",
                "fontSize": "36px",
                "lineHeight": "1.4",
            },
            "h2": {
                "fontSize": "30px",
                "lineHeight": "1.5",
            },
            # Additional heading levels
            "h6": {
                "fontWeight": "900",
            },
        },
    },
}

dmc.MantineProvider(    
    # your app layout here,
    theme=theme,
)
```

With `theme.headings` you can customize `font-size`, `font-weight` and `line-height` per heading level. If you need
more control over styles, use `:is` selector with [Styles API](/styles-api) to target specific heading level:

You can find a complete minimal example in the [Help Center](https://github.com/snehilvj/dmc-docs/blob/main/help_center/theme/change_headings.py)

```python

theme = {
    "components": {
        "Title": {
            "classNames": {
                "root": "change-heading-demo",
            },
        },
    },
}

dmc.MantineProvider(
    theme=theme,
    children=[
        dmc.Title("Heading 1", order=1),
        dmc.Title("Heading 2", order=2),
        dmc.Title("Heading 3", order=3),
        dmc.Title("Heading 4", order=4),
        dmc.Title("Heading 5", order=5),
        dmc.Title("Heading 6", order=6),
    ],
)
```

In a `.css` file in `/assets` folder add:

```css

.change-heading-demo {
  &:is(h1) {
    font-family: GreycliffCF, sans-serif;
    font-weight: 900;
  }

  &:is(h5, h6) {
    color: var(--mantine-color-dimmed);
  }
}

```




================================================
File: docs/visuallyhidden/simple.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify


component = dmc.ActionIcon([
    DashIconify(icon="mdi:heart-outline"),
    dmc.VisuallyHidden("Like post")
], variant="outline")



================================================
File: docs/visuallyhidden/visuallyhidden.md
================================================
---
name: VisuallyHidden
description: Hide element visually but keep it accessible for screen readers
endpoint: /components/visually-hidden
package: dash_mantine_components
category: Miscellaneous
---

.. toc::

### Usage


`VisuallyHidden` is a utility component that hides content visually but leaves it available to screen readers.

This example uses it with the `ActionIcon` component:

.. exec::docs.visuallyhidden.simple

### Keyword Arguments

#### VisuallyHidden

.. kwargs::VisuallyHidden



================================================
File: docs/yearpickerinput/clearable.py
================================================
from datetime import datetime

import dash_mantine_components as dmc

component = dmc.YearPickerInput(
    clearable=True,
    value=datetime.now(),
    label="Pick date (clearable)",
    placeholder="Pick Date",
)



================================================
File: docs/yearpickerinput/columns.py
================================================
import dash_mantine_components as dmc

component = dmc.YearPickerInput(
    label="Pick date", placeholder="Pick date", numberOfColumns=2
)



================================================
File: docs/yearpickerinput/disabled.py
================================================
import dash_mantine_components as dmc

component = dmc.YearPickerInput(
    disabled=True,
    valueFormat="YYYY MMM",
    type="multiple",
    label="Pick month (Disabled)",
    placeholder="Pick month",
)



================================================
File: docs/yearpickerinput/icon.py
================================================
import dash_mantine_components as dmc
from dash_iconify import DashIconify

component = dmc.YearPickerInput(
    leftSection=DashIconify(icon="fa:calendar"),
    leftSectionPointerEvents="none",
    label="Pick date",
    placeholder="Pick date",
)



================================================
File: docs/yearpickerinput/minmax.py
================================================
from datetime import datetime, timedelta

import dash_mantine_components as dmc

component = dmc.YearPickerInput(
    minDate=datetime(2021, 1, 1),
    maxDate=datetime(2028, 1, 1),
    value=datetime(2021, 1, 1),
    placeholder="Date input",
    label="Select valid date",
    w=250,
)



================================================
File: docs/yearpickerinput/modal.py
================================================
import dash_mantine_components as dmc

component = dmc.YearPickerInput(
    dropdownType="modal",
    label="Pick date (picker in modal)",
    placeholder="Pick date",
)



================================================
File: docs/yearpickerinput/multiple.py
================================================
import dash_mantine_components as dmc

component = dmc.YearPickerInput(
    type="multiple",
    label="Pick multiple dates",
    placeholder="Pick dates",
)



================================================
File: docs/yearpickerinput/range.py
================================================
import dash_mantine_components as dmc

component = dmc.YearPickerInput(
    type="range",
    label="Pick dates range",
    placeholder="Pick dates range",
)



================================================
File: docs/yearpickerinput/simple.py
================================================
import dash_mantine_components as dmc

component = dmc.YearPickerInput(
    label="Pick date",
    placeholder="Pick date",
)



================================================
File: docs/yearpickerinput/valueformat.py
================================================
import dash_mantine_components as dmc

component = dmc.YearPickerInput(
    valueFormat="YY",
    type="multiple",
    label="Pick month (Value Formatter)",
    placeholder="Pick month",
)



================================================
File: docs/yearpickerinput/yearpickerinput.md
================================================
---
name: YearPickerInput
description: Year, multiple years and years range picker input
endpoint: /components/yearpickerinput
package: dash_mantine_components
category: Date Pickers
---

.. toc::



### CSS Extensions

.. admonition::CSS Extensions
   :icon: radix-icons:info-circled
   :color: red

   Date components require additional CSS styles.

The Date components require an additional CSS stylesheet.  See the [Getting Started](/getting-started) section for more information.

Be sure to include:
```python
app = Dash(external_stylesheets=[dmc.styles.DATES])
```
Or, if you want to include all optional stylesheets:
```python
app = Dash(external_stylesheets=dmc.styles.ALL)
```


### Simple Example

.. exec::docs.yearpickerinput.simple

### Multiple dates

Set type="multiple" to allow user to pick multiple months.  Note that `value` is a list.

.. exec::docs.yearpickerinput.multiple

### Dates range

Set type="range" to allow user to pick dates range. Note that `value` is a list.

.. exec::docs.yearpickerinput.range

### Open picker in modal

By default, YearPickerInput is rendered inside Popover. You can change that to Modal by setting dropdownType="modal"

.. exec::docs.yearpickerinput.modal

### Number of columns

.. exec::docs.yearpickerinput.columns

### Value format

Use `format` property to change the format of the date displayed in the date input field.

.. exec::docs.yearpickerinput.valueformat

Use `valueFormat` prop to change [dayjs format](https://day.js.org/docs/en/display/format) of value label.

### Clearable

Set `clearable=True` prop to display clear button in the right section. Note that if you set `rightSection` prop, clear button will not be displayed.

.. exec::docs.yearpickerinput.clearable


### With Icon

.. exec::docs.yearpickerinput.icon

### Min and Max date

.. exec::docs.yearpickerinput.minmax

### Styles API
| Selector                   | Static selector                                      | Description                                                           |
| ---------------------------| ---------------------------------------------------- | --------------------------------------------------------------------- |
| `wrapper`                  | `.mantine-YearPickerInput-wrapper`                   | Root element of the Input                                              |
| `input`                    | `.mantine-YearPickerInput-input`                     | Input element                                                         |
| `section`                  | `.mantine-YearPickerInput-section`                   | Left and right sections                                                |
| `root`                     | `.mantine-YearPickerInput-root`                      | Root element                                                          |
| `label`                    | `.mantine-YearPickerInput-label`                     | Label element                                                         |
| `required`                 | `.mantine-YearPickerInput-required`                  | Required asterisk element, rendered inside label                       |
| `description`              | `.mantine-YearPickerInput-description`               | Description element                                                    |
| `error`                    | `.mantine-YearPickerInput-error`                     | Error element                                                         |
| `calendarHeader`           | `.mantine-YearPickerInput-calendarHeader`            | Calendar header root element                                           |
| `calendarHeaderControl`     | `.mantine-YearPickerInput-calendarHeaderControl`     | Previous/next calendar header controls                                 |
| `calendarHeaderControlIcon` | `.mantine-YearPickerInput-calendarHeaderControlIcon` | Icon of previous/next calendar header controls                         |
| `calendarHeaderLevel`       | `.mantine-YearPickerInput-calendarHeaderLevel`       | Level control (changes levels when clicked, month -> year -> decade)   |
| `levelsGroup`              | `.mantine-YearPickerInput-levelsGroup`               | Group of decades levels                                                |
| `yearsList`                | `.mantine-YearPickerInput-yearsList`                 | Years list table element                                               |
| `yearsListRow`             | `.mantine-YearPickerInput-yearsListRow`              | Years list row element                                                 |
| `yearsListCell`            | `.mantine-YearPickerInput-yearsListCell`             | Years list cell element                                                |
| `yearsListControl`         | `.mantine-YearPickerInput-yearsListControl`          | Button used to pick months and years                                   |
| `placeholder`              | `.mantine-YearPickerInput-placeholder`               | Placeholder element                                                    |

### YearPickerInput data attributes

| Selector              | Attribute      | Condition                           | Value                              |
| --------------------- | -------------- | ----------------------------------- | ---------------------------------- |
| `calendarHeaderControl`| `data-direction`| –                                   | "previous" or "next" depending on the control type |
| `calendarHeaderControl`| `data-disabled`| Control is disabled for any reason  | –                                  |

### Keyword Arguments

#### YearPickerInput

.. kwargs::YearPickerInput


